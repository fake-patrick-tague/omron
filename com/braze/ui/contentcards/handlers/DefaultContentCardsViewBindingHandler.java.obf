package com.braze.ui.contentcards.handlers;

import android.content.Context;
import android.os.Parcel;
import android.os.Parcelable.Creator;
import android.view.ViewGroup;
import com.braze.enums.CardType;
import com.braze.enums.CardType.Companion;
import com.braze.models.cards.Card;
import com.braze.ui.contentcards.view.BannerImageContentCardView;
import com.braze.ui.contentcards.view.BaseContentCardView;
import com.braze.ui.contentcards.view.CaptionedImageContentCardView;
import com.braze.ui.contentcards.view.ContentCardViewHolder;
import com.braze.ui.contentcards.view.DefaultContentCardView;
import com.braze.ui.contentcards.view.ShortNewsContentCardView;
import com.braze.ui.contentcards.view.TextAnnouncementContentCardView;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import kotlin.x.d.i;

public class DefaultContentCardsViewBindingHandler
  implements IContentCardsViewBindingHandler
{
  public static final Parcelable.Creator<DefaultContentCardsViewBindingHandler> CREATOR = new DefaultContentCardsViewBindingHandler.Companion.CREATOR.1();
  public static final Companion Companion = new Companion(null);
  private final Map<CardType, BaseContentCardView<?>> contentCardViewCache = new LinkedHashMap();
  
  public DefaultContentCardsViewBindingHandler() {}
  
  public int describeContents()
  {
    return 0;
  }
  
  public final BaseContentCardView<?> getContentCardsViewFromCache(Context paramContext, CardType paramCardType)
  {
    i.e(paramContext, "context");
    i.e(paramCardType, "cardType");
    if ((!contentCardViewCache.containsKey(paramCardType)) || (contentCardViewCache.get(paramCardType) == null))
    {
      int i = WhenMappings.$EnumSwitchMapping$0[paramCardType.ordinal()];
      if (i != 1)
      {
        if (i != 2)
        {
          if (i != 3)
          {
            if (i != 4) {
              localObject = new DefaultContentCardView(paramContext);
            } else {
              localObject = new TextAnnouncementContentCardView(paramContext);
            }
          }
          else {
            localObject = new ShortNewsContentCardView(paramContext);
          }
        }
        else {
          localObject = new CaptionedImageContentCardView(paramContext);
        }
      }
      else {
        localObject = new BannerImageContentCardView(paramContext);
      }
      contentCardViewCache.put(paramCardType, localObject);
    }
    Object localObject = (BaseContentCardView)contentCardViewCache.get(paramCardType);
    paramCardType = (CardType)localObject;
    if (localObject == null) {
      paramCardType = new DefaultContentCardView(paramContext);
    }
    return paramCardType;
  }
  
  public int getItemViewType(Context paramContext, List<? extends Card> paramList, int paramInt)
  {
    i.e(paramContext, "context");
    i.e(paramList, "cards");
    if ((paramInt >= 0) && (paramInt < paramList.size())) {
      return ((Card)paramList.get(paramInt)).getCardType().getValue();
    }
    return -1;
  }
  
  public void onBindViewHolder(Context paramContext, List<? extends Card> paramList, ContentCardViewHolder paramContentCardViewHolder, int paramInt)
  {
    i.e(paramContext, "context");
    i.e(paramList, "cards");
    i.e(paramContentCardViewHolder, "viewHolder");
    if (paramInt >= 0)
    {
      if (paramInt >= paramList.size()) {
        return;
      }
      paramList = (Card)paramList.get(paramInt);
      getContentCardsViewFromCache(paramContext, paramList.getCardType()).bindViewHolder(paramContentCardViewHolder, paramList);
    }
  }
  
  public ContentCardViewHolder onCreateViewHolder(Context paramContext, List<? extends Card> paramList, ViewGroup paramViewGroup, int paramInt)
  {
    i.e(paramContext, "context");
    i.e(paramList, "cards");
    i.e(paramViewGroup, "viewGroup");
    return getContentCardsViewFromCache(paramContext, CardType.Companion.fromValue(paramInt)).createViewHolder(paramViewGroup);
  }
  
  public void writeToParcel(Parcel paramParcel, int paramInt)
  {
    i.e(paramParcel, "dest");
  }
  
  public static final class Companion
  {
    private Companion() {}
  }
}
