package com.braze.ui.support;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.ComponentInfoFlags;
import android.content.pm.PackageManager.NameNotFoundException;
import android.net.Uri;
import android.net.Uri.Builder;
import android.os.Build.VERSION;
import android.os.Bundle;
import com.braze.IBrazeDeeplinkHandler;
import com.braze.IBrazeDeeplinkHandler.IntentFlagPurpose;
import com.braze.support.BrazeLogger;
import com.braze.support.BrazeLogger.Priority;
import com.braze.ui.BrazeDeeplinkHandler;
import com.braze.ui.BrazeDeeplinkHandler.Companion;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import kotlin.collections.a0;
import kotlin.x.c.a;
import kotlin.x.d.i;
import kotlin.x.d.j;
import kotlin.x.d.s;

public final class UriUtils
{
  private static final String TAG = BrazeLogger.INSTANCE.getBrazeLogTag("UriUtils");
  
  public static final Intent getMainActivityIntent(Context paramContext, Bundle paramBundle)
  {
    i.e(paramContext, "context");
    paramContext = paramContext.getPackageManager().getLaunchIntentForPackage(paramContext.getPackageName());
    if (paramContext != null) {
      paramContext.setFlags(BrazeDeeplinkHandler.Companion.getInstance().getIntentFlags(IBrazeDeeplinkHandler.IntentFlagPurpose.URI_UTILS_GET_MAIN_ACTIVITY_INTENT));
    }
    if ((paramBundle != null) && (paramContext != null)) {
      paramContext.putExtras(paramBundle);
    }
    return paramContext;
  }
  
  public static final Map<String, String> getQueryParameters(Uri paramUri)
  {
    i.e(paramUri, "<this>");
    s localS = new s();
    b = paramUri;
    Object localObject1 = ((Uri)paramUri).getEncodedQuery();
    if (localObject1 == null)
    {
      BrazeLogger.brazelog$default(BrazeLogger.INSTANCE, TAG, BrazeLogger.Priority.V, null, new j(localS)
      {
        public final String invoke()
        {
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("Encoded query is null for Uri: ");
          localStringBuilder.append($uri.b);
          localStringBuilder.append(" Returning empty map for query parameters");
          return localStringBuilder.toString();
        }
      }, 4, null);
      return a0.d();
    }
    paramUri = new LinkedHashMap();
    for (;;)
    {
      int i;
      try
      {
        if (((Uri)b).isOpaque())
        {
          localObject1 = Uri.parse("://").buildUpon().encodedQuery((String)localObject1).build();
          i.d(localObject1, "parse(\"://\")\n           ?\n                .build()");
          b = localObject1;
        }
        localObject2 = ((Uri)b).getQueryParameterNames();
        i.d(localObject2, "uri.queryParameterNames");
        localObject1 = new ArrayList();
        localObject2 = ((Iterable)localObject2).iterator();
        boolean bool = ((Iterator)localObject2).hasNext();
        i = 0;
        if (bool)
        {
          localObject3 = ((Iterator)localObject2).next();
          String str = (String)localObject3;
          if ((str == null) || (str.length() == 0)) {
            break label330;
          }
          if ((i ^ 0x1) == 0) {
            continue;
          }
          ((Collection)localObject1).add(localObject3);
          continue;
        }
        localObject1 = ((List)localObject1).iterator();
        if (!((Iterator)localObject1).hasNext()) {
          break label328;
        }
        localObject2 = (String)((Iterator)localObject1).next();
        localObject3 = ((Uri)b).getQueryParameter((String)localObject2);
        if (localObject3 == null) {
          break label340;
        }
        if (((CharSequence)localObject3).length() != 0) {
          break label335;
        }
      }
      catch (Exception localException)
      {
        Object localObject2;
        Object localObject3;
        BrazeLogger.INSTANCE.brazelog(TAG, BrazeLogger.Priority.E, localException, new j(localS)
        {
          public final String invoke()
          {
            StringBuilder localStringBuilder = new StringBuilder();
            localStringBuilder.append("Failed to map the query parameters of Uri: ");
            localStringBuilder.append($uri.b);
            return localStringBuilder.toString();
          }
        });
      }
      if (i == 0)
      {
        i.d(localObject2, "queryParameterKey");
        paramUri.put(localObject2, localObject3);
        continue;
        label328:
        return paramUri;
        label330:
        i = 1;
        continue;
        label335:
        i = 0;
        continue;
        label340:
        i = 1;
      }
    }
  }
  
  public static final boolean isActivityRegisteredInManifest(Context paramContext, String paramString)
  {
    i.e(paramContext, "context");
    i.e(paramString, "className");
    try
    {
      if (Build.VERSION.SDK_INT >= 33) {
        paramContext.getPackageManager().getActivityInfo(new ComponentName(paramContext, paramString), PackageManager.ComponentInfoFlags.of(0L));
      } else {
        paramContext.getPackageManager().getActivityInfo(new ComponentName(paramContext, paramString), 0);
      }
      return true;
    }
    catch (PackageManager.NameNotFoundException paramContext)
    {
      BrazeLogger.INSTANCE.brazelog(TAG, BrazeLogger.Priority.W, paramContext, new j(paramString)
      {
        public final String invoke()
        {
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("Could not find activity info for class with name: ");
          localStringBuilder.append($className);
          return localStringBuilder.toString();
        }
      });
    }
    return false;
  }
}
