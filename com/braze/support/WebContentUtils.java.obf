package com.braze.support;

import android.content.Context;
import java.io.File;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import kotlin.l;
import kotlin.text.g;
import kotlin.x.c.a;
import kotlin.x.d.i;
import kotlin.x.d.j;
import kotlin.x.d.s;

public final class WebContentUtils
{
  public static final WebContentUtils INSTANCE = new WebContentUtils();
  
  private WebContentUtils() {}
  
  public static final File getHtmlInAppMessageAssetCacheDirectory(Context paramContext)
  {
    i.e(paramContext, "context");
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(paramContext.getCacheDir().getPath());
    localStringBuilder.append('/');
    localStringBuilder.append("braze-html-inapp-messages");
    return new File(localStringBuilder.toString());
  }
  
  public static final String getLocalHtmlUrlFromRemoteUrl(final File paramFile, String paramString)
  {
    i.e(paramFile, "localDirectory");
    i.e(paramString, "remoteZipUrl");
    if (g.o(paramString))
    {
      BrazeLogger.brazelog$default(BrazeLogger.INSTANCE, INSTANCE, BrazeLogger.Priority.W, null, a.b, 2, null);
      return null;
    }
    paramFile = paramFile.getAbsolutePath();
    Object localObject1 = String.valueOf(IntentUtils.getRequestCode());
    Object localObject2 = new StringBuilder();
    ((StringBuilder)localObject2).append(paramFile);
    ((StringBuilder)localObject2).append('/');
    ((StringBuilder)localObject2).append((String)localObject1);
    paramFile = ((StringBuilder)localObject2).toString();
    localObject2 = BrazeLogger.INSTANCE;
    WebContentUtils localWebContentUtils = INSTANCE;
    BrazeLogger.brazelog$default((BrazeLogger)localObject2, localWebContentUtils, null, null, new b(paramString, paramFile), 3, null);
    try
    {
      localObject1 = BrazeFileUtils.downloadFileToPath(paramFile, paramString, (String)localObject1, ".zip");
      localObject1 = (File)((l)localObject1).a();
      BrazeLogger.brazelog$default((BrazeLogger)localObject2, localWebContentUtils, null, null, new d(paramString, paramFile), 3, null);
      if (!unpackZipIntoDirectory(paramFile, (File)localObject1))
      {
        BrazeLogger.brazelog$default((BrazeLogger)localObject2, localWebContentUtils, BrazeLogger.Priority.W, null, e.b, 2, null);
        BrazeFileUtils.deleteFileOrDirectory(new File(paramFile));
        return null;
      }
      BrazeLogger.brazelog$default((BrazeLogger)localObject2, localWebContentUtils, null, null, new f(paramFile), 3, null);
      return paramFile;
    }
    catch (Exception localException)
    {
      BrazeLogger.INSTANCE.brazelog(INSTANCE, BrazeLogger.Priority.E, localException, new c(paramString));
      BrazeFileUtils.deleteFileOrDirectory(new File(paramFile));
    }
    return null;
  }
  
  public static final String replacePrefetchedUrlsWithLocalAssets(String paramString, Map<String, String> paramMap)
  {
    i.e(paramString, "originalString");
    i.e(paramMap, "remoteToLocalAssetMap");
    Iterator localIterator = paramMap.entrySet().iterator();
    while (localIterator.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      final s localS = new s();
      b = localEntry.getValue();
      if (!new File((String)b).exists())
      {
        BrazeLogger.brazelog$default(BrazeLogger.INSTANCE, INSTANCE, BrazeLogger.Priority.W, null, new g(localS), 2, null);
      }
      else
      {
        paramMap = (String)b;
        WebContentUtils localWebContentUtils = INSTANCE;
        if (g.v(paramMap, "file://", false, 2, null))
        {
          paramMap = (String)b;
        }
        else
        {
          paramMap = new StringBuilder();
          paramMap.append("file://");
          paramMap.append((String)b);
          paramMap = paramMap.toString();
        }
        b = paramMap;
        paramMap = (String)localEntry.getKey();
        if (g.y(paramString, paramMap, false, 2, null))
        {
          BrazeLogger.brazelog$default(BrazeLogger.INSTANCE, localWebContentUtils, null, null, new h(paramMap, localS), 3, null);
          paramString = g.r(paramString, paramMap, (String)b, false, 4, null);
        }
      }
    }
    return paramString;
  }
  
  /* Error */
  public static final boolean unpackZipIntoDirectory(final String paramString, File paramFile)
  {
    // Byte code:
    //   0: aload_0
    //   1: ldc -23
    //   3: invokestatic 49	kotlin/x/d/i:e	(Ljava/lang/Object;Ljava/lang/String;)V
    //   6: aload_1
    //   7: ldc -21
    //   9: invokestatic 49	kotlin/x/d/i:e	(Ljava/lang/Object;Ljava/lang/String;)V
    //   12: aload_0
    //   13: invokestatic 93	kotlin/text/g:o	(Ljava/lang/CharSequence;)Z
    //   16: ifeq +23 -> 39
    //   19: getstatic 98	com/braze/support/BrazeLogger:INSTANCE	Lcom/braze/support/BrazeLogger;
    //   22: getstatic 37	com/braze/support/WebContentUtils:INSTANCE	Lcom/braze/support/WebContentUtils;
    //   25: getstatic 238	com/braze/support/BrazeLogger$Priority:I	Lcom/braze/support/BrazeLogger$Priority;
    //   28: aconst_null
    //   29: getstatic 241	com/braze/support/WebContentUtils$i:b	Lcom/braze/support/WebContentUtils$i;
    //   32: iconst_2
    //   33: aconst_null
    //   34: invokestatic 112	com/braze/support/BrazeLogger:brazelog$default	(Lcom/braze/support/BrazeLogger;Ljava/lang/Object;Lcom/braze/support/BrazeLogger$Priority;Ljava/lang/Throwable;Lkotlin/x/c/a;ILjava/lang/Object;)V
    //   37: iconst_0
    //   38: ireturn
    //   39: new 60	java/io/File
    //   42: dup
    //   43: aload_0
    //   44: invokespecial 79	java/io/File:<init>	(Ljava/lang/String;)V
    //   47: invokevirtual 244	java/io/File:mkdirs	()Z
    //   50: pop
    //   51: new 196	kotlin/x/d/s
    //   54: dup
    //   55: invokespecial 197	kotlin/x/d/s:<init>	()V
    //   58: astore 5
    //   60: new 246	java/util/zip/ZipInputStream
    //   63: dup
    //   64: new 248	java/io/FileInputStream
    //   67: dup
    //   68: aload_1
    //   69: invokespecial 250	java/io/FileInputStream:<init>	(Ljava/io/File;)V
    //   72: invokespecial 253	java/util/zip/ZipInputStream:<init>	(Ljava/io/InputStream;)V
    //   75: astore 4
    //   77: aload 4
    //   79: invokevirtual 257	java/util/zip/ZipInputStream:getNextEntry	()Ljava/util/zip/ZipEntry;
    //   82: astore_3
    //   83: aload_3
    //   84: ifnull +278 -> 362
    //   87: aload_3
    //   88: invokevirtual 262	java/util/zip/ZipEntry:getName	()Ljava/lang/String;
    //   91: astore 6
    //   93: aload 6
    //   95: ldc_w 264
    //   98: invokestatic 267	kotlin/x/d/i:d	(Ljava/lang/Object;Ljava/lang/String;)V
    //   101: aload 5
    //   103: aload 6
    //   105: putfield 203	kotlin/x/d/s:b	Ljava/lang/Object;
    //   108: getstatic 273	java/util/Locale:US	Ljava/util/Locale;
    //   111: astore 7
    //   113: aload 7
    //   115: ldc_w 274
    //   118: invokestatic 267	kotlin/x/d/i:d	(Ljava/lang/Object;Ljava/lang/String;)V
    //   121: aload 6
    //   123: aload 7
    //   125: invokevirtual 278	java/lang/String:toLowerCase	(Ljava/util/Locale;)Ljava/lang/String;
    //   128: astore 6
    //   130: aload 6
    //   132: ldc_w 280
    //   135: invokestatic 267	kotlin/x/d/i:d	(Ljava/lang/Object;Ljava/lang/String;)V
    //   138: aload 6
    //   140: ldc_w 282
    //   143: iconst_0
    //   144: iconst_2
    //   145: aconst_null
    //   146: invokestatic 215	kotlin/text/g:v	(Ljava/lang/String;Ljava/lang/String;ZILjava/lang/Object;)Z
    //   149: istore_2
    //   150: iload_2
    //   151: ifne +197 -> 348
    //   154: new 51	java/lang/StringBuilder
    //   157: dup
    //   158: invokespecial 52	java/lang/StringBuilder:<init>	()V
    //   161: astore 6
    //   163: aload 6
    //   165: aload_0
    //   166: invokevirtual 68	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   169: pop
    //   170: aload 6
    //   172: bipush 47
    //   174: invokevirtual 71	java/lang/StringBuilder:append	(C)Ljava/lang/StringBuilder;
    //   177: pop
    //   178: aload 6
    //   180: aload 5
    //   182: getfield 203	kotlin/x/d/s:b	Ljava/lang/Object;
    //   185: checkcast 123	java/lang/String
    //   188: invokevirtual 68	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   191: pop
    //   192: aload_0
    //   193: aload 6
    //   195: invokevirtual 76	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   198: invokestatic 286	com/braze/support/WebContentUtils:validateChildFileExistsUnderParent	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
    //   201: astore 6
    //   203: aload_3
    //   204: invokevirtual 289	java/util/zip/ZipEntry:isDirectory	()Z
    //   207: ifeq +19 -> 226
    //   210: new 60	java/io/File
    //   213: dup
    //   214: aload 6
    //   216: invokespecial 79	java/io/File:<init>	(Ljava/lang/String;)V
    //   219: invokevirtual 244	java/io/File:mkdirs	()Z
    //   222: pop
    //   223: goto +125 -> 348
    //   226: new 60	java/io/File
    //   229: dup
    //   230: aload 6
    //   232: invokespecial 79	java/io/File:<init>	(Ljava/lang/String;)V
    //   235: invokevirtual 292	java/io/File:getParentFile	()Ljava/io/File;
    //   238: astore_3
    //   239: aload_3
    //   240: ifnull +34 -> 274
    //   243: aload_3
    //   244: invokevirtual 244	java/io/File:mkdirs	()Z
    //   247: pop
    //   248: goto +26 -> 274
    //   251: astore_3
    //   252: getstatic 98	com/braze/support/BrazeLogger:INSTANCE	Lcom/braze/support/BrazeLogger;
    //   255: getstatic 37	com/braze/support/WebContentUtils:INSTANCE	Lcom/braze/support/WebContentUtils;
    //   258: getstatic 160	com/braze/support/BrazeLogger$Priority:E	Lcom/braze/support/BrazeLogger$Priority;
    //   261: aload_3
    //   262: new 24	com/braze/support/WebContentUtils$j
    //   265: dup
    //   266: aload 5
    //   268: invokespecial 293	com/braze/support/WebContentUtils$j:<init>	(Lkotlin/x/d/s;)V
    //   271: invokevirtual 165	com/braze/support/BrazeLogger:brazelog	(Ljava/lang/Object;Lcom/braze/support/BrazeLogger$Priority;Ljava/lang/Throwable;Lkotlin/x/c/a;)V
    //   274: new 295	java/io/BufferedOutputStream
    //   277: dup
    //   278: new 297	java/io/FileOutputStream
    //   281: dup
    //   282: aload 6
    //   284: invokespecial 298	java/io/FileOutputStream:<init>	(Ljava/lang/String;)V
    //   287: invokespecial 301	java/io/BufferedOutputStream:<init>	(Ljava/io/OutputStream;)V
    //   290: astore_3
    //   291: aload 4
    //   293: aload_3
    //   294: iconst_0
    //   295: iconst_2
    //   296: aconst_null
    //   297: invokestatic 306	kotlin/io/b:b	(Ljava/io/InputStream;Ljava/io/OutputStream;IILjava/lang/Object;)J
    //   300: pop2
    //   301: aload_3
    //   302: aconst_null
    //   303: invokestatic 311	kotlin/io/c:a	(Ljava/io/Closeable;Ljava/lang/Throwable;)V
    //   306: goto +42 -> 348
    //   309: astore 6
    //   311: aload 6
    //   313: athrow
    //   314: astore 7
    //   316: aload_3
    //   317: aload 6
    //   319: invokestatic 311	kotlin/io/c:a	(Ljava/io/Closeable;Ljava/lang/Throwable;)V
    //   322: aload 7
    //   324: athrow
    //   325: astore_3
    //   326: getstatic 98	com/braze/support/BrazeLogger:INSTANCE	Lcom/braze/support/BrazeLogger;
    //   329: getstatic 37	com/braze/support/WebContentUtils:INSTANCE	Lcom/braze/support/WebContentUtils;
    //   332: getstatic 160	com/braze/support/BrazeLogger$Priority:E	Lcom/braze/support/BrazeLogger$Priority;
    //   335: aload_3
    //   336: new 26	com/braze/support/WebContentUtils$k
    //   339: dup
    //   340: aload 5
    //   342: invokespecial 312	com/braze/support/WebContentUtils$k:<init>	(Lkotlin/x/d/s;)V
    //   345: invokevirtual 165	com/braze/support/BrazeLogger:brazelog	(Ljava/lang/Object;Lcom/braze/support/BrazeLogger$Priority;Ljava/lang/Throwable;Lkotlin/x/c/a;)V
    //   348: aload 4
    //   350: invokevirtual 315	java/util/zip/ZipInputStream:closeEntry	()V
    //   353: aload 4
    //   355: invokevirtual 257	java/util/zip/ZipInputStream:getNextEntry	()Ljava/util/zip/ZipEntry;
    //   358: astore_3
    //   359: goto -276 -> 83
    //   362: getstatic 320	kotlin/t:a	Lkotlin/t;
    //   365: astore_3
    //   366: aload 4
    //   368: aconst_null
    //   369: invokestatic 311	kotlin/io/c:a	(Ljava/io/Closeable;Ljava/lang/Throwable;)V
    //   372: iconst_1
    //   373: ireturn
    //   374: astore_3
    //   375: aload_3
    //   376: athrow
    //   377: astore 5
    //   379: aload 4
    //   381: aload_3
    //   382: invokestatic 311	kotlin/io/c:a	(Ljava/io/Closeable;Ljava/lang/Throwable;)V
    //   385: aload 5
    //   387: athrow
    //   388: astore_3
    //   389: getstatic 98	com/braze/support/BrazeLogger:INSTANCE	Lcom/braze/support/BrazeLogger;
    //   392: getstatic 37	com/braze/support/WebContentUtils:INSTANCE	Lcom/braze/support/WebContentUtils;
    //   395: getstatic 160	com/braze/support/BrazeLogger$Priority:E	Lcom/braze/support/BrazeLogger$Priority;
    //   398: aload_3
    //   399: new 28	com/braze/support/WebContentUtils$l
    //   402: dup
    //   403: aload_1
    //   404: aload_0
    //   405: invokespecial 323	com/braze/support/WebContentUtils$l:<init>	(Ljava/io/File;Ljava/lang/String;)V
    //   408: invokevirtual 165	com/braze/support/BrazeLogger:brazelog	(Ljava/lang/Object;Lcom/braze/support/BrazeLogger$Priority;Ljava/lang/Throwable;Lkotlin/x/c/a;)V
    //   411: iconst_0
    //   412: ireturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	413	0	paramString	String
    //   0	413	1	paramFile	File
    //   149	2	2	bool	boolean
    //   82	162	3	localObject1	Object
    //   251	11	3	localException1	Exception
    //   290	27	3	localBufferedOutputStream	java.io.BufferedOutputStream
    //   325	11	3	localException2	Exception
    //   358	8	3	localObject2	Object
    //   374	8	3	localThrowable1	Throwable
    //   388	11	3	localThrowable2	Throwable
    //   75	305	4	localZipInputStream	java.util.zip.ZipInputStream
    //   58	283	5	localS	s
    //   377	9	5	localObject3	Object
    //   91	192	6	localObject4	Object
    //   309	9	6	localThrowable3	Throwable
    //   111	13	7	localLocale	java.util.Locale
    //   314	9	7	localObject5	Object
    // Exception table:
    //   from	to	target	type
    //   226	239	251	java/lang/Exception
    //   243	248	251	java/lang/Exception
    //   291	301	309	finally
    //   311	314	314	finally
    //   154	223	325	java/lang/Exception
    //   252	274	325	java/lang/Exception
    //   274	291	325	java/lang/Exception
    //   301	306	325	java/lang/Exception
    //   316	325	325	java/lang/Exception
    //   77	83	374	finally
    //   87	150	374	finally
    //   154	223	374	finally
    //   226	239	374	finally
    //   243	248	374	finally
    //   252	274	374	finally
    //   274	291	374	finally
    //   301	306	374	finally
    //   316	325	374	finally
    //   326	348	374	finally
    //   348	359	374	finally
    //   362	366	374	finally
    //   375	377	377	finally
    //   51	77	388	finally
    //   366	372	388	finally
    //   379	388	388	finally
  }
  
  public static final String validateChildFileExistsUnderParent(String paramString1, String paramString2)
  {
    i.e(paramString1, "intendedParentDirectory");
    i.e(paramString2, "childFilePath");
    String str1 = new File(paramString1).getCanonicalPath();
    String str2 = new File(paramString2).getCanonicalPath();
    i.d(str2, "childFileCanonicalPath");
    i.d(str1, "parentCanonicalPath");
    if (g.v(str2, str1, false, 2, null)) {
      return str2;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Invalid file with original path: ");
    localStringBuilder.append(paramString2);
    localStringBuilder.append(" with canonical path: ");
    localStringBuilder.append(str2);
    localStringBuilder.append(" does not exist under intended parent with  path: ");
    localStringBuilder.append(paramString1);
    localStringBuilder.append(" and canonical path: ");
    localStringBuilder.append(str1);
    throw new IllegalStateException(localStringBuilder.toString());
  }
  
  static final class a
    extends j
    implements a<String>
  {
    public static final a b = new a();
    
    a()
    {
      super();
    }
    
    public final String a()
    {
      return "Remote zip url is empty. No local URL will be created.";
    }
  }
  
  static final class b
    extends j
    implements a<String>
  {
    b(String paramString1, String paramString2)
    {
      super();
    }
    
    public final String a()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Starting download of url: ");
      localStringBuilder.append(b);
      localStringBuilder.append(" to ");
      localStringBuilder.append(paramFile);
      return localStringBuilder.toString();
    }
  }
  
  static final class c
    extends j
    implements a<String>
  {
    c(String paramString)
    {
      super();
    }
    
    public final String a()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Could not download zip file to local storage. ");
      localStringBuilder.append(b);
      return localStringBuilder.toString();
    }
  }
  
  static final class d
    extends j
    implements a<String>
  {
    d(String paramString1, String paramString2)
    {
      super();
    }
    
    public final String a()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Html content zip downloaded. ");
      localStringBuilder.append(b);
      localStringBuilder.append(" to ");
      localStringBuilder.append(paramFile);
      return localStringBuilder.toString();
    }
  }
  
  static final class e
    extends j
    implements a<String>
  {
    public static final e b = new e();
    
    e()
    {
      super();
    }
    
    public final String a()
    {
      return "Error during the zip unpack.";
    }
  }
  
  static final class f
    extends j
    implements a<String>
  {
    f(String paramString)
    {
      super();
    }
    
    public final String a()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Html content zip unpacked to to ");
      localStringBuilder.append(b);
      localStringBuilder.append('.');
      return localStringBuilder.toString();
    }
  }
  
  static final class g
    extends j
    implements a<String>
  {
    g(s<String> paramS)
    {
      super();
    }
    
    public final String a()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Cannot find local asset file at path: ");
      localStringBuilder.append((String)b.b);
      return localStringBuilder.toString();
    }
  }
  
  static final class h
    extends j
    implements a<String>
  {
    h(String paramString, s<String> paramS)
    {
      super();
    }
    
    public final String a()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Replacing remote url \"");
      localStringBuilder.append(b);
      localStringBuilder.append("\" with local uri \"");
      localStringBuilder.append((String)localSb);
      localStringBuilder.append('"');
      return localStringBuilder.toString();
    }
  }
  
  static final class i
    extends j
    implements a<String>
  {
    public static final i b = new i();
    
    i()
    {
      super();
    }
    
    public final String a()
    {
      return "Unpack directory is blank. Zip file not unpacked.";
    }
  }
  
  static final class j
    extends j
    implements a<String>
  {
    j(s<String> paramS)
    {
      super();
    }
    
    public final String a()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Error creating parent directory ");
      localStringBuilder.append((String)b.b);
      return localStringBuilder.toString();
    }
  }
  
  static final class k
    extends j
    implements a<String>
  {
    k(s<String> paramS)
    {
      super();
    }
    
    public final String a()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Error unpacking zipEntry ");
      localStringBuilder.append((String)b.b);
      return localStringBuilder.toString();
    }
  }
  
  static final class l
    extends j
    implements a<String>
  {
    l(File paramFile, String paramString)
    {
      super();
    }
    
    public final String a()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Error during unpack of zip file ");
      localStringBuilder.append(b.getAbsolutePath());
      localStringBuilder.append(" to ");
      localStringBuilder.append(paramString);
      localStringBuilder.append('.');
      return localStringBuilder.toString();
    }
  }
}
