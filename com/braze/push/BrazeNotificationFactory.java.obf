package com.braze.push;

import android.app.Notification;
import android.content.Context;
import android.os.Bundle;
import androidx.core.app.m.e;
import com.braze.IBrazeNotificationFactory;
import com.braze.configuration.BrazeConfigurationProvider;
import com.braze.models.push.BrazeNotificationPayload;
import com.braze.support.BrazeLogger;
import com.braze.support.BrazeLogger.Priority;
import kotlin.x.c.a;
import kotlin.x.d.i;
import kotlin.x.d.j;

public class BrazeNotificationFactory
  implements IBrazeNotificationFactory
{
  public static final Companion Companion = new Companion(null);
  private static final BrazeNotificationFactory internalInstance = new BrazeNotificationFactory();
  
  public BrazeNotificationFactory() {}
  
  public Notification createNotification(BrazeNotificationPayload paramBrazeNotificationPayload)
  {
    i.e(paramBrazeNotificationPayload, "payload");
    paramBrazeNotificationPayload = Companion.populateNotificationBuilder(paramBrazeNotificationPayload);
    if (paramBrazeNotificationPayload != null) {
      return paramBrazeNotificationPayload.c();
    }
    BrazeLogger.brazelog$default(BrazeLogger.INSTANCE, this, BrazeLogger.Priority.I, null, createNotification.1.INSTANCE, 2, null);
    return null;
  }
  
  public static final class Companion
  {
    private Companion() {}
    
    public final BrazeNotificationFactory getInstance()
    {
      return BrazeNotificationFactory.access$getInternalInstance$cp();
    }
    
    public final m.e populateNotificationBuilder(BrazeNotificationPayload paramBrazeNotificationPayload)
    {
      i.e(paramBrazeNotificationPayload, "payload");
      Object localObject = BrazeLogger.INSTANCE;
      BrazeLogger.brazelog$default((BrazeLogger)localObject, this, BrazeLogger.Priority.V, null, new j(paramBrazeNotificationPayload)
      {
        public final String invoke()
        {
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("Using BrazeNotificationPayload: ");
          localStringBuilder.append($payload);
          return localStringBuilder.toString();
        }
      }, 2, null);
      Context localContext = paramBrazeNotificationPayload.getContext();
      if (localContext == null)
      {
        BrazeLogger.brazelog$default((BrazeLogger)localObject, this, null, null, populateNotificationBuilder.2.INSTANCE, 3, null);
        return null;
      }
      BrazeConfigurationProvider localBrazeConfigurationProvider = paramBrazeNotificationPayload.getConfigurationProvider();
      if (localBrazeConfigurationProvider == null)
      {
        BrazeLogger.brazelog$default((BrazeLogger)localObject, this, null, null, populateNotificationBuilder.3.INSTANCE, 3, null);
        return null;
      }
      localObject = paramBrazeNotificationPayload.getNotificationExtras();
      BrazeNotificationUtils.prefetchBitmapsIfNewlyReceivedStoryPush(paramBrazeNotificationPayload);
      m.e localE = new m.e(localContext, BrazeNotificationUtils.getOrCreateNotificationChannelId(paramBrazeNotificationPayload)).m(true);
      i.d(localE, "Builder(context, notific?     .setAutoCancel(true)");
      BrazeNotificationUtils.setTitleIfPresent(localE, paramBrazeNotificationPayload);
      BrazeNotificationUtils.setContentIfPresent(localE, paramBrazeNotificationPayload);
      BrazeNotificationUtils.setTickerIfPresent(localE, paramBrazeNotificationPayload);
      BrazeNotificationUtils.setSetShowWhen(localE, paramBrazeNotificationPayload);
      BrazeNotificationUtils.setContentIntentIfPresent(localContext, localE, (Bundle)localObject);
      BrazeNotificationUtils.setDeleteIntent(localContext, localE, (Bundle)localObject);
      BrazeNotificationUtils.setSmallIcon(localBrazeConfigurationProvider, localE);
      BrazeNotificationUtils.setLargeIconIfPresentAndSupported(localE, paramBrazeNotificationPayload);
      BrazeNotificationUtils.setSoundIfPresentAndSupported(localE, paramBrazeNotificationPayload);
      BrazeNotificationUtils.setSummaryTextIfPresentAndSupported(localE, paramBrazeNotificationPayload);
      BrazeNotificationUtils.setPriorityIfPresentAndSupported(localE, paramBrazeNotificationPayload);
      BrazeNotificationStyleFactory.Companion.setStyleIfSupported(localE, paramBrazeNotificationPayload);
      BrazeNotificationActionUtils.addNotificationActions(localE, paramBrazeNotificationPayload);
      BrazeNotificationUtils.setAccentColorIfPresentAndSupported(localE, paramBrazeNotificationPayload);
      BrazeNotificationUtils.setCategoryIfPresentAndSupported(localE, paramBrazeNotificationPayload);
      BrazeNotificationUtils.setVisibilityIfPresentAndSupported(localE, paramBrazeNotificationPayload);
      BrazeNotificationUtils.setPublicVersionIfPresentAndSupported(localE, paramBrazeNotificationPayload);
      BrazeNotificationUtils.setNotificationBadgeNumberIfPresent(localE, paramBrazeNotificationPayload);
      return localE;
    }
  }
}
