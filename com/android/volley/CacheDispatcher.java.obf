package com.android.volley;

import android.os.Process;
import java.util.concurrent.BlockingQueue;

public class CacheDispatcher
  extends Thread
{
  private static final boolean DEBUG = VolleyLog.DEBUG;
  private final Cache mCache;
  private final BlockingQueue<Request<?>> mCacheQueue;
  private final ResponseDelivery mDelivery;
  private final BlockingQueue<Request<?>> mNetworkQueue;
  private volatile boolean mQuit = false;
  private final WaitingRequestManager mWaitingRequestManager;
  
  public CacheDispatcher(BlockingQueue<Request<?>> paramBlockingQueue1, BlockingQueue<Request<?>> paramBlockingQueue2, Cache paramCache, ResponseDelivery paramResponseDelivery)
  {
    mCacheQueue = paramBlockingQueue1;
    mNetworkQueue = paramBlockingQueue2;
    mCache = paramCache;
    mDelivery = paramResponseDelivery;
    mWaitingRequestManager = new WaitingRequestManager(this, paramBlockingQueue2, paramResponseDelivery);
  }
  
  private void processRequest()
    throws InterruptedException
  {
    processRequest((Request)mCacheQueue.take());
  }
  
  void processRequest(final Request<?> paramRequest)
    throws InterruptedException
  {
    paramRequest.addMarker("cache-queue-take");
    paramRequest.sendEvent(1);
    try
    {
      if (paramRequest.isCanceled())
      {
        paramRequest.finish("cache-discard-canceled");
        return;
      }
      Cache.Entry localEntry = mCache.get(paramRequest.getCacheKey());
      if (localEntry == null)
      {
        paramRequest.addMarker("cache-miss");
        if (!mWaitingRequestManager.maybeAddToWaitingRequests(paramRequest)) {
          mNetworkQueue.put(paramRequest);
        }
        return;
      }
      long l = System.currentTimeMillis();
      if (localEntry.isExpired(l))
      {
        paramRequest.addMarker("cache-hit-expired");
        paramRequest.setCacheEntry(localEntry);
        if (!mWaitingRequestManager.maybeAddToWaitingRequests(paramRequest)) {
          mNetworkQueue.put(paramRequest);
        }
        return;
      }
      paramRequest.addMarker("cache-hit");
      Response localResponse = paramRequest.parseNetworkResponse(new NetworkResponse(data, responseHeaders));
      paramRequest.addMarker("cache-hit-parsed");
      if (!localResponse.isSuccess())
      {
        paramRequest.addMarker("cache-parsing-failed");
        mCache.invalidate(paramRequest.getCacheKey(), true);
        paramRequest.setCacheEntry(null);
        if (!mWaitingRequestManager.maybeAddToWaitingRequests(paramRequest)) {
          mNetworkQueue.put(paramRequest);
        }
        return;
      }
      if (!localEntry.refreshNeeded(l))
      {
        mDelivery.postResponse(paramRequest, localResponse);
      }
      else
      {
        paramRequest.addMarker("cache-hit-refresh-needed");
        paramRequest.setCacheEntry(localEntry);
        intermediate = true;
        if (!mWaitingRequestManager.maybeAddToWaitingRequests(paramRequest)) {
          mDelivery.postResponse(paramRequest, localResponse, new Runnable()
          {
            public void run()
            {
              try
              {
                mNetworkQueue.put(paramRequest);
                return;
              }
              catch (InterruptedException localInterruptedException)
              {
                for (;;) {}
              }
              Thread.currentThread().interrupt();
            }
          });
        } else {
          mDelivery.postResponse(paramRequest, localResponse);
        }
      }
      return;
    }
    finally
    {
      paramRequest.sendEvent(2);
    }
  }
  
  public void quit()
  {
    mQuit = true;
    interrupt();
  }
  
  public void run()
  {
    if (DEBUG) {
      VolleyLog.v("start new dispatcher", new Object[0]);
    }
    Process.setThreadPriority(10);
    mCache.initialize();
    for (;;)
    {
      try
      {
        processRequest();
        continue;
      }
      catch (InterruptedException localInterruptedException)
      {
        continue;
      }
      if (mQuit)
      {
        Thread.currentThread().interrupt();
        return;
      }
      VolleyLog.e("Ignoring spurious interrupt of CacheDispatcher thread; use quit() to terminate it", new Object[0]);
    }
  }
}
