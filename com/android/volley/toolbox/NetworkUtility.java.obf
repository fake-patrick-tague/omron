package com.android.volley.toolbox;

import android.os.SystemClock;
import com.android.volley.AuthFailureError;
import com.android.volley.Cache.Entry;
import com.android.volley.ClientError;
import com.android.volley.Header;
import com.android.volley.NetworkError;
import com.android.volley.NetworkResponse;
import com.android.volley.NoConnectionError;
import com.android.volley.Request;
import com.android.volley.RetryPolicy;
import com.android.volley.ServerError;
import com.android.volley.TimeoutError;
import com.android.volley.VolleyError;
import com.android.volley.VolleyLog;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.SocketTimeoutException;
import java.util.List;

final class NetworkUtility
{
  private static final int SLOW_REQUEST_THRESHOLD_MS = 3000;
  
  private NetworkUtility() {}
  
  static void attemptRetryOnException(Request<?> paramRequest, RetryInfo paramRetryInfo)
    throws VolleyError
  {
    RetryPolicy localRetryPolicy = paramRequest.getRetryPolicy();
    int i = paramRequest.getTimeoutMs();
    try
    {
      localRetryPolicy.retry(errorToRetry);
      paramRequest.addMarker(String.format("%s-retry [timeout=%s]", new Object[] { logPrefix, Integer.valueOf(i) }));
      return;
    }
    catch (VolleyError localVolleyError)
    {
      paramRequest.addMarker(String.format("%s-timeout-giveup [timeout=%s]", new Object[] { logPrefix, Integer.valueOf(i) }));
      throw localVolleyError;
    }
  }
  
  static NetworkResponse getNotModifiedNetworkResponse(Request<?> paramRequest, long paramLong, List<Header> paramList)
  {
    paramRequest = paramRequest.getCacheEntry();
    if (paramRequest == null) {
      return new NetworkResponse(304, null, true, paramLong, paramList);
    }
    paramList = HttpHeaderParser.combineHeaders(paramList, paramRequest);
    return new NetworkResponse(304, data, true, paramLong, paramList);
  }
  
  /* Error */
  static byte[] inputStreamToBytes(java.io.InputStream paramInputStream, int paramInt, ByteArrayPool paramByteArrayPool)
    throws IOException
  {
    // Byte code:
    //   0: new 98	com/android/volley/toolbox/PoolingByteArrayOutputStream
    //   3: dup
    //   4: aload_2
    //   5: iload_1
    //   6: invokespecial 101	com/android/volley/toolbox/PoolingByteArrayOutputStream:<init>	(Lcom/android/volley/toolbox/ByteArrayPool;I)V
    //   9: astore 5
    //   11: aload_2
    //   12: sipush 1024
    //   15: invokevirtual 107	com/android/volley/toolbox/ByteArrayPool:getBuf	(I)[B
    //   18: astore 4
    //   20: aload_0
    //   21: aload 4
    //   23: invokevirtual 113	java/io/InputStream:read	([B)I
    //   26: istore_1
    //   27: iload_1
    //   28: iconst_m1
    //   29: if_icmpeq +15 -> 44
    //   32: aload 5
    //   34: aload 4
    //   36: iconst_0
    //   37: iload_1
    //   38: invokevirtual 117	com/android/volley/toolbox/PoolingByteArrayOutputStream:write	([BII)V
    //   41: goto -21 -> 20
    //   44: aload 5
    //   46: invokevirtual 123	java/io/ByteArrayOutputStream:toByteArray	()[B
    //   49: astore_3
    //   50: aload_0
    //   51: invokevirtual 126	java/io/InputStream:close	()V
    //   54: goto +12 -> 66
    //   57: ldc -128
    //   59: iconst_0
    //   60: anewarray 4	java/lang/Object
    //   63: invokestatic 134	com/android/volley/VolleyLog:v	(Ljava/lang/String;[Ljava/lang/Object;)V
    //   66: aload_2
    //   67: aload 4
    //   69: invokevirtual 138	com/android/volley/toolbox/ByteArrayPool:returnBuf	([B)V
    //   72: aload 5
    //   74: invokevirtual 139	com/android/volley/toolbox/PoolingByteArrayOutputStream:close	()V
    //   77: aload_3
    //   78: areturn
    //   79: astore_3
    //   80: goto +7 -> 87
    //   83: astore_3
    //   84: aconst_null
    //   85: astore 4
    //   87: aload_0
    //   88: ifnull +19 -> 107
    //   91: aload_0
    //   92: invokevirtual 126	java/io/InputStream:close	()V
    //   95: goto +12 -> 107
    //   98: ldc -128
    //   100: iconst_0
    //   101: anewarray 4	java/lang/Object
    //   104: invokestatic 134	com/android/volley/VolleyLog:v	(Ljava/lang/String;[Ljava/lang/Object;)V
    //   107: aload_2
    //   108: aload 4
    //   110: invokevirtual 138	com/android/volley/toolbox/ByteArrayPool:returnBuf	([B)V
    //   113: aload 5
    //   115: invokevirtual 139	com/android/volley/toolbox/PoolingByteArrayOutputStream:close	()V
    //   118: aload_3
    //   119: athrow
    //   120: astore_0
    //   121: goto -64 -> 57
    //   124: astore_0
    //   125: goto -27 -> 98
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	128	0	paramInputStream	java.io.InputStream
    //   0	128	1	paramInt	int
    //   0	128	2	paramByteArrayPool	ByteArrayPool
    //   49	29	3	arrayOfByte1	byte[]
    //   79	1	3	localObject1	Object
    //   83	36	3	localObject2	Object
    //   18	91	4	arrayOfByte2	byte[]
    //   9	105	5	localPoolingByteArrayOutputStream	PoolingByteArrayOutputStream
    // Exception table:
    //   from	to	target	type
    //   20	27	79	finally
    //   32	41	79	finally
    //   44	50	79	finally
    //   11	20	83	finally
    //   50	54	120	java/io/IOException
    //   91	95	124	java/io/IOException
  }
  
  static void logSlowRequests(long paramLong, Request<?> paramRequest, byte[] paramArrayOfByte, int paramInt)
  {
    if ((VolleyLog.DEBUG) || (paramLong > 3000L))
    {
      if (paramArrayOfByte != null) {
        paramArrayOfByte = Integer.valueOf(paramArrayOfByte.length);
      } else {
        paramArrayOfByte = "null";
      }
      VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], [rc=%d], [retryCount=%s]", new Object[] { paramRequest, Long.valueOf(paramLong), paramArrayOfByte, Integer.valueOf(paramInt), Integer.valueOf(paramRequest.getRetryPolicy().getCurrentRetryCount()) });
    }
  }
  
  static RetryInfo shouldRetryException(Request<?> paramRequest, IOException paramIOException, long paramLong, HttpResponse paramHttpResponse, byte[] paramArrayOfByte)
    throws VolleyError
  {
    if ((paramIOException instanceof SocketTimeoutException)) {
      return new RetryInfo("socket", new TimeoutError(), null);
    }
    if (!(paramIOException instanceof MalformedURLException))
    {
      if (paramHttpResponse != null)
      {
        int i = paramHttpResponse.getStatusCode();
        VolleyLog.e("Unexpected response code %d for %s", new Object[] { Integer.valueOf(i), paramRequest.getUrl() });
        if (paramArrayOfByte != null)
        {
          paramIOException = paramHttpResponse.getHeaders();
          paramIOException = new NetworkResponse(i, paramArrayOfByte, false, SystemClock.elapsedRealtime() - paramLong, paramIOException);
          if ((i != 401) && (i != 403))
          {
            if ((i >= 400) && (i <= 499)) {
              throw new ClientError(paramIOException);
            }
            if ((i >= 500) && (i <= 599) && (paramRequest.shouldRetryServerErrors())) {
              return new RetryInfo("server", new ServerError(paramIOException), null);
            }
            throw new ServerError(paramIOException);
          }
          return new RetryInfo("auth", new AuthFailureError(paramIOException), null);
        }
        return new RetryInfo("network", new NetworkError(), null);
      }
      if (paramRequest.shouldRetryConnectionErrors()) {
        return new RetryInfo("connection", new NoConnectionError(), null);
      }
      throw new NoConnectionError(paramIOException);
    }
    paramHttpResponse = new StringBuilder();
    paramHttpResponse.append("Bad URL ");
    paramHttpResponse.append(paramRequest.getUrl());
    throw new RuntimeException(paramHttpResponse.toString(), paramIOException);
  }
  
  static class RetryInfo
  {
    private final VolleyError errorToRetry;
    private final String logPrefix;
    
    private RetryInfo(String paramString, VolleyError paramVolleyError)
    {
      logPrefix = paramString;
      errorToRetry = paramVolleyError;
    }
  }
}
