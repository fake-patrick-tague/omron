package com.android.volley.toolbox;

import com.android.volley.Cache.Entry;
import com.android.volley.Header;
import com.android.volley.NetworkResponse;
import com.android.volley.VolleyLog;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;

public class HttpHeaderParser
{
  private static final String DEFAULT_CONTENT_CHARSET = "ISO-8859-1";
  public static final String HEADER_CONTENT_TYPE = "Content-Type";
  private static final String RFC1123_OUTPUT_FORMAT = "EEE, dd MMM yyyy HH:mm:ss 'GMT'";
  private static final String RFC1123_PARSE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss zzz";
  
  public HttpHeaderParser() {}
  
  static List<Header> combineHeaders(List<Header> paramList, Cache.Entry paramEntry)
  {
    TreeSet localTreeSet = new TreeSet(String.CASE_INSENSITIVE_ORDER);
    if (!paramList.isEmpty())
    {
      localObject = paramList.iterator();
      while (((Iterator)localObject).hasNext()) {
        localTreeSet.add(((Header)((Iterator)localObject).next()).getName());
      }
    }
    paramList = new ArrayList(paramList);
    Object localObject = allResponseHeaders;
    if (localObject != null)
    {
      if (!((List)localObject).isEmpty())
      {
        paramEntry = allResponseHeaders.iterator();
        while (paramEntry.hasNext())
        {
          localObject = (Header)paramEntry.next();
          if (!localTreeSet.contains(((Header)localObject).getName())) {
            paramList.add(localObject);
          }
        }
      }
    }
    else if (!responseHeaders.isEmpty())
    {
      paramEntry = responseHeaders.entrySet().iterator();
      while (paramEntry.hasNext())
      {
        localObject = (Map.Entry)paramEntry.next();
        if (!localTreeSet.contains(((Map.Entry)localObject).getKey())) {
          paramList.add(new Header((String)((Map.Entry)localObject).getKey(), (String)((Map.Entry)localObject).getValue()));
        }
      }
    }
    return paramList;
  }
  
  static String formatEpochAsRfc1123(long paramLong)
  {
    return newUsGmtFormatter("EEE, dd MMM yyyy HH:mm:ss 'GMT'").format(new Date(paramLong));
  }
  
  static Map<String, String> getCacheHeaders(Cache.Entry paramEntry)
  {
    if (paramEntry == null) {
      return Collections.emptyMap();
    }
    HashMap localHashMap = new HashMap();
    String str = etag;
    if (str != null) {
      localHashMap.put("If-None-Match", str);
    }
    long l = lastModified;
    if (l > 0L) {
      localHashMap.put("If-Modified-Since", formatEpochAsRfc1123(l));
    }
    return localHashMap;
  }
  
  private static SimpleDateFormat newUsGmtFormatter(String paramString)
  {
    paramString = new SimpleDateFormat(paramString, Locale.US);
    paramString.setTimeZone(TimeZone.getTimeZone("GMT"));
    return paramString;
  }
  
  public static Cache.Entry parseCacheHeaders(NetworkResponse paramNetworkResponse)
  {
    long l6 = System.currentTimeMillis();
    Map localMap = headers;
    if (localMap == null) {
      return null;
    }
    Object localObject1 = (String)localMap.get("Date");
    long l3;
    if (localObject1 != null) {
      l3 = parseDateAsEpoch((String)localObject1);
    } else {
      l3 = 0L;
    }
    localObject1 = (String)localMap.get("Cache-Control");
    int i = 0;
    int j = 0;
    if (localObject1 != null)
    {
      localObject1 = ((String)localObject1).split(",", 0);
      i = 0;
      l2 = 0L;
      l1 = 0L;
      while (j < localObject1.length)
      {
        localObject2 = localObject1[j].trim();
        if (!((String)localObject2).equals("no-cache"))
        {
          if (((String)localObject2).equals("no-store")) {
            return null;
          }
          if (!((String)localObject2).startsWith("max-age=")) {}
        }
        try
        {
          l4 = Long.parseLong(((String)localObject2).substring(8));
          l5 = l1;
        }
        catch (Exception localException)
        {
          for (;;)
          {
            long l4 = l2;
            long l5 = l1;
          }
        }
        if (((String)localObject2).startsWith("stale-while-revalidate="))
        {
          l5 = Long.parseLong(((String)localObject2).substring(23));
          l4 = l2;
        }
        else if (!((String)localObject2).equals("must-revalidate"))
        {
          l4 = l2;
          l5 = l1;
          if (!((String)localObject2).equals("proxy-revalidate")) {}
        }
        else
        {
          i = 1;
          l5 = l1;
          l4 = l2;
        }
        j += 1;
        l2 = l4;
        l1 = l5;
        continue;
        return null;
      }
      j = 1;
    }
    else
    {
      j = 0;
      l2 = 0L;
      l1 = 0L;
    }
    localObject1 = (String)localMap.get("Expires");
    if (localObject1 != null) {
      l5 = parseDateAsEpoch((String)localObject1);
    } else {
      l5 = 0L;
    }
    localObject1 = (String)localMap.get("Last-Modified");
    if (localObject1 != null) {
      l4 = parseDateAsEpoch((String)localObject1);
    } else {
      l4 = 0L;
    }
    localObject1 = (String)localMap.get("ETag");
    if (j != 0)
    {
      l2 = l6 + l2 * 1000L;
      if (i != 0)
      {
        l1 = l2;
      }
      else
      {
        Long.signum(l1);
        l1 = l1 * 1000L + l2;
      }
      l5 = l1;
      l1 = l2;
      l2 = l5;
    }
    else
    {
      l2 = 0L;
      if ((l3 > 0L) && (l5 >= l3))
      {
        l1 = l6 + (l5 - l3);
        l2 = l1;
      }
      else
      {
        l1 = 0L;
      }
    }
    Object localObject2 = new Cache.Entry();
    data = data;
    etag = ((String)localObject1);
    softTtl = l1;
    ttl = l2;
    serverDate = l3;
    lastModified = l4;
    responseHeaders = localMap;
    allResponseHeaders = allHeaders;
    return localObject2;
  }
  
  public static String parseCharset(Map<String, String> paramMap)
  {
    return parseCharset(paramMap, "ISO-8859-1");
  }
  
  public static String parseCharset(Map<String, String> paramMap, String paramString)
  {
    if (paramMap == null) {
      return paramString;
    }
    paramMap = (String)paramMap.get("Content-Type");
    if (paramMap != null)
    {
      paramMap = paramMap.split(";", 0);
      int i = 1;
      while (i < paramMap.length)
      {
        String[] arrayOfString = paramMap[i].trim().split("=", 0);
        if ((arrayOfString.length == 2) && (arrayOfString[0].equals("charset"))) {
          return arrayOfString[1];
        }
        i += 1;
      }
    }
    return paramString;
  }
  
  public static long parseDateAsEpoch(String paramString)
  {
    try
    {
      long l = newUsGmtFormatter("EEE, dd MMM yyyy HH:mm:ss zzz").parse(paramString).getTime();
      return l;
    }
    catch (ParseException localParseException)
    {
      if ((!"0".equals(paramString)) && (!"-1".equals(paramString))) {
        VolleyLog.e(localParseException, "Unable to parse dateStr: %s, falling back to 0", new Object[] { paramString });
      } else {
        VolleyLog.v("Unable to parse dateStr: %s, falling back to 0", new Object[] { paramString });
      }
    }
    return 0L;
  }
  
  static List<Header> toAllHeaderList(Map<String, String> paramMap)
  {
    ArrayList localArrayList = new ArrayList(paramMap.size());
    paramMap = paramMap.entrySet().iterator();
    while (paramMap.hasNext())
    {
      Map.Entry localEntry = (Map.Entry)paramMap.next();
      localArrayList.add(new Header((String)localEntry.getKey(), (String)localEntry.getValue()));
    }
    return localArrayList;
  }
  
  static Map<String, String> toHeaderMap(List<Header> paramList)
  {
    TreeMap localTreeMap = new TreeMap(String.CASE_INSENSITIVE_ORDER);
    paramList = paramList.iterator();
    while (paramList.hasNext())
    {
      Header localHeader = (Header)paramList.next();
      localTreeMap.put(localHeader.getName(), localHeader.getValue());
    }
    return localTreeMap;
  }
}
