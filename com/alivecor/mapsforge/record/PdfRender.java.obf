package com.alivecor.ecg.record;

import a.b.c0;
import a.b.e;
import a.b.g0;
import a.b.j0;
import a.b.m;
import android.content.Context;
import android.content.res.Resources;
import android.text.TextUtils;
import com.alivecor.alivecorkitlite.R.string;
import com.alivecor.ecg.core.EcgFile;
import com.alivecor.ecg.core.EcgFile.AliveFileFormat;
import com.alivecor.ecg.core.EcgFile.Lead;
import com.alivecor.ecg.core.model.MainsFilterFrequency;
import com.alivecor.ecg.core.model.YAxisScaleTypes;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import k.a.a.b;

public final class PdfRender
{
  static final float MM_TO_POINTS = 2.8346457F;
  public static final String NEW_LINE = System.getProperty("line.separator");
  static final float STRIPHEIGHT_MM = 60.0F;
  static final int STRIPS_PER_SINGLE_LEAD_PAGE = 4;
  static final float STRIPWIDTH_MM = 200.0F;
  static final String TAG = "PdfRender";
  private short[] ecgBuf1;
  private short[] ecgBuf2;
  private short[] ecgBuf3;
  private short[] ecgBuf4;
  private short[] ecgBuf5;
  private short[] ecgBuf6;
  private final boolean embedFonts;
  private boolean isPreviewPDF;
  boolean isSingleLead;
  private int[] mAnnArray;
  String mAppName;
  String mAppVersion;
  int mCalpulseOffsetSamples;
  float mCalpulseOffset_mm;
  final Context mContext;
  private com.alivecor.ecg.core.a.a mDateTimeFormatter;
  float mDetailsHeight;
  EcgFile mEcgFile;
  float mEcgTopMargin;
  c0 mFallbackFont;
  c0 mFallbackFontSmall;
  c0 mFontBold;
  c0 mFontNormal;
  c0 mFontSmall;
  float mFooterHeight;
  int mGainPercent = 100;
  final boolean mIsMuscleFilter;
  final boolean mIsTestMode;
  m mLogoImage = null;
  final File mOutFile;
  float mPageLeftMargin;
  float mPageTopMargin;
  g0 mPdf = null;
  int mSampleCount;
  int mSamplesPerStrip;
  int mSpeedPercent = 100;
  int mTotalEcgSamples;
  int mTotalPages;
  final PdfData pdfData;
  private int yAxisScale;
  
  PdfRender(Context paramContext, File paramFile, PdfData paramPdfData, boolean paramBoolean1, boolean paramBoolean2)
  {
    boolean bool = false;
    mSampleCount = 0;
    mContext = paramContext.getApplicationContext();
    mOutFile = paramFile;
    pdfData = paramPdfData;
    mDateTimeFormatter = com.alivecor.ecg.core.a.a.a("EEEE, MMM dd yyyy, h:mm:ss a");
    embedFonts = paramBoolean2;
    mIsTestMode = false;
    mIsMuscleFilter = true;
    if (!paramBoolean1) {
      l.a.a.b("Can't disable muscle filter unless in test mode", new Object[0]);
    }
    paramBoolean1 = bool;
    if (isReportRawPDF == ReportRawPDFType.RAW) {
      paramBoolean1 = true;
    }
    isPreviewPDF = paramBoolean1;
    yAxisScale = YAxisScaleTypes.getYAxisScale(yAxisScaleTypes);
  }
  
  private String getDurationString(Resources paramResources)
  {
    return Util.formatDurationString(paramResources, pdfData.recordingDurationMillis);
  }
  
  private String getHeartRateString()
  {
    return Util.formatHeartRateString(pdfData.recordedHr);
  }
  
  private String getPatientAgeString(Resources paramResources)
  {
    return Util.patientAgeString(paramResources, pdfData.recordingDate.y(), pdfData.patientData.dob);
  }
  
  private String getPatientDOBString()
  {
    return Util.getDOBString(pdfData.patientData.dob);
  }
  
  /* Error */
  private void initFonts()
    throws Exception
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 121	com/alivecor/ecg/record/PdfRender:embedFonts	Z
    //   4: ifeq +316 -> 320
    //   7: aload_0
    //   8: getfield 105	com/alivecor/ecg/record/PdfRender:mContext	Landroid/content/Context;
    //   11: invokevirtual 215	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   14: ldc -39
    //   16: invokevirtual 223	android/content/res/AssetManager:open	(Ljava/lang/String;)Ljava/io/InputStream;
    //   19: astore_2
    //   20: aload_0
    //   21: new 225	a/b/c0
    //   24: dup
    //   25: aload_0
    //   26: getfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   29: aload_2
    //   30: iconst_1
    //   31: invokespecial 228	a/b/c0:<init>	(La/b/g0;Ljava/io/InputStream;Z)V
    //   34: putfield 230	com/alivecor/ecg/record/PdfRender:mFontNormal	La/b/c0;
    //   37: aload_2
    //   38: ifnull +7 -> 45
    //   41: aload_2
    //   42: invokevirtual 235	java/io/InputStream:close	()V
    //   45: aload_0
    //   46: getfield 105	com/alivecor/ecg/record/PdfRender:mContext	Landroid/content/Context;
    //   49: invokevirtual 215	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   52: ldc -39
    //   54: invokevirtual 223	android/content/res/AssetManager:open	(Ljava/lang/String;)Ljava/io/InputStream;
    //   57: astore_2
    //   58: aload_0
    //   59: new 225	a/b/c0
    //   62: dup
    //   63: aload_0
    //   64: getfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   67: aload_2
    //   68: iconst_1
    //   69: invokespecial 228	a/b/c0:<init>	(La/b/g0;Ljava/io/InputStream;Z)V
    //   72: putfield 237	com/alivecor/ecg/record/PdfRender:mFontSmall	La/b/c0;
    //   75: aload_2
    //   76: ifnull +7 -> 83
    //   79: aload_2
    //   80: invokevirtual 235	java/io/InputStream:close	()V
    //   83: aload_0
    //   84: getfield 105	com/alivecor/ecg/record/PdfRender:mContext	Landroid/content/Context;
    //   87: invokevirtual 215	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   90: ldc -17
    //   92: invokevirtual 223	android/content/res/AssetManager:open	(Ljava/lang/String;)Ljava/io/InputStream;
    //   95: astore_2
    //   96: aload_0
    //   97: new 225	a/b/c0
    //   100: dup
    //   101: aload_0
    //   102: getfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   105: aload_2
    //   106: iconst_1
    //   107: invokespecial 228	a/b/c0:<init>	(La/b/g0;Ljava/io/InputStream;Z)V
    //   110: putfield 241	com/alivecor/ecg/record/PdfRender:mFontBold	La/b/c0;
    //   113: aload_2
    //   114: ifnull +7 -> 121
    //   117: aload_2
    //   118: invokevirtual 235	java/io/InputStream:close	()V
    //   121: aload_0
    //   122: getfield 105	com/alivecor/ecg/record/PdfRender:mContext	Landroid/content/Context;
    //   125: invokevirtual 215	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   128: ldc -13
    //   130: invokevirtual 223	android/content/res/AssetManager:open	(Ljava/lang/String;)Ljava/io/InputStream;
    //   133: astore_2
    //   134: aload_0
    //   135: new 225	a/b/c0
    //   138: dup
    //   139: aload_0
    //   140: getfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   143: aload_2
    //   144: iconst_1
    //   145: invokespecial 228	a/b/c0:<init>	(La/b/g0;Ljava/io/InputStream;Z)V
    //   148: putfield 245	com/alivecor/ecg/record/PdfRender:mFallbackFont	La/b/c0;
    //   151: aload_2
    //   152: ifnull +7 -> 159
    //   155: aload_2
    //   156: invokevirtual 235	java/io/InputStream:close	()V
    //   159: aload_0
    //   160: getfield 105	com/alivecor/ecg/record/PdfRender:mContext	Landroid/content/Context;
    //   163: invokevirtual 215	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   166: ldc -13
    //   168: invokevirtual 223	android/content/res/AssetManager:open	(Ljava/lang/String;)Ljava/io/InputStream;
    //   171: astore_2
    //   172: aload_0
    //   173: new 225	a/b/c0
    //   176: dup
    //   177: aload_0
    //   178: getfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   181: aload_2
    //   182: iconst_1
    //   183: invokespecial 228	a/b/c0:<init>	(La/b/g0;Ljava/io/InputStream;Z)V
    //   186: putfield 247	com/alivecor/ecg/record/PdfRender:mFallbackFontSmall	La/b/c0;
    //   189: aload_2
    //   190: ifnull +7 -> 197
    //   193: aload_2
    //   194: invokevirtual 235	java/io/InputStream:close	()V
    //   197: aload_0
    //   198: getfield 245	com/alivecor/ecg/record/PdfRender:mFallbackFont	La/b/c0;
    //   201: ldc -8
    //   203: invokevirtual 252	a/b/c0:d	(F)La/b/c0;
    //   206: pop
    //   207: aload_0
    //   208: getfield 247	com/alivecor/ecg/record/PdfRender:mFallbackFontSmall	La/b/c0;
    //   211: ldc -3
    //   213: invokevirtual 252	a/b/c0:d	(F)La/b/c0;
    //   216: pop
    //   217: goto +159 -> 376
    //   220: astore_1
    //   221: aload_2
    //   222: ifnull +16 -> 238
    //   225: aload_2
    //   226: invokevirtual 235	java/io/InputStream:close	()V
    //   229: goto +9 -> 238
    //   232: astore_2
    //   233: aload_1
    //   234: aload_2
    //   235: invokevirtual 259	java/lang/Throwable:addSuppressed	(Ljava/lang/Throwable;)V
    //   238: aload_1
    //   239: athrow
    //   240: astore_1
    //   241: aload_2
    //   242: ifnull +16 -> 258
    //   245: aload_2
    //   246: invokevirtual 235	java/io/InputStream:close	()V
    //   249: goto +9 -> 258
    //   252: astore_2
    //   253: aload_1
    //   254: aload_2
    //   255: invokevirtual 259	java/lang/Throwable:addSuppressed	(Ljava/lang/Throwable;)V
    //   258: aload_1
    //   259: athrow
    //   260: astore_1
    //   261: aload_2
    //   262: ifnull +16 -> 278
    //   265: aload_2
    //   266: invokevirtual 235	java/io/InputStream:close	()V
    //   269: goto +9 -> 278
    //   272: astore_2
    //   273: aload_1
    //   274: aload_2
    //   275: invokevirtual 259	java/lang/Throwable:addSuppressed	(Ljava/lang/Throwable;)V
    //   278: aload_1
    //   279: athrow
    //   280: astore_1
    //   281: aload_2
    //   282: ifnull +16 -> 298
    //   285: aload_2
    //   286: invokevirtual 235	java/io/InputStream:close	()V
    //   289: goto +9 -> 298
    //   292: astore_2
    //   293: aload_1
    //   294: aload_2
    //   295: invokevirtual 259	java/lang/Throwable:addSuppressed	(Ljava/lang/Throwable;)V
    //   298: aload_1
    //   299: athrow
    //   300: astore_1
    //   301: aload_2
    //   302: ifnull +16 -> 318
    //   305: aload_2
    //   306: invokevirtual 235	java/io/InputStream:close	()V
    //   309: goto +9 -> 318
    //   312: astore_2
    //   313: aload_1
    //   314: aload_2
    //   315: invokevirtual 259	java/lang/Throwable:addSuppressed	(Ljava/lang/Throwable;)V
    //   318: aload_1
    //   319: athrow
    //   320: aload_0
    //   321: getfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   324: astore_1
    //   325: getstatic 265	a/b/z:f	La/b/z;
    //   328: astore_2
    //   329: aload_0
    //   330: new 225	a/b/c0
    //   333: dup
    //   334: aload_1
    //   335: aload_2
    //   336: invokespecial 268	a/b/c0:<init>	(La/b/g0;La/b/z;)V
    //   339: putfield 230	com/alivecor/ecg/record/PdfRender:mFontNormal	La/b/c0;
    //   342: aload_0
    //   343: new 225	a/b/c0
    //   346: dup
    //   347: aload_0
    //   348: getfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   351: aload_2
    //   352: invokespecial 268	a/b/c0:<init>	(La/b/g0;La/b/z;)V
    //   355: putfield 237	com/alivecor/ecg/record/PdfRender:mFontSmall	La/b/c0;
    //   358: aload_0
    //   359: new 225	a/b/c0
    //   362: dup
    //   363: aload_0
    //   364: getfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   367: getstatic 271	a/b/z:g	La/b/z;
    //   370: invokespecial 268	a/b/c0:<init>	(La/b/g0;La/b/z;)V
    //   373: putfield 241	com/alivecor/ecg/record/PdfRender:mFontBold	La/b/c0;
    //   376: aload_0
    //   377: getfield 230	com/alivecor/ecg/record/PdfRender:mFontNormal	La/b/c0;
    //   380: ldc -8
    //   382: invokevirtual 252	a/b/c0:d	(F)La/b/c0;
    //   385: pop
    //   386: aload_0
    //   387: getfield 237	com/alivecor/ecg/record/PdfRender:mFontSmall	La/b/c0;
    //   390: ldc -3
    //   392: invokevirtual 252	a/b/c0:d	(F)La/b/c0;
    //   395: pop
    //   396: aload_0
    //   397: getfield 241	com/alivecor/ecg/record/PdfRender:mFontBold	La/b/c0;
    //   400: ldc -8
    //   402: invokevirtual 252	a/b/c0:d	(F)La/b/c0;
    //   405: pop
    //   406: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	407	0	this	PdfRender
    //   220	19	1	localObject1	Object
    //   240	19	1	localObject2	Object
    //   260	19	1	localObject3	Object
    //   280	19	1	localObject4	Object
    //   300	19	1	localObject5	Object
    //   324	11	1	localG0	g0
    //   19	207	2	localInputStream	java.io.InputStream
    //   232	14	2	localThrowable1	Throwable
    //   252	14	2	localThrowable2	Throwable
    //   272	14	2	localThrowable3	Throwable
    //   292	14	2	localThrowable4	Throwable
    //   312	3	2	localThrowable5	Throwable
    //   328	24	2	localZ	a.b.z
    // Exception table:
    //   from	to	target	type
    //   172	189	220	finally
    //   225	229	232	finally
    //   134	151	240	finally
    //   245	249	252	finally
    //   96	113	260	finally
    //   265	269	272	finally
    //   58	75	280	finally
    //   285	289	292	finally
    //   20	37	300	finally
    //   305	309	312	finally
  }
  
  private void printCalPulse(j0 paramJ0, float paramFloat)
    throws Exception
  {
    paramJ0.N();
    paramJ0.c(0.8D);
    paramJ0.H(0);
    paramJ0.C(1);
    paramJ0.F(1);
    float f2 = mSpeedPercent * 5 / 100.0F;
    float f4 = mGainPercent * 10 / 100.0F;
    double d1 = mPageLeftMargin;
    float f1 = 85.039375F + paramFloat;
    double d2 = f1;
    paramJ0.s(d1 + 7.086614370346069D, d2);
    paramJ0.t(mPageLeftMargin + 14.173229F, f1);
    float f3 = mPageLeftMargin;
    paramFloat += (30.0F - f4) * 2.8346457F;
    paramJ0.t(f3 + 14.173229F, paramFloat);
    f3 = mPageLeftMargin;
    f2 += 5.0F;
    f4 = 2.8346457F * f2;
    paramJ0.t(f3 + f4, paramFloat);
    paramJ0.t(mPageLeftMargin + f4, f1);
    paramJ0.d(mPageLeftMargin + (f2 + 2.5D) * 2.8346457481384277D, d2);
    paramJ0.O();
  }
  
  private void printEcg(j0 paramJ0, int paramInt)
    throws Exception
  {
    paramJ0.v(mPageLeftMargin, mEcgTopMargin, 566.92914F, 680.315F);
    paramJ0.c(0.45D);
    float f1 = mGainPercent / 100.0F;
    int m = 1077242582;
    float f2 = f1 * 2.8346457F * 10.0F / 2000.0F;
    f1 = f2;
    if (pdfData.isInverted) {
      f1 = -f2;
    }
    int n = mSampleCount;
    int i1 = 0;
    int i = 0;
    int i2;
    int k;
    int j;
    for (;;)
    {
      i2 = mSampleCount;
      int i3 = mTotalEcgSamples;
      if ((i2 >= i3) || (i >= 4)) {
        break;
      }
      k = mSamplesPerStrip;
      if ((paramInt == 1) && (i == 0)) {
        j = mCalpulseOffsetSamples;
      } else {
        j = 0;
      }
      k -= j;
      j = k;
      if (i2 + k > i3) {
        j = i3 - i2;
      }
      k = 0;
      while (k < j)
      {
        localObject = ecgBuf1;
        i2 = mSampleCount;
        float f3 = localObject[i2];
        i3 = mCalpulseOffsetSamples;
        int i4 = mSamplesPerStrip;
        f2 = mPageLeftMargin + (i2 + i3) % i4 * 200.0F / i4 * 2.8346457F;
        f3 = mEcgTopMargin + (i * 60 + 30) * 2.8346457F - f3 * f1;
        if (k == 0) {
          paramJ0.A(f2, f3);
        } else {
          paramJ0.t(f2, f3);
        }
        mSampleCount += 1;
        k += 1;
      }
      paramJ0.O();
      i += 1;
    }
    Object localObject = mAnnArray;
    if ((localObject != null) && (localObject.length > 0))
    {
      paramJ0.c(1.2D);
      localObject = mAnnArray;
      k = localObject.length;
      j = i1;
      i = n;
      paramInt = m;
      while (j < k)
      {
        m = localObject[j];
        if (m > mSampleCount) {
          break;
        }
        n = mCalpulseOffsetSamples + m;
        i1 = mSamplesPerStrip;
        i2 = n / i1;
        if (m > i)
        {
          double d2 = mPageLeftMargin;
          double d1 = n % i1 * 200.0D;
          double d3 = d1 / i1;
          f1 = mEcgTopMargin;
          paramInt = (i2 % 4 + 1) * 60;
          paramJ0.s(d2 + d3 * 2.8346457481384277D, f1 + paramInt * 2.8346457F);
          d2 = mPageLeftMargin;
          d1 /= mSamplesPerStrip;
          f1 = mEcgTopMargin;
          f2 = paramInt - 2;
          paramInt = 1077242582;
          paramJ0.d(d2 + d1 * 2.8346457481384277D, f1 + f2 * 2.8346457F);
        }
        j += 1;
      }
      paramJ0.O();
    }
  }
  
  private int printEcgLead(j0 paramJ0, int paramInt1, int paramInt2, int paramInt3, String paramString, short[] paramArrayOfShort, float paramFloat)
    throws Exception
  {
    paramJ0.c(0.45D);
    float f1 = mGainPercent / 100.0F * 2.8346457F * 10.0F / 2000.0F;
    e localE = new e(mFontBold);
    localE.e(paramString);
    float f2 = mPageLeftMargin;
    float f3 = paramFloat + 70.86614F;
    localE.b(f2 + 34.015747F, f3);
    localE.d(mPageLeftMargin + 34.015747F, f3);
    localE.c(paramJ0);
    int k = mSamplesPerStrip;
    if (paramInt1 == 1) {
      paramInt1 = paramInt3;
    } else {
      paramInt1 = 0;
    }
    int i = 0;
    int j = i;
    while (i < k - paramInt1)
    {
      int m = paramInt2 + i;
      if (m >= paramArrayOfShort.length)
      {
        l.a.a.g("Didn't have sample at index %d", new Object[] { Integer.valueOf(m) });
        break;
      }
      f3 = paramArrayOfShort[m];
      m = mSamplesPerStrip;
      f2 = mPageLeftMargin + (j + paramInt3) % m * 200.0F / m * 2.8346457F;
      f3 = paramFloat + 85.039375F - f3 * f1;
      if (i == 0) {
        paramJ0.A(f2, f3);
      } else {
        paramJ0.t(f2, f3);
      }
      j += 1;
      i += 1;
    }
    paramJ0.O();
    return j;
  }
  
  private void printFooter(j0 paramJ0, int paramInt)
    throws Exception
  {
    e localE = new e(mFontSmall);
    localE.a(mFallbackFontSmall);
    StringBuilder localStringBuilder;
    float f1;
    float f2;
    if (pdfData.recordingDurationMillis / 1000L > 30L)
    {
      localE.e(mContext.getString(R.string.kai_30_seconds_disclaimer_pdf));
      localE.d(mPageLeftMargin, mEcgTopMargin + 680.315F + localE.f());
      localE.c(paramJ0);
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("(c) Copyright 2013, AliveCor Inc. ");
      localStringBuilder.append(mAppName);
      localStringBuilder.append(" ");
      localStringBuilder.append(mAppVersion);
      localStringBuilder.append(", UUID: ");
      localStringBuilder.append(pdfData.recordingUuid);
      localE.e(localStringBuilder.toString());
      f1 = mPageLeftMargin;
      f2 = mEcgTopMargin + 691.65356F;
    }
    else
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("(c) Copyright 2013, AliveCor Inc. ");
      localStringBuilder.append(mAppName);
      localStringBuilder.append(" ");
      localStringBuilder.append(mAppVersion);
      localStringBuilder.append(", UUID: ");
      localStringBuilder.append(pdfData.recordingUuid);
      localE.e(localStringBuilder.toString());
      f1 = mPageLeftMargin;
      f2 = mEcgTopMargin + 680.315F;
    }
    localE.d(f1, f2 + localE.f());
    localE.c(paramJ0);
    localE.e(String.format(Locale.US, "Page %d of %d", new Object[] { Integer.valueOf(paramInt), Integer.valueOf(mTotalPages) }));
    localE.d(mPageLeftMargin + 566.92914F - localE.h(), mEcgTopMargin + 680.315F + localE.f());
    localE.c(paramJ0);
  }
  
  private ArrayList<String> splitWithDelimiters(c0 paramC0, String paramString, Float paramFloat)
  {
    ArrayList localArrayList = new ArrayList();
    StringBuilder localStringBuilder = new StringBuilder();
    Object localObject1 = Pattern.compile("(\\S+)(\\s+)");
    Object localObject2 = new StringBuilder();
    ((StringBuilder)localObject2).append(paramString);
    ((StringBuilder)localObject2).append(" ");
    Matcher localMatcher = ((Pattern)localObject1).matcher(((StringBuilder)localObject2).toString());
    for (;;)
    {
      paramString = "";
      int j;
      int k;
      do
      {
        if (!localMatcher.find()) {
          break;
        }
        String str = localMatcher.group(2);
        j = 1;
        localObject1 = localMatcher.group(1);
        k = Util.countMatches(str, NEW_LINE);
        localObject2 = paramString;
        do
        {
          paramString = new StringBuilder();
          paramString.append(localStringBuilder);
          paramString.append((String)localObject2);
          paramString.append((String)localObject1);
          if (paramC0.b(paramString.toString()) > paramFloat.floatValue())
          {
            if (localStringBuilder.length() == 0)
            {
              i = paramC0.e((String)localObject1, paramFloat.floatValue());
              localArrayList.add(((String)localObject1).substring(0, i));
              localObject1 = ((String)localObject1).substring(i);
            }
            else
            {
              localArrayList.add(localStringBuilder.toString());
              localStringBuilder.setLength(0);
            }
            paramString = "";
            i = 1;
          }
          else
          {
            localStringBuilder.append((String)localObject2);
            localStringBuilder.append((String)localObject1);
            paramString = str;
            i = 0;
          }
          localObject2 = paramString;
        } while (i != 0);
      } while (k <= 0);
      i = j;
      if (localStringBuilder.length() > 0)
      {
        localArrayList.add(localStringBuilder.toString());
        i = j;
      }
      while (i < k)
      {
        localArrayList.add("");
        i += 1;
      }
      localStringBuilder.setLength(0);
    }
    if (localStringBuilder.length() > 0) {
      localArrayList.add(localStringBuilder.toString());
    }
    int i = 0;
    while (i < localArrayList.size())
    {
      paramC0 = new StringBuilder();
      paramC0.append("Line ");
      i += 1;
      paramC0.append(i);
      paramC0.append(":");
      paramC0.append((String)localArrayList.get(0));
      l.a.a.d(paramC0.toString(), new Object[0]);
    }
    return localArrayList;
  }
  
  /* Error */
  void createReport()
    throws Exception
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 109	com/alivecor/ecg/record/PdfRender:pdfData	Lcom/alivecor/ecg/record/PdfData;
    //   4: astore 12
    //   6: aload_0
    //   7: aload 12
    //   9: getfield 534	com/alivecor/ecg/record/PdfData:appName	Ljava/lang/String;
    //   12: putfield 417	com/alivecor/ecg/record/PdfRender:mAppName	Ljava/lang/String;
    //   15: aload 12
    //   17: getfield 426	com/alivecor/ecg/record/PdfData:recordingUuid	Ljava/lang/String;
    //   20: invokestatic 538	com/alivecor/ecg/core/a/b:e	(Ljava/lang/String;)Ljava/lang/String;
    //   23: astore 12
    //   25: aload_0
    //   26: getfield 109	com/alivecor/ecg/record/PdfRender:pdfData	Lcom/alivecor/ecg/record/PdfData;
    //   29: astore 13
    //   31: aload 13
    //   33: getfield 541	com/alivecor/ecg/record/PdfData:isEnhancedFilter	Z
    //   36: istore 11
    //   38: iconst_1
    //   39: istore 7
    //   41: iload 11
    //   43: ifeq +52 -> 95
    //   46: aload 13
    //   48: getfield 426	com/alivecor/ecg/record/PdfData:recordingUuid	Ljava/lang/String;
    //   51: invokestatic 544	com/alivecor/ecg/core/a/b:a	(Ljava/lang/String;)Ljava/io/File;
    //   54: astore 12
    //   56: aload 12
    //   58: invokevirtual 549	java/io/File:exists	()Z
    //   61: istore 11
    //   63: iload 11
    //   65: ifne +18 -> 83
    //   68: ldc_w 551
    //   71: iconst_1
    //   72: anewarray 4	java/lang/Object
    //   75: dup
    //   76: iconst_0
    //   77: aload 12
    //   79: aastore
    //   80: invokestatic 553	l/a/a:h	(Ljava/lang/String;[Ljava/lang/Object;)V
    //   83: aload_0
    //   84: getfield 109	com/alivecor/ecg/record/PdfRender:pdfData	Lcom/alivecor/ecg/record/PdfData;
    //   87: getfield 426	com/alivecor/ecg/record/PdfData:recordingUuid	Ljava/lang/String;
    //   90: invokestatic 555	com/alivecor/ecg/core/a/b:d	(Ljava/lang/String;)Ljava/lang/String;
    //   93: astore 12
    //   95: new 557	com/alivecor/ecg/core/EcgFile
    //   98: dup
    //   99: invokespecial 558	com/alivecor/ecg/core/EcgFile:<init>	()V
    //   102: astore 13
    //   104: aload_0
    //   105: aload 13
    //   107: putfield 560	com/alivecor/ecg/record/PdfRender:mEcgFile	Lcom/alivecor/ecg/core/EcgFile;
    //   110: aload 13
    //   112: aload 12
    //   114: invokevirtual 563	com/alivecor/ecg/core/EcgFile:open	(Ljava/lang/String;)Z
    //   117: ifeq +1245 -> 1362
    //   120: aload_0
    //   121: getfield 560	com/alivecor/ecg/record/PdfRender:mEcgFile	Lcom/alivecor/ecg/core/EcgFile;
    //   124: invokevirtual 566	com/alivecor/ecg/core/EcgFile:getTotalLead1Samples	()I
    //   127: istore 5
    //   129: iconst_2
    //   130: istore 9
    //   132: iload 5
    //   134: iconst_2
    //   135: if_icmplt +1227 -> 1362
    //   138: ldc_w 568
    //   141: iconst_1
    //   142: anewarray 4	java/lang/Object
    //   145: dup
    //   146: iconst_0
    //   147: aload_0
    //   148: getfield 560	com/alivecor/ecg/record/PdfRender:mEcgFile	Lcom/alivecor/ecg/core/EcgFile;
    //   151: getfield 572	com/alivecor/ecg/core/EcgFile:mAliveInfo	Lcom/alivecor/ecg/core/EcgFile$AliveFileInfo;
    //   154: getfield 577	com/alivecor/ecg/core/EcgFile$AliveFileInfo:recorderSW	Ljava/lang/String;
    //   157: aastore
    //   158: invokestatic 386	l/a/a:g	(Ljava/lang/String;[Ljava/lang/Object;)V
    //   161: aload_0
    //   162: aload_0
    //   163: getfield 560	com/alivecor/ecg/record/PdfRender:mEcgFile	Lcom/alivecor/ecg/core/EcgFile;
    //   166: getfield 572	com/alivecor/ecg/core/EcgFile:mAliveInfo	Lcom/alivecor/ecg/core/EcgFile$AliveFileInfo;
    //   169: getfield 577	com/alivecor/ecg/core/EcgFile$AliveFileInfo:recorderSW	Ljava/lang/String;
    //   172: putfield 421	com/alivecor/ecg/record/PdfRender:mAppVersion	Ljava/lang/String;
    //   175: new 579	a/b/g0
    //   178: dup
    //   179: new 581	java/io/BufferedOutputStream
    //   182: dup
    //   183: new 583	java/io/FileOutputStream
    //   186: dup
    //   187: aload_0
    //   188: getfield 107	com/alivecor/ecg/record/PdfRender:mOutFile	Ljava/io/File;
    //   191: invokespecial 586	java/io/FileOutputStream:<init>	(Ljava/io/File;)V
    //   194: invokespecial 589	java/io/BufferedOutputStream:<init>	(Ljava/io/OutputStream;)V
    //   197: invokespecial 590	a/b/g0:<init>	(Ljava/io/OutputStream;)V
    //   200: astore 12
    //   202: aload_0
    //   203: aload 12
    //   205: putfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   208: aload_0
    //   209: getfield 158	com/alivecor/ecg/record/PdfRender:yAxisScale	I
    //   212: i2f
    //   213: fstore_3
    //   214: ldc_w 295
    //   217: f2i
    //   218: istore 5
    //   220: aload_0
    //   221: iload 5
    //   223: putfield 93	com/alivecor/ecg/record/PdfRender:mSpeedPercent	I
    //   226: aload_0
    //   227: fload_3
    //   228: ldc_w 295
    //   231: fmul
    //   232: ldc_w 334
    //   235: fdiv
    //   236: f2i
    //   237: putfield 95	com/alivecor/ecg/record/PdfRender:mGainPercent	I
    //   240: aload_0
    //   241: iconst_0
    //   242: putfield 97	com/alivecor/ecg/record/PdfRender:mSampleCount	I
    //   245: aload_0
    //   246: ldc2_w 591
    //   249: iload 5
    //   251: i2d
    //   252: ddiv
    //   253: d2i
    //   254: putfield 342	com/alivecor/ecg/record/PdfRender:mSamplesPerStrip	I
    //   257: aload_0
    //   258: getfield 109	com/alivecor/ecg/record/PdfRender:pdfData	Lcom/alivecor/ecg/record/PdfData;
    //   261: getfield 184	com/alivecor/ecg/record/PdfData:recordingDate	Lk/a/a/b;
    //   264: astore 13
    //   266: new 408	java/lang/StringBuilder
    //   269: dup
    //   270: invokespecial 409	java/lang/StringBuilder:<init>	()V
    //   273: astore 14
    //   275: aload 14
    //   277: aload_0
    //   278: getfield 417	com/alivecor/ecg/record/PdfRender:mAppName	Ljava/lang/String;
    //   281: invokevirtual 415	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   284: pop
    //   285: aload 14
    //   287: ldc_w 594
    //   290: invokevirtual 415	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   293: pop
    //   294: aload 14
    //   296: invokestatic 599	org/joda/time/format/a:f	()Lorg/joda/time/format/b;
    //   299: aload 13
    //   301: invokevirtual 604	org/joda/time/format/b:g	(Lk/a/a/o;)Ljava/lang/String;
    //   304: invokevirtual 415	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   307: pop
    //   308: aload 12
    //   310: aload 14
    //   312: invokevirtual 429	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   315: invokevirtual 608	a/b/g0:B	(Ljava/lang/String;)V
    //   318: aload_0
    //   319: getfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   322: ldc_w 468
    //   325: invokevirtual 611	a/b/g0:z	(Ljava/lang/String;)V
    //   328: aload_0
    //   329: getfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   332: ldc_w 613
    //   335: invokevirtual 615	a/b/g0:t	(Ljava/lang/String;)V
    //   338: aload_0
    //   339: getfield 109	com/alivecor/ecg/record/PdfRender:pdfData	Lcom/alivecor/ecg/record/PdfData;
    //   342: getfield 618	com/alivecor/ecg/record/PdfData:logoAsset	Ljava/lang/String;
    //   345: astore 12
    //   347: new 620	java/io/BufferedInputStream
    //   350: dup
    //   351: aload_0
    //   352: getfield 105	com/alivecor/ecg/record/PdfRender:mContext	Landroid/content/Context;
    //   355: invokevirtual 215	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   358: aload 12
    //   360: invokevirtual 223	android/content/res/AssetManager:open	(Ljava/lang/String;)Ljava/io/InputStream;
    //   363: invokespecial 623	java/io/BufferedInputStream:<init>	(Ljava/io/InputStream;)V
    //   366: astore 12
    //   368: new 625	a/b/m
    //   371: dup
    //   372: aload_0
    //   373: getfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   376: aload 12
    //   378: iconst_1
    //   379: invokespecial 628	a/b/m:<init>	(La/b/g0;Ljava/io/InputStream;I)V
    //   382: astore 12
    //   384: aload_0
    //   385: aload 12
    //   387: putfield 91	com/alivecor/ecg/record/PdfRender:mLogoImage	La/b/m;
    //   390: ldc_w 629
    //   393: aload 12
    //   395: invokevirtual 631	a/b/m:g	()F
    //   398: fdiv
    //   399: fstore_3
    //   400: aload_0
    //   401: getfield 91	com/alivecor/ecg/record/PdfRender:mLogoImage	La/b/m;
    //   404: fload_3
    //   405: invokevirtual 635	a/b/m:i	(F)La/b/m;
    //   408: pop
    //   409: goto +17 -> 426
    //   412: astore 12
    //   414: aload 12
    //   416: ldc_w 637
    //   419: iconst_0
    //   420: anewarray 4	java/lang/Object
    //   423: invokestatic 640	l/a/a:c	(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V
    //   426: aload_0
    //   427: invokevirtual 643	com/alivecor/ecg/record/PdfRender:prepareECGData	()V
    //   430: aload_0
    //   431: getfield 346	com/alivecor/ecg/record/PdfRender:ecgBuf1	[S
    //   434: ifnull +1023 -> 1457
    //   437: aload_0
    //   438: getfield 645	com/alivecor/ecg/record/PdfRender:ecgBuf2	[S
    //   441: ifnonnull +1016 -> 1457
    //   444: iconst_1
    //   445: istore 11
    //   447: goto +3 -> 450
    //   450: aload_0
    //   451: iload 11
    //   453: putfield 647	com/alivecor/ecg/record/PdfRender:isSingleLead	Z
    //   456: aload_0
    //   457: getfield 93	com/alivecor/ecg/record/PdfRender:mSpeedPercent	I
    //   460: i2d
    //   461: dstore_1
    //   462: dload_1
    //   463: ldc2_w 648
    //   466: ddiv
    //   467: ldc2_w 650
    //   470: dmul
    //   471: ldc2_w 650
    //   474: dadd
    //   475: ldc2_w 650
    //   478: dadd
    //   479: d2f
    //   480: fstore_3
    //   481: aload_0
    //   482: fload_3
    //   483: putfield 653	com/alivecor/ecg/record/PdfRender:mCalpulseOffset_mm	F
    //   486: ldc2_w 648
    //   489: dload_1
    //   490: ddiv
    //   491: ldc2_w 654
    //   494: dmul
    //   495: fload_3
    //   496: f2d
    //   497: dmul
    //   498: ldc2_w 656
    //   501: ddiv
    //   502: d2i
    //   503: istore 8
    //   505: aload_0
    //   506: iload 8
    //   508: putfield 344	com/alivecor/ecg/record/PdfRender:mCalpulseOffsetSamples	I
    //   511: iload 11
    //   513: ifeq +23 -> 536
    //   516: aload_0
    //   517: getfield 340	com/alivecor/ecg/record/PdfRender:mTotalEcgSamples	I
    //   520: iload 8
    //   522: iadd
    //   523: istore 5
    //   525: aload_0
    //   526: getfield 342	com/alivecor/ecg/record/PdfRender:mSamplesPerStrip	I
    //   529: iconst_4
    //   530: imul
    //   531: istore 6
    //   533: goto +18 -> 551
    //   536: aload_0
    //   537: getfield 340	com/alivecor/ecg/record/PdfRender:mTotalEcgSamples	I
    //   540: iload 8
    //   542: iadd
    //   543: istore 5
    //   545: aload_0
    //   546: getfield 342	com/alivecor/ecg/record/PdfRender:mSamplesPerStrip	I
    //   549: istore 6
    //   551: iload 5
    //   553: iload 6
    //   555: irem
    //   556: istore 5
    //   558: iload 5
    //   560: sipush 150
    //   563: if_icmpge +14 -> 577
    //   566: aload_0
    //   567: aload_0
    //   568: getfield 340	com/alivecor/ecg/record/PdfRender:mTotalEcgSamples	I
    //   571: iload 5
    //   573: isub
    //   574: putfield 340	com/alivecor/ecg/record/PdfRender:mTotalEcgSamples	I
    //   577: iload 11
    //   579: ifeq +25 -> 604
    //   582: iload 8
    //   584: aload_0
    //   585: getfield 340	com/alivecor/ecg/record/PdfRender:mTotalEcgSamples	I
    //   588: iadd
    //   589: i2d
    //   590: aload_0
    //   591: getfield 342	com/alivecor/ecg/record/PdfRender:mSamplesPerStrip	I
    //   594: iconst_4
    //   595: imul
    //   596: i2d
    //   597: dconst_1
    //   598: dmul
    //   599: ddiv
    //   600: dstore_1
    //   601: goto +20 -> 621
    //   604: iload 8
    //   606: aload_0
    //   607: getfield 340	com/alivecor/ecg/record/PdfRender:mTotalEcgSamples	I
    //   610: iadd
    //   611: i2d
    //   612: aload_0
    //   613: getfield 342	com/alivecor/ecg/record/PdfRender:mSamplesPerStrip	I
    //   616: i2d
    //   617: dconst_1
    //   618: dmul
    //   619: ddiv
    //   620: dstore_1
    //   621: aload_0
    //   622: dload_1
    //   623: invokestatic 663	java/lang/Math:ceil	(D)D
    //   626: d2i
    //   627: putfield 440	com/alivecor/ecg/record/PdfRender:mTotalPages	I
    //   630: aload_0
    //   631: invokespecial 665	com/alivecor/ecg/record/PdfRender:initFonts	()V
    //   634: aload_0
    //   635: aload_0
    //   636: getfield 241	com/alivecor/ecg/record/PdfRender:mFontBold	La/b/c0;
    //   639: invokevirtual 666	a/b/c0:g	()F
    //   642: ldc_w 311
    //   645: fmul
    //   646: aload_0
    //   647: getfield 237	com/alivecor/ecg/record/PdfRender:mFontSmall	La/b/c0;
    //   650: invokevirtual 666	a/b/c0:g	()F
    //   653: fconst_2
    //   654: fmul
    //   655: fadd
    //   656: ldc_w 667
    //   659: fadd
    //   660: putfield 669	com/alivecor/ecg/record/PdfRender:mDetailsHeight	F
    //   663: aload_0
    //   664: aload_0
    //   665: getfield 237	com/alivecor/ecg/record/PdfRender:mFontSmall	La/b/c0;
    //   668: invokevirtual 666	a/b/c0:g	()F
    //   671: ldc 7
    //   673: fadd
    //   674: putfield 671	com/alivecor/ecg/record/PdfRender:mFooterHeight	F
    //   677: ldc_w 673
    //   680: iconst_1
    //   681: anewarray 4	java/lang/Object
    //   684: dup
    //   685: iconst_0
    //   686: aload_0
    //   687: getfield 440	com/alivecor/ecg/record/PdfRender:mTotalPages	I
    //   690: invokestatic 384	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   693: aastore
    //   694: invokestatic 675	l/a/a:a	(Ljava/lang/String;[Ljava/lang/Object;)V
    //   697: iconst_0
    //   698: istore 8
    //   700: iconst_1
    //   701: istore 10
    //   703: iload 9
    //   705: istore 6
    //   707: iload 7
    //   709: istore 5
    //   711: iload 10
    //   713: istore 7
    //   715: iload 7
    //   717: aload_0
    //   718: getfield 440	com/alivecor/ecg/record/PdfRender:mTotalPages	I
    //   721: if_icmpgt +580 -> 1301
    //   724: aload_0
    //   725: getfield 109	com/alivecor/ecg/record/PdfRender:pdfData	Lcom/alivecor/ecg/record/PdfData;
    //   728: getfield 679	com/alivecor/ecg/record/PdfData:paperSize	Lcom/alivecor/ecg/record/PdfData$PaperSize;
    //   731: getstatic 684	com/alivecor/ecg/record/PdfData$PaperSize:LETTER	Lcom/alivecor/ecg/record/PdfData$PaperSize;
    //   734: if_acmpne +729 -> 1463
    //   737: iload 5
    //   739: istore 9
    //   741: goto +3 -> 744
    //   744: aload_0
    //   745: getfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   748: astore 13
    //   750: iload 9
    //   752: ifeq +11 -> 763
    //   755: getstatic 689	a/b/v:a	[F
    //   758: astore 12
    //   760: goto +8 -> 768
    //   763: getstatic 692	a/b/f:a	[F
    //   766: astore 12
    //   768: new 276	a/b/j0
    //   771: dup
    //   772: aload 13
    //   774: aload 12
    //   776: invokespecial 695	a/b/j0:<init>	(La/b/g0;[F)V
    //   779: astore 12
    //   781: aload_0
    //   782: aload 12
    //   784: invokevirtual 698	a/b/j0:M	()F
    //   787: ldc_w 325
    //   790: fsub
    //   791: fconst_2
    //   792: fdiv
    //   793: putfield 297	com/alivecor/ecg/record/PdfRender:mPageLeftMargin	F
    //   796: aload 12
    //   798: invokevirtual 701	a/b/j0:L	()F
    //   801: fstore 4
    //   803: aload_0
    //   804: getfield 669	com/alivecor/ecg/record/PdfRender:mDetailsHeight	F
    //   807: fstore_3
    //   808: fload 4
    //   810: ldc_w 326
    //   813: fsub
    //   814: fload_3
    //   815: fsub
    //   816: aload_0
    //   817: getfield 671	com/alivecor/ecg/record/PdfRender:mFooterHeight	F
    //   820: fsub
    //   821: fconst_2
    //   822: fdiv
    //   823: fstore 4
    //   825: aload_0
    //   826: fload 4
    //   828: putfield 703	com/alivecor/ecg/record/PdfRender:mPageTopMargin	F
    //   831: aload_0
    //   832: fload 4
    //   834: fload_3
    //   835: fadd
    //   836: putfield 324	com/alivecor/ecg/record/PdfRender:mEcgTopMargin	F
    //   839: aload 12
    //   841: iconst_0
    //   842: invokevirtual 289	a/b/j0:H	(I)V
    //   845: aload_0
    //   846: aload 12
    //   848: invokevirtual 707	com/alivecor/ecg/record/PdfRender:printHeader	(La/b/j0;)V
    //   851: aload_0
    //   852: aload 12
    //   854: invokevirtual 710	com/alivecor/ecg/record/PdfRender:printGrids	(La/b/j0;)V
    //   857: aload_0
    //   858: aload 12
    //   860: iload 7
    //   862: invokespecial 712	com/alivecor/ecg/record/PdfRender:printFooter	(La/b/j0;I)V
    //   865: aload_0
    //   866: getfield 647	com/alivecor/ecg/record/PdfRender:isSingleLead	Z
    //   869: istore 11
    //   871: iload 11
    //   873: ifeq +67 -> 940
    //   876: iload 5
    //   878: anewarray 4	java/lang/Object
    //   881: astore 13
    //   883: aload 13
    //   885: iconst_0
    //   886: iload 7
    //   888: invokestatic 384	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   891: aastore
    //   892: ldc_w 714
    //   895: aload 13
    //   897: invokestatic 675	l/a/a:a	(Ljava/lang/String;[Ljava/lang/Object;)V
    //   900: iload 7
    //   902: iload 5
    //   904: if_icmpne +13 -> 917
    //   907: aload_0
    //   908: aload 12
    //   910: aload_0
    //   911: getfield 324	com/alivecor/ecg/record/PdfRender:mEcgTopMargin	F
    //   914: invokespecial 716	com/alivecor/ecg/record/PdfRender:printCalPulse	(La/b/j0;F)V
    //   917: aload_0
    //   918: aload 12
    //   920: iload 7
    //   922: invokespecial 718	com/alivecor/ecg/record/PdfRender:printEcg	(La/b/j0;I)V
    //   925: iload 5
    //   927: istore 9
    //   929: iload 6
    //   931: istore 5
    //   933: iload 9
    //   935: istore 6
    //   937: goto +538 -> 1475
    //   940: iload 5
    //   942: anewarray 4	java/lang/Object
    //   945: astore 13
    //   947: aload 13
    //   949: iconst_0
    //   950: iload 7
    //   952: invokestatic 384	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   955: aastore
    //   956: ldc_w 720
    //   959: aload 13
    //   961: invokestatic 675	l/a/a:a	(Ljava/lang/String;[Ljava/lang/Object;)V
    //   964: iload 7
    //   966: iload 5
    //   968: if_icmpne +87 -> 1055
    //   971: aload_0
    //   972: aload 12
    //   974: aload_0
    //   975: getfield 324	com/alivecor/ecg/record/PdfRender:mEcgTopMargin	F
    //   978: invokespecial 716	com/alivecor/ecg/record/PdfRender:printCalPulse	(La/b/j0;F)V
    //   981: aload_0
    //   982: aload 12
    //   984: aload_0
    //   985: getfield 324	com/alivecor/ecg/record/PdfRender:mEcgTopMargin	F
    //   988: bipush 110
    //   990: i2f
    //   991: fadd
    //   992: invokespecial 716	com/alivecor/ecg/record/PdfRender:printCalPulse	(La/b/j0;F)V
    //   995: aload_0
    //   996: aload 12
    //   998: aload_0
    //   999: getfield 324	com/alivecor/ecg/record/PdfRender:mEcgTopMargin	F
    //   1002: sipush 220
    //   1005: i2f
    //   1006: fadd
    //   1007: invokespecial 716	com/alivecor/ecg/record/PdfRender:printCalPulse	(La/b/j0;F)V
    //   1010: aload_0
    //   1011: aload 12
    //   1013: aload_0
    //   1014: getfield 324	com/alivecor/ecg/record/PdfRender:mEcgTopMargin	F
    //   1017: sipush 330
    //   1020: i2f
    //   1021: fadd
    //   1022: invokespecial 716	com/alivecor/ecg/record/PdfRender:printCalPulse	(La/b/j0;F)V
    //   1025: aload_0
    //   1026: aload 12
    //   1028: aload_0
    //   1029: getfield 324	com/alivecor/ecg/record/PdfRender:mEcgTopMargin	F
    //   1032: sipush 440
    //   1035: i2f
    //   1036: fadd
    //   1037: invokespecial 716	com/alivecor/ecg/record/PdfRender:printCalPulse	(La/b/j0;F)V
    //   1040: aload_0
    //   1041: aload 12
    //   1043: aload_0
    //   1044: getfield 324	com/alivecor/ecg/record/PdfRender:mEcgTopMargin	F
    //   1047: sipush 550
    //   1050: i2f
    //   1051: fadd
    //   1052: invokespecial 716	com/alivecor/ecg/record/PdfRender:printCalPulse	(La/b/j0;F)V
    //   1055: iload 7
    //   1057: iload 5
    //   1059: if_icmpne +410 -> 1469
    //   1062: aload_0
    //   1063: getfield 344	com/alivecor/ecg/record/PdfRender:mCalpulseOffsetSamples	I
    //   1066: istore 5
    //   1068: goto +3 -> 1071
    //   1071: aload 12
    //   1073: aload_0
    //   1074: getfield 297	com/alivecor/ecg/record/PdfRender:mPageLeftMargin	F
    //   1077: aload_0
    //   1078: getfield 324	com/alivecor/ecg/record/PdfRender:mEcgTopMargin	F
    //   1081: ldc_w 325
    //   1084: ldc_w 326
    //   1087: invokevirtual 330	a/b/j0:v	(FFFF)V
    //   1090: aload_0
    //   1091: aload 12
    //   1093: iload 7
    //   1095: iload 8
    //   1097: iload 5
    //   1099: ldc_w 721
    //   1102: aload_0
    //   1103: getfield 346	com/alivecor/ecg/record/PdfRender:ecgBuf1	[S
    //   1106: aload_0
    //   1107: getfield 324	com/alivecor/ecg/record/PdfRender:mEcgTopMargin	F
    //   1110: invokespecial 723	com/alivecor/ecg/record/PdfRender:printEcgLead	(La/b/j0;IIILjava/lang/String;[SF)I
    //   1113: istore 9
    //   1115: aload_0
    //   1116: aload 12
    //   1118: iload 7
    //   1120: iload 8
    //   1122: iload 5
    //   1124: ldc_w 725
    //   1127: aload_0
    //   1128: getfield 645	com/alivecor/ecg/record/PdfRender:ecgBuf2	[S
    //   1131: aload_0
    //   1132: getfield 324	com/alivecor/ecg/record/PdfRender:mEcgTopMargin	F
    //   1135: bipush 110
    //   1137: i2f
    //   1138: fadd
    //   1139: invokespecial 723	com/alivecor/ecg/record/PdfRender:printEcgLead	(La/b/j0;IIILjava/lang/String;[SF)I
    //   1142: pop
    //   1143: aload_0
    //   1144: aload 12
    //   1146: iload 7
    //   1148: iload 8
    //   1150: iload 5
    //   1152: ldc_w 727
    //   1155: aload_0
    //   1156: getfield 729	com/alivecor/ecg/record/PdfRender:ecgBuf3	[S
    //   1159: aload_0
    //   1160: getfield 324	com/alivecor/ecg/record/PdfRender:mEcgTopMargin	F
    //   1163: sipush 220
    //   1166: i2f
    //   1167: fadd
    //   1168: invokespecial 723	com/alivecor/ecg/record/PdfRender:printEcgLead	(La/b/j0;IIILjava/lang/String;[SF)I
    //   1171: pop
    //   1172: aload_0
    //   1173: aload 12
    //   1175: iload 7
    //   1177: iload 8
    //   1179: iload 5
    //   1181: ldc_w 731
    //   1184: aload_0
    //   1185: getfield 733	com/alivecor/ecg/record/PdfRender:ecgBuf4	[S
    //   1188: aload_0
    //   1189: getfield 324	com/alivecor/ecg/record/PdfRender:mEcgTopMargin	F
    //   1192: sipush 330
    //   1195: i2f
    //   1196: fadd
    //   1197: invokespecial 723	com/alivecor/ecg/record/PdfRender:printEcgLead	(La/b/j0;IIILjava/lang/String;[SF)I
    //   1200: pop
    //   1201: aload_0
    //   1202: aload 12
    //   1204: iload 7
    //   1206: iload 8
    //   1208: iload 5
    //   1210: ldc_w 735
    //   1213: aload_0
    //   1214: getfield 737	com/alivecor/ecg/record/PdfRender:ecgBuf5	[S
    //   1217: aload_0
    //   1218: getfield 324	com/alivecor/ecg/record/PdfRender:mEcgTopMargin	F
    //   1221: sipush 440
    //   1224: i2f
    //   1225: fadd
    //   1226: invokespecial 723	com/alivecor/ecg/record/PdfRender:printEcgLead	(La/b/j0;IIILjava/lang/String;[SF)I
    //   1229: pop
    //   1230: aload_0
    //   1231: aload 12
    //   1233: iload 7
    //   1235: iload 8
    //   1237: iload 5
    //   1239: ldc_w 739
    //   1242: aload_0
    //   1243: getfield 741	com/alivecor/ecg/record/PdfRender:ecgBuf6	[S
    //   1246: aload_0
    //   1247: getfield 324	com/alivecor/ecg/record/PdfRender:mEcgTopMargin	F
    //   1250: sipush 550
    //   1253: i2f
    //   1254: fadd
    //   1255: invokespecial 723	com/alivecor/ecg/record/PdfRender:printEcgLead	(La/b/j0;IIILjava/lang/String;[SF)I
    //   1258: pop
    //   1259: iconst_2
    //   1260: istore 5
    //   1262: iconst_1
    //   1263: istore 6
    //   1265: ldc_w 743
    //   1268: iconst_2
    //   1269: anewarray 4	java/lang/Object
    //   1272: dup
    //   1273: iconst_0
    //   1274: iload 7
    //   1276: invokestatic 384	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   1279: aastore
    //   1280: dup
    //   1281: iconst_1
    //   1282: iload 9
    //   1284: invokestatic 384	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   1287: aastore
    //   1288: invokestatic 675	l/a/a:a	(Ljava/lang/String;[Ljava/lang/Object;)V
    //   1291: iload 8
    //   1293: iload 9
    //   1295: iadd
    //   1296: istore 8
    //   1298: goto +177 -> 1475
    //   1301: aload_0
    //   1302: getfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   1305: invokevirtual 746	a/b/g0:E	()V
    //   1308: aload_0
    //   1309: aconst_null
    //   1310: putfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   1313: aload_0
    //   1314: getfield 560	com/alivecor/ecg/record/PdfRender:mEcgFile	Lcom/alivecor/ecg/core/EcgFile;
    //   1317: invokevirtual 747	com/alivecor/ecg/core/EcgFile:close	()V
    //   1320: aload_0
    //   1321: aconst_null
    //   1322: putfield 560	com/alivecor/ecg/record/PdfRender:mEcgFile	Lcom/alivecor/ecg/core/EcgFile;
    //   1325: aload_0
    //   1326: getfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   1329: astore 12
    //   1331: aload 12
    //   1333: ifnull +28 -> 1361
    //   1336: aload 12
    //   1338: invokevirtual 746	a/b/g0:E	()V
    //   1341: aload_0
    //   1342: aconst_null
    //   1343: putfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   1346: return
    //   1347: astore 12
    //   1349: aload 12
    //   1351: ldc_w 749
    //   1354: iconst_0
    //   1355: anewarray 4	java/lang/Object
    //   1358: invokestatic 640	l/a/a:c	(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V
    //   1361: return
    //   1362: new 211	java/lang/Exception
    //   1365: dup
    //   1366: ldc_w 751
    //   1369: invokespecial 753	java/lang/Exception:<init>	(Ljava/lang/String;)V
    //   1372: athrow
    //   1373: astore 12
    //   1375: goto +20 -> 1395
    //   1378: astore 12
    //   1380: aload 12
    //   1382: ldc_w 755
    //   1385: iconst_0
    //   1386: anewarray 4	java/lang/Object
    //   1389: invokestatic 640	l/a/a:c	(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V
    //   1392: aload 12
    //   1394: athrow
    //   1395: aload_0
    //   1396: getfield 560	com/alivecor/ecg/record/PdfRender:mEcgFile	Lcom/alivecor/ecg/core/EcgFile;
    //   1399: astore 13
    //   1401: aload 13
    //   1403: ifnull +13 -> 1416
    //   1406: aload 13
    //   1408: invokevirtual 747	com/alivecor/ecg/core/EcgFile:close	()V
    //   1411: aload_0
    //   1412: aconst_null
    //   1413: putfield 560	com/alivecor/ecg/record/PdfRender:mEcgFile	Lcom/alivecor/ecg/core/EcgFile;
    //   1416: aload_0
    //   1417: getfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   1420: astore 13
    //   1422: aload 13
    //   1424: ifnull +30 -> 1454
    //   1427: aload 13
    //   1429: invokevirtual 746	a/b/g0:E	()V
    //   1432: aload_0
    //   1433: aconst_null
    //   1434: putfield 89	com/alivecor/ecg/record/PdfRender:mPdf	La/b/g0;
    //   1437: goto +17 -> 1454
    //   1440: astore 13
    //   1442: aload 13
    //   1444: ldc_w 749
    //   1447: iconst_0
    //   1448: anewarray 4	java/lang/Object
    //   1451: invokestatic 640	l/a/a:c	(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V
    //   1454: aload 12
    //   1456: athrow
    //   1457: iconst_0
    //   1458: istore 11
    //   1460: goto -1010 -> 450
    //   1463: iconst_0
    //   1464: istore 9
    //   1466: goto -722 -> 744
    //   1469: iconst_0
    //   1470: istore 5
    //   1472: goto -401 -> 1071
    //   1475: iload 7
    //   1477: iconst_1
    //   1478: iadd
    //   1479: istore 7
    //   1481: iload 5
    //   1483: istore 9
    //   1485: iload 6
    //   1487: istore 5
    //   1489: iload 9
    //   1491: istore 6
    //   1493: goto -778 -> 715
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	1496	0	this	PdfRender
    //   461	162	1	d	double
    //   213	622	3	f1	float
    //   801	32	4	f2	float
    //   127	1361	5	i	int
    //   531	961	6	j	int
    //   39	1441	7	k	int
    //   503	794	8	m	int
    //   130	1360	9	n	int
    //   701	11	10	i1	int
    //   36	1423	11	bool	boolean
    //   4	390	12	localObject1	Object
    //   412	3	12	localException1	Exception
    //   758	579	12	localObject2	Object
    //   1347	3	12	localException2	Exception
    //   1373	1	12	localObject3	Object
    //   1378	77	12	localException3	Exception
    //   29	1399	13	localObject4	Object
    //   1440	3	13	localException4	Exception
    //   273	38	14	localStringBuilder	StringBuilder
    // Exception table:
    //   from	to	target	type
    //   338	409	412	java/lang/Exception
    //   1325	1331	1347	java/lang/Exception
    //   1336	1346	1347	java/lang/Exception
    //   15	38	1373	finally
    //   46	63	1373	finally
    //   68	83	1373	finally
    //   83	95	1373	finally
    //   95	129	1373	finally
    //   138	214	1373	finally
    //   220	338	1373	finally
    //   338	409	1373	finally
    //   414	426	1373	finally
    //   426	444	1373	finally
    //   450	511	1373	finally
    //   516	533	1373	finally
    //   536	551	1373	finally
    //   566	577	1373	finally
    //   582	601	1373	finally
    //   604	621	1373	finally
    //   621	677	1373	finally
    //   677	697	1373	finally
    //   715	737	1373	finally
    //   744	750	1373	finally
    //   755	760	1373	finally
    //   763	768	1373	finally
    //   768	871	1373	finally
    //   876	900	1373	finally
    //   907	917	1373	finally
    //   917	925	1373	finally
    //   940	964	1373	finally
    //   971	1055	1373	finally
    //   1062	1068	1373	finally
    //   1071	1090	1373	finally
    //   1090	1115	1373	finally
    //   1115	1143	1373	finally
    //   1143	1172	1373	finally
    //   1172	1201	1373	finally
    //   1201	1230	1373	finally
    //   1230	1259	1373	finally
    //   1265	1291	1373	finally
    //   1301	1325	1373	finally
    //   1362	1373	1373	finally
    //   1380	1395	1373	finally
    //   15	38	1378	java/lang/Exception
    //   46	63	1378	java/lang/Exception
    //   68	83	1378	java/lang/Exception
    //   83	95	1378	java/lang/Exception
    //   95	129	1378	java/lang/Exception
    //   138	214	1378	java/lang/Exception
    //   220	338	1378	java/lang/Exception
    //   414	426	1378	java/lang/Exception
    //   426	444	1378	java/lang/Exception
    //   450	511	1378	java/lang/Exception
    //   516	533	1378	java/lang/Exception
    //   536	551	1378	java/lang/Exception
    //   566	577	1378	java/lang/Exception
    //   582	601	1378	java/lang/Exception
    //   604	621	1378	java/lang/Exception
    //   621	677	1378	java/lang/Exception
    //   677	697	1378	java/lang/Exception
    //   715	737	1378	java/lang/Exception
    //   744	750	1378	java/lang/Exception
    //   755	760	1378	java/lang/Exception
    //   763	768	1378	java/lang/Exception
    //   768	871	1378	java/lang/Exception
    //   876	900	1378	java/lang/Exception
    //   907	917	1378	java/lang/Exception
    //   917	925	1378	java/lang/Exception
    //   940	964	1378	java/lang/Exception
    //   971	1055	1378	java/lang/Exception
    //   1062	1068	1378	java/lang/Exception
    //   1071	1090	1378	java/lang/Exception
    //   1090	1115	1378	java/lang/Exception
    //   1115	1143	1378	java/lang/Exception
    //   1143	1172	1378	java/lang/Exception
    //   1172	1201	1378	java/lang/Exception
    //   1201	1230	1378	java/lang/Exception
    //   1230	1259	1378	java/lang/Exception
    //   1265	1291	1378	java/lang/Exception
    //   1301	1325	1378	java/lang/Exception
    //   1362	1373	1378	java/lang/Exception
    //   1395	1401	1440	java/lang/Exception
    //   1406	1416	1440	java/lang/Exception
    //   1416	1422	1440	java/lang/Exception
    //   1427	1437	1440	java/lang/Exception
  }
  
  public String getPatientString(Resources paramResources)
  {
    if (pdfData.patientData == null) {
      return "";
    }
    StringBuilder localStringBuilder = new StringBuilder();
    String str = pdfData.patientData.firstName;
    if (str != null) {
      localStringBuilder.append(str);
    }
    if (pdfData.patientData.lastName != null)
    {
      if (localStringBuilder.length() > 0) {
        localStringBuilder.append(" ");
      }
      localStringBuilder.append(pdfData.patientData.lastName);
    }
    str = getPatientDOBString();
    if (str != null)
    {
      if (localStringBuilder.length() > 0) {
        localStringBuilder.append(", ");
      }
      localStringBuilder.append(str);
      paramResources = getPatientAgeString(paramResources);
      if (paramResources != null)
      {
        localStringBuilder.append(" (");
        localStringBuilder.append(paramResources);
        localStringBuilder.append(")");
      }
    }
    return localStringBuilder.toString();
  }
  
  void prepareECGData()
  {
    int i = mEcgFile.getTotalLead1Samples();
    mTotalEcgSamples = i;
    l.a.a.g("prepareECGData: mTotalEcgSamples is %d", new Object[] { Integer.valueOf(i) });
    Object localObject1 = mEcgFile;
    i = mAliveFormat.flags;
    i = ((EcgFile)localObject1).getAnnotationCount();
    localObject1 = mAnnArray;
    if ((localObject1 != null) && (localObject1.length != i)) {
      mAnnArray = null;
    }
    if (i > 0)
    {
      if (mAnnArray == null) {
        mAnnArray = new int[i];
      }
      System.arraycopy(mEcgFile.getAnnotations(), 0, mAnnArray, 0, i);
      Arrays.sort(mAnnArray);
      i = 0;
      for (;;)
      {
        localObject1 = mAnnArray;
        if ((i >= localObject1.length) || (localObject1[i] >= 0)) {
          break;
        }
        i += 1;
      }
    }
    try
    {
      Object localObject2 = mEcgFile;
      localObject1 = EcgFile.Lead.LEAD_1;
      l.a.a.g("Lead I samples %d", new Object[] { Long.valueOf(((EcgFile)localObject2).samplesForLead((EcgFile.Lead)localObject1)) });
      Object localObject3 = mEcgFile;
      localObject2 = EcgFile.Lead.LEAD_2;
      l.a.a.g("Lead II samples %d", new Object[] { Long.valueOf(((EcgFile)localObject3).samplesForLead((EcgFile.Lead)localObject2)) });
      Object localObject4 = mEcgFile;
      localObject3 = EcgFile.Lead.LEAD_3;
      l.a.a.g("Lead III samples %d", new Object[] { Long.valueOf(((EcgFile)localObject4).samplesForLead((EcgFile.Lead)localObject3)) });
      Object localObject5 = mEcgFile;
      localObject4 = EcgFile.Lead.LEAD_4;
      l.a.a.g("Lead 4 samples %d", new Object[] { Long.valueOf(((EcgFile)localObject5).samplesForLead((EcgFile.Lead)localObject4)) });
      EcgFile localEcgFile = mEcgFile;
      localObject5 = EcgFile.Lead.LEAD_5;
      l.a.a.g("Lead 5 samples %d", new Object[] { Long.valueOf(localEcgFile.samplesForLead((EcgFile.Lead)localObject5)) });
      localEcgFile = mEcgFile;
      EcgFile.Lead localLead = EcgFile.Lead.LEAD_6;
      l.a.a.g("Lead 6 samples %d", new Object[] { Long.valueOf(localEcgFile.samplesForLead(localLead)) });
      mEcgFile.samplesForLead((EcgFile.Lead)localObject1);
      ecgBuf1 = mEcgFile.readEcgSamples((EcgFile.Lead)localObject1);
      if (mEcgFile.samplesForLead((EcgFile.Lead)localObject2) > 0L) {
        ecgBuf2 = mEcgFile.readEcgSamples((EcgFile.Lead)localObject2);
      }
      if (mEcgFile.samplesForLead((EcgFile.Lead)localObject3) > 0L) {
        ecgBuf3 = mEcgFile.readEcgSamples((EcgFile.Lead)localObject3);
      }
      if (mEcgFile.samplesForLead((EcgFile.Lead)localObject4) > 0L) {
        ecgBuf4 = mEcgFile.readEcgSamples((EcgFile.Lead)localObject4);
      }
      if (mEcgFile.samplesForLead((EcgFile.Lead)localObject5) > 0L) {
        ecgBuf5 = mEcgFile.readEcgSamples((EcgFile.Lead)localObject5);
      }
      if (mEcgFile.samplesForLead(localLead) > 0L) {
        ecgBuf6 = mEcgFile.readEcgSamples(localLead);
      }
      if ((!pdfData.isEnhancedFilter) && (!isPreviewPDF))
      {
        localObject1 = MainsFilterFrequency.fromFrequency(mEcgFile.getMainsFreq());
        localObject2 = ecgBuf1;
        if (localObject2 != null) {
          ecgBuf1 = com.alivecor.ai.d.a((short[])localObject2, hz);
        }
        localObject2 = ecgBuf2;
        if (localObject2 != null) {
          ecgBuf2 = com.alivecor.ai.d.a((short[])localObject2, hz);
        }
        localObject2 = ecgBuf3;
        if (localObject2 != null) {
          ecgBuf3 = com.alivecor.ai.d.a((short[])localObject2, hz);
        }
        localObject2 = ecgBuf4;
        if (localObject2 != null) {
          ecgBuf4 = com.alivecor.ai.d.a((short[])localObject2, hz);
        }
        localObject2 = ecgBuf5;
        if (localObject2 != null) {
          ecgBuf5 = com.alivecor.ai.d.a((short[])localObject2, hz);
        }
        localObject2 = ecgBuf6;
        if (localObject2 != null) {
          ecgBuf6 = com.alivecor.ai.d.a((short[])localObject2, hz);
        }
      }
      return;
    }
    catch (IOException localIOException)
    {
      l.a.a.c(localIOException, "Error reading ECG samples", new Object[0]);
      throw new RuntimeException(localIOException);
    }
  }
  
  void printGrids(j0 paramJ0)
    throws Exception
  {
    paramJ0.y(0.82D, 0.82D, 0.95D);
    int j = 0;
    paramJ0.C(0);
    paramJ0.F(0);
    paramJ0.z(0.3F);
    int i = 0;
    float f1;
    float f2;
    float f3;
    while (i < 240)
    {
      if (i % 5 != 0)
      {
        f1 = mPageLeftMargin;
        f2 = mEcgTopMargin;
        f3 = i * 2.8346457F;
        paramJ0.A(f1, f2 + f3);
        paramJ0.t(mPageLeftMargin + 566.92914F, mEcgTopMargin + f3);
      }
      i += 1;
    }
    paramJ0.O();
    i = 0;
    while (i < 200)
    {
      if (i % 5 != 0)
      {
        f1 = mPageLeftMargin;
        f2 = i * 2.8346457F;
        paramJ0.A(f1 + f2, mEcgTopMargin);
        paramJ0.t(mPageLeftMargin + f2, mEcgTopMargin + 680.315F);
      }
      i += 1;
    }
    paramJ0.O();
    paramJ0.y(0.55D, 0.55D, 0.55D);
    paramJ0.z(0.3F);
    i = 0;
    while (i <= 48)
    {
      if (i % 12 != 0)
      {
        f1 = mPageLeftMargin;
        f2 = mEcgTopMargin;
        f3 = i * 5 * 2.8346457F;
        paramJ0.A(f1, f2 + f3);
        paramJ0.t(mPageLeftMargin + 566.92914F, mEcgTopMargin + f3);
      }
      i += 1;
    }
    paramJ0.O();
    i = 0;
    while (i <= 40)
    {
      if (i % 5 != 0)
      {
        f1 = mPageLeftMargin;
        f2 = i * 5 * 2.8346457F;
        paramJ0.A(f1 + f2, mEcgTopMargin);
        paramJ0.t(mPageLeftMargin + f2, mEcgTopMargin + 680.315F);
      }
      i += 1;
    }
    paramJ0.O();
    if (isSingleLead)
    {
      paramJ0.y(0.2D, 0.2D, 0.2D);
      paramJ0.z(0.5F);
    }
    i = 0;
    while (i <= 4)
    {
      f1 = mPageLeftMargin;
      f2 = mEcgTopMargin;
      f3 = i * 60 * 2.8346457F;
      paramJ0.A(f1, f2 + f3);
      paramJ0.t(mPageLeftMargin + 566.92914F, mEcgTopMargin + f3);
      i += 1;
    }
    paramJ0.O();
    paramJ0.y(0.2D, 0.2D, 0.2D);
    paramJ0.z(0.5F);
    i = j;
    while (i <= 8)
    {
      f1 = mPageLeftMargin;
      f2 = i * 25 * 2.8346457F;
      paramJ0.A(f1 + f2, mEcgTopMargin);
      paramJ0.t(mPageLeftMargin + f2, mEcgTopMargin + 680.315F);
      i += 1;
    }
    paramJ0.O();
  }
  
  void printHeader(j0 paramJ0)
    throws Exception
  {
    float f4 = mFontBold.g();
    Resources localResources = mContext.getResources();
    Object localObject4 = new String[5];
    Object localObject5 = new String[5];
    Object localObject1 = getPatientString(mContext.getResources());
    if (TextUtils.isEmpty((CharSequence)localObject1))
    {
      localObject4[0] = "";
      localObject5[0] = "";
    }
    else
    {
      localObject4[0] = localResources.getString(R.string.fieldlabel_patient);
      localObject5[0] = localObject1;
    }
    if (TextUtils.isEmpty(pdfData.patientId))
    {
      localObject4[1] = "";
      localObject5[1] = "";
    }
    else
    {
      localObject4[1] = localResources.getString(R.string.fieldlabel_patientid);
      localObject1 = pdfData.patientId;
      if (localObject1 == null) {
        localObject1 = "";
      }
      localObject5[1] = localObject1;
    }
    localObject4[2] = localResources.getString(R.string.fieldlabel_recorded);
    localObject1 = pdfData.recordingDate;
    localObject5[2] = mDateTimeFormatter.a((b)localObject1);
    localObject4[3] = localResources.getString(R.string.fieldlabel_hr);
    localObject5[3] = getHeartRateString();
    if (localObject5[3] != null)
    {
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(localObject5[3]);
      ((StringBuilder)localObject1).append(" ");
      ((StringBuilder)localObject1).append(localResources.getString(R.string.bpm));
      localObject5[3] = ((StringBuilder)localObject1).toString();
    }
    else
    {
      localObject5[3] = "---";
    }
    e localE1 = new e(mFontBold);
    localE1.a(mFallbackFont);
    Object localObject3 = new e(mFontNormal);
    ((e)localObject3).a(mFallbackFont);
    e localE2 = new e(mFontSmall);
    localE2.a(mFallbackFontSmall);
    int i = 0;
    float f1 = 0.0F;
    for (float f3 = 0.0F; i < 4; f3 = f2)
    {
      localE1.e(localObject4[i]);
      f2 = f3;
      if (localE1.h() > f3) {
        f2 = localE1.h();
      }
      ((e)localObject3).e(localObject5[i]);
      f3 = f1;
      if (((e)localObject3).h() > f1) {
        f3 = ((e)localObject3).h();
      }
      i += 1;
      f1 = f3;
    }
    float f2 = f1;
    if (f1 > 226.77167F) {
      f2 = 226.77167F;
    }
    f1 = f2;
    if (f2 < 127.55906F) {
      f1 = 127.55906F;
    }
    float f5 = mEcgTopMargin - localE1.f() * 5.0F;
    i = mEcgFile.getMainsFreq();
    boolean bool1 = mEcgFile.getIsNotchFilter();
    boolean bool2 = mEcgFile.getIsBaselineFilter();
    StringBuilder localStringBuilder = new StringBuilder();
    if (pdfData.isEnhancedFilter)
    {
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append(mContext.getString(R.string.enhanced_filter));
      ((StringBuilder)localObject1).append(", ");
      localStringBuilder.append(((StringBuilder)localObject1).toString());
      if (isPreviewPDF) {
        localObject1 = String.format(localResources.getString(R.string.field_mainsfilter_off), new Object[] { localResources.getString(R.string.ecg_results_invert_off) });
      } else {
        localObject1 = String.format(localResources.getString(R.string.field_mainsfilter), new Object[] { Integer.valueOf(i) });
      }
      localStringBuilder.append((String)localObject1);
    }
    else
    {
      if ((mIsMuscleFilter) || (bool1)) {
        break label665;
      }
    }
    break label757;
    label665:
    if (isPreviewPDF) {
      localObject1 = String.format(localResources.getString(R.string.field_mainsfilter_off), new Object[] { localResources.getString(R.string.ecg_results_invert_off) });
    } else {
      localObject1 = String.format(localResources.getString(R.string.field_mainsfilter), new Object[] { Integer.valueOf(i) });
    }
    localStringBuilder.append((String)localObject1);
    if ((mIsMuscleFilter) && (bool1)) {
      localStringBuilder.append(" notch");
    }
    label757:
    String str1 = " ";
    if (mIsTestMode)
    {
      if (localStringBuilder.length() > 0) {
        localStringBuilder.append("  ");
      }
      localStringBuilder.append("BW: ");
      if (bool2) {
        localObject1 = "0.6";
      } else {
        localObject1 = "0.5";
      }
      localStringBuilder.append((String)localObject1);
      if (!mIsMuscleFilter) {
        localObject1 = " - 40Hz";
      } else if (i == 50) {
        localObject1 = " - 25Hz";
      } else {
        localObject1 = " - 30Hz";
      }
      localStringBuilder.append((String)localObject1);
    }
    String str2 = localResources.getString(R.string.field_scale);
    i = mSpeedPercent;
    if (i == 50) {
      localObject1 = "12.5";
    }
    for (;;)
    {
      break;
      if (i == 100) {
        localObject1 = "25";
      } else if (i == 200) {
        localObject1 = "50";
      } else {
        localObject1 = "";
      }
    }
    i = mGainPercent;
    if (i == 50) {
      localObject2 = "5";
    }
    for (;;)
    {
      break;
      if (i == 100) {
        localObject2 = "10";
      } else if (i == 200) {
        localObject2 = "20";
      } else {
        localObject2 = "";
      }
    }
    localObject1 = String.format(str2, new Object[] { localObject1, localObject2 });
    Object localObject2 = new StringBuilder();
    ((StringBuilder)localObject2).append(localStringBuilder.toString());
    ((StringBuilder)localObject2).append("    ");
    ((StringBuilder)localObject2).append((String)localObject1);
    localE2.e(((StringBuilder)localObject2).toString());
    localE2.d(mPageLeftMargin + 566.92914F - localE2.h(), mEcgTopMargin - mFontSmall.f());
    localE2.c(paramJ0);
    i = 0;
    int j = 0;
    localObject1 = localObject3;
    while (i < 4)
    {
      if (localObject5[i] != null)
      {
        localE1.e(localObject4[i]);
        f2 = mPageLeftMargin;
        f6 = j * f4 + f5;
        localE1.d(f2, f6);
        localE1.c(paramJ0);
        localObject3 = localObject5[i];
        localObject2 = localObject1;
        ((e)localObject2).e((String)localObject3);
        truncateTextLine((e)localObject2, 226.77167F, true);
        ((e)localObject2).d(mPageLeftMargin + 14.173229F + f3, f6);
        ((e)localObject2).c(paramJ0);
        j += 1;
      }
      i += 1;
    }
    localE1.e(localResources.getString(R.string.fieldlabel_duration));
    ((e)localObject1).e(getDurationString(mContext.getResources()));
    f2 = f3 + 14.173229F + f1 - (localE1.h() + 5.6692915F + ((e)localObject1).h());
    float f6 = mPageLeftMargin;
    float f7 = (j - 1) * f4 + f5;
    localE1.d(f6 + f2, f7);
    localE1.c(paramJ0);
    ((e)localObject1).d(mPageLeftMargin + 5.6692915F + f2 + localE1.h(), f7);
    ((e)localObject1).c(paramJ0);
    localObject2 = mLogoImage;
    if (localObject2 != null)
    {
      ((m)localObject2).b(mPageLeftMargin + 566.92914F - ((m)localObject2).g(), f5 - f4);
      mLogoImage.f(paramJ0);
    }
    localObject2 = pdfData.tagString;
    if (!TextUtils.isEmpty((CharSequence)localObject2))
    {
      localObject4[0] = localResources.getString(R.string.fieldlabel_tags);
      localObject5[0] = localObject2;
      j = 1;
    }
    else
    {
      j = 0;
    }
    localObject2 = pdfData.noteString;
    i = j;
    if (!TextUtils.isEmpty((CharSequence)localObject2))
    {
      localObject4[j] = localResources.getString(R.string.fieldlabel_comments);
      localObject5[j] = localObject2;
      i = j + 1;
    }
    localObject2 = mContext.getString(Util.incompatibleGetEcgAnaysisTag(pdfData.finalDetermination));
    int k = i;
    if (localObject2 != null)
    {
      localObject4[i] = localResources.getString(R.string.finding_by_alivecor);
      localObject5[i] = localObject2;
      k = i + 1;
    }
    i = 0;
    for (f2 = 0.0F; i < k; f2 = f4)
    {
      localE1.e(localObject4[i]);
      f4 = f2;
      if (localE1.h() > f2) {
        f4 = localE1.h();
      }
      i += 1;
    }
    f4 = mPageLeftMargin + 14.173229F + f3 + f1 + 22.677166F;
    f6 = f4 + f2 + 5.6692915F;
    if (mLogoImage != null) {
      f3 = paramJ0.M() - f6 - mLogoImage.g();
    } else {
      f3 = paramJ0.M() - f6;
    }
    int m = 0;
    j = 0;
    f1 = f5;
    localObject3 = localObject5;
    localObject2 = localObject4;
    for (;;)
    {
      f2 = f1;
      if (m >= k) {
        break;
      }
      localObject3[m] = localObject3[m].replace(NEW_LINE, str1);
      localObject4 = splitWithDelimiters(mFontNormal, localObject3[m], Float.valueOf(f3 - 28.346458F));
      if ((k == 2) && (m == 1))
      {
        i = j;
        f2 = f1;
        if (((ArrayList)localObject4).size() + j < 4)
        {
          f2 = f1 + mFontBold.g();
          i = j + 1;
        }
      }
      else
      {
        f2 = f1;
        i = j;
      }
      localE1.e(localObject2[m]);
      localE1.d(f4, f2);
      localE1.c(paramJ0);
      j = 0;
      while (j < ((ArrayList)localObject4).size()) {
        if (i < 5)
        {
          localObject5 = (String)((ArrayList)localObject4).get(j);
          if ((k != 3) || (m != 1) || (j <= 0))
          {
            while (((k == 3) && (m == 0) && (j > 1)) || ((k == 2) && (j > 2))) {}
            if (((String)localObject5).length() > 0)
            {
              ((e)localObject1).d(f6, j * mFontNormal.g() + f2);
              ((e)localObject1).e((String)((ArrayList)localObject4).get(j));
              ((e)localObject1).c(paramJ0);
            }
            i += 1;
            j += 1;
          }
        }
        else {}
      }
      if (i > 5)
      {
        l.a.a.h("No more room for lines!", new Object[0]);
        break;
      }
      f1 = f2 + j * mFontBold.g();
      m += 1;
      j = i;
    }
    if (mEcgFile.samplesForLead(EcgFile.Lead.LEAD_2) > 0L)
    {
      ((e)localObject1).d(f4, f2);
      ((e)localObject1).e(mContext.getString(R.string.pdf_analysis_disclaimer));
      ((e)localObject1).c(paramJ0);
    }
  }
  
  void truncateTextLine(e paramE, float paramFloat, boolean paramBoolean)
  {
    if (paramE.h() > paramFloat)
    {
      String str2 = paramE.g();
      int i = str2.length();
      int j;
      do
      {
        j = i - 1;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append(str2.substring(0, j));
        String str1;
        if (paramBoolean) {
          str1 = "...";
        } else {
          str1 = "";
        }
        localStringBuilder.append(str1);
        paramE.e(localStringBuilder.toString());
        if (paramE.h() <= paramFloat) {
          break;
        }
        i = j;
      } while (j > 1);
    }
  }
}
