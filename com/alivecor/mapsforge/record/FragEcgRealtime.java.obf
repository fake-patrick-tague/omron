package com.alivecor.ecg.record;

import android.animation.Animator;
import android.animation.Animator.AnimatorListener;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Handler;
import android.text.TextUtils;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.LayoutInflater;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewPropertyAnimator;
import android.view.Window;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.DecelerateInterpolator;
import android.widget.CompoundButton;
import android.widget.ImageView;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.a0;
import androidx.fragment.app.m;
import androidx.lifecycle.LiveData;
import com.alivecor.ai.ClassifierData;
import com.alivecor.ai.ClassifierData.b;
import com.alivecor.ai.o;
import com.alivecor.ai.r;
import com.alivecor.alivecorkitlite.R.color;
import com.alivecor.alivecorkitlite.R.drawable;
import com.alivecor.alivecorkitlite.R.id;
import com.alivecor.alivecorkitlite.R.layout;
import com.alivecor.alivecorkitlite.R.menu;
import com.alivecor.alivecorkitlite.R.string;
import com.alivecor.ecg.core.model.MainsFilterFrequency;
import com.alivecor.ecg.core.model.YAxisScaleTypes;
import com.alivecor.ecg.core.model.b;
import com.alivecor.ecg.core.model.c;
import com.alivecor.universal_monitor.Filter;
import com.alivecor.universal_monitor.LeadState;
import com.alivecor.universal_monitor.LeadValues;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationSettingsRequest.Builder;
import com.google.android.gms.location.SettingsClient;
import com.google.android.gms.tasks.Task;
import java.io.Serializable;
import java.util.Locale;
import java.util.Objects;
import l.a.a;

abstract class FragEcgRealtime
  extends Fragment
{
  private static final String ARG_DEVICE = "recording_device";
  private static final String ARG_NEED_DEVICE_PROMPT = "need_device_prompt";
  private static final String ARG_RECORDING_TYPE = "recording_type";
  private static final String ARG_RESTRICT_SCAN_TRIANGLE = "restrict_scan_triangle";
  protected static final String ARG_UI_CONFIG = "ui_config";
  private static final float SIX_LEAD_GRID_SCALE = 0.6F;
  private final int REQ_LOC_ENABLE = 300;
  private View actionBar;
  AppPreferences appPreferences;
  int battery = 0;
  LiveData<TriangleBluetoothWrapperClass.BLEConnectionState> bleConnectionState;
  private BroadcastReceiver bluetoothStateReciever;
  private View btnNeedHelp;
  TextView debugView;
  private b deviceLeads;
  EcgRealTimeView ecgAvfView;
  EcgRealTimeView ecgAvlView;
  EcgRealTimeView ecgAvrView;
  View ecgContainer;
  EcgGridView ecgGridView;
  EcgRealTimeView ecgLead1View;
  EcgRealTimeView ecgLead2View;
  EcgRealTimeView ecgLead3View;
  EcgRealTimeView ecgSingleLeadView;
  ViewGroup ecgSixLeadView;
  View header;
  RecordingHelpUrls helpUrls;
  private View hudFragmentContainer;
  View imgBeats;
  View imgTimerCheckmark;
  private boolean isReportRawPDF;
  private RadioGroup leadSelection;
  private View leadSelectionContainer;
  protected Context mContext;
  private int mainRecFrequency;
  ImageView meterImg;
  TextView meterLabel;
  private View panelFirstEcg;
  private View panelFirstEcgError;
  private View panelFirstEcgHelp;
  ProgressDialog progress;
  Util.ProgressDrawableCircle progressDrawable;
  RecordDependencyComponent recordDependencyComponent;
  LiveData<com.alivecor.ecg.core.model.d> recordingDeviceData;
  private int recordingMaxDurations;
  private int recordingMinDurations;
  private RecordingType recordingType;
  private boolean restrictScanTriangle;
  private c selectedDevice;
  private Filter selectedFilter;
  private boolean syncHeldForRecording;
  View timerProgress;
  TextView title;
  LiveData<Integer> triangleBattery;
  private boolean triangleScanFailed;
  TextView txtBeatsCount;
  TextView txtTimer;
  private final Handler unbindHandler = new Handler();
  private EcgMonitorViewModel viewModel;
  private boolean voiceEnabled;
  private int yAxisScale;
  
  FragEcgRealtime() {}
  
  private void annotationUpdated(Integer paramInteger)
  {
    if (paramInteger != null) {
      ecgSingleLeadView.addAnnotation(paramInteger.intValue());
    }
  }
  
  protected static Bundle argumentsToBundle(c paramC, b paramB, Filter paramFilter, int paramInt1, int paramInt2, int paramInt3, boolean paramBoolean, String paramString, RecordingHelpUrls paramRecordingHelpUrls)
  {
    Bundle localBundle = new Bundle();
    localBundle.putString("com.alivecor.ecg.record.ARG_OVERRIDE_DEVICE_NAME", paramString);
    localBundle.putSerializable("com.alivecor.ecg.record.device", paramC);
    localBundle.putSerializable("com.alivecor.ecg.record.EXTRA_LEADS_CONFIG", paramB);
    localBundle.putSerializable("com.alivecor.ecg.record.EXTRA_RECORDING_FILTER_TYPE", paramFilter);
    localBundle.putInt("com.alivecor.ecg.record.EXTRA_RECORDING_MAX_DURATIONS", paramInt1);
    localBundle.putInt("com.alivecor.ecg.record.EXTRA_RECORDING_MIN_DURATIONS", paramInt2);
    localBundle.putInt("com.alivecor.ecg.record.EXTRA_RECORDING_FREQUENCY", paramInt3);
    localBundle.putBoolean("com.alivecor.ecg.record.EXTRA_VOICE_ENABLED", paramBoolean);
    localBundle.putSerializable("com.alivecor.ecg.record.HELP_URLS", paramRecordingHelpUrls);
    return localBundle;
  }
  
  private void clearEcgStrips()
  {
    a.g("clearEcgStrips()", new Object[0]);
    ecgSingleLeadView.resetECG();
    ecgLead1View.resetECG();
    ecgLead2View.resetECG();
    ecgLead3View.resetECG();
    ecgAvfView.resetECG();
    ecgAvrView.resetECG();
    ecgAvlView.resetECG();
  }
  
  private void confirmAnalysisResult(com.alivecor.ai.s paramS)
  {
    a.d("handleAnalysisResult: %s", new Object[] { paramS });
    Object localObject;
    int i;
    if (k)
    {
      localObject = progress;
      if (localObject != null) {
        ((ProgressDialog)localObject).dismiss();
      }
      hudFragmentContainer.setVisibility(0);
      hudFragmentContainer.animate().alpha(1.0F).start();
      localObject = helpUrls;
      if ((localObject != null) && (!TextUtils.isEmpty(mainsNoise))) {
        localObject = helpUrls.mainsNoise;
      } else {
        localObject = Urls.getFullUrl("app-redirect/i-need-help-electrical-interference");
      }
      i = R.string.recording_error_mains_title;
    }
    for (int j = R.string.recording_error_mains_message;; j = R.string.recording_error_noise_message)
    {
      for (paramS = PostRecordingErrorFragment.create(paramS, i, j, (String)localObject);; paramS = PostRecordingErrorFragment.create(paramS, R.string.recording_error_short_title, i, (String)localObject))
      {
        replaceHudFragment(paramS);
        return;
        if (paramS.a(ClassifierData.class) == null) {
          return;
        }
        localObject = ((ClassifierData.b)((ClassifierData)paramS.a(ClassifierData.class)).d()).getDetermination();
        if (localObject != o.f) {
          break;
        }
        localObject = progress;
        if (localObject != null) {
          ((ProgressDialog)localObject).dismiss();
        }
        enableGearButton(false);
        hudFragmentContainer.setVisibility(0);
        hudFragmentContainer.animate().alpha(1.0F).start();
        i = R.string.recording_error_short_message;
        localObject = helpUrls;
        if ((localObject != null) && (!TextUtils.isEmpty(shortRecording))) {
          localObject = helpUrls.shortRecording;
        } else {
          localObject = Urls.getFullUrl("app-redirect/i-need-help-too-short");
        }
      }
      if (localObject != o.h) {
        break;
      }
      localObject = progress;
      if (localObject != null) {
        ((ProgressDialog)localObject).dismiss();
      }
      enableGearButton(false);
      hudFragmentContainer.setVisibility(0);
      hudFragmentContainer.animate().alpha(1.0F).start();
      localObject = helpUrls;
      if ((localObject != null) && (!TextUtils.isEmpty(unreadableRecording))) {
        localObject = helpUrls.unreadableRecording;
      } else {
        localObject = Urls.getFullUrl("app-redirect/i-need-help-unreadable");
      }
      i = R.string.recording_error_noise_title;
    }
    a.b("confirmAnalysisResult: CALLED FOR VALID RESULT %s", new Object[] { paramS });
  }
  
  private BroadcastReceiver createBluetoothStateReceiver()
  {
    new BroadcastReceiver()
    {
      public void onReceive(Context paramAnonymousContext, Intent paramAnonymousIntent)
      {
        if ("android.bluetooth.adapter.action.STATE_CHANGED".equals(paramAnonymousIntent.getAction()))
        {
          int i = paramAnonymousIntent.getIntExtra("android.bluetooth.adapter.extra.STATE", 10);
          a.a("BT state updated: %d", new Object[] { Integer.valueOf(i) });
          if (i == 10) {
            FragEcgRealtime.this.onBluetoothLoss();
          }
        }
      }
    };
  }
  
  private String createDebugString(String paramString, int paramInt, TriangleBluetoothWrapperClass.BLEConnectionState paramBLEConnectionState)
  {
    return String.format(Locale.ROOT, "BLE State for %s: %s Battery: %d", new Object[] { paramString, paramBLEConnectionState, Integer.valueOf(paramInt) });
  }
  
  private Fragment createIntroHudFragment(c paramC)
  {
    int i = 4.$SwitchMap$com$alivecor$ecg$core$model$RecordingDevice[paramC.ordinal()];
    if (i != 1)
    {
      if (i != 2) {
        return new KardiaMobileIntroFragment();
      }
      paramC = (RecordUiConfig)requireArguments().getSerializable("ui_config");
      return SakuraOneIntroFragment.create(requireArguments().getString("com.alivecor.ecg.record.ARG_OVERRIDE_DEVICE_NAME", null), paramC);
    }
    paramC = new TriangleIntroFragment();
    RecordUiConfig localRecordUiConfig = (RecordUiConfig)requireArguments().getSerializable("ui_config");
    Bundle localBundle = new Bundle();
    localBundle.putSerializable("ui_config", localRecordUiConfig);
    localBundle.putSerializable("com.alivecor.ecg.record.HELP_URLS", helpUrls);
    paramC.setArguments(localBundle);
    paramC.leadConfigUpdated(deviceLeads);
    return paramC;
  }
  
  private void dismissProgressDialog()
  {
    ProgressDialog localProgressDialog = progress;
    if ((localProgressDialog != null) && (localProgressDialog.isShowing()))
    {
      progress.dismiss();
      progress = null;
    }
  }
  
  private void enableGearButton(boolean paramBoolean)
  {
    Object localObject = actionBar.findViewById(R.id.convert_actionbar_right_btn);
    if (localObject != null) {
      ((View)localObject).setEnabled(paramBoolean);
    }
    localObject = (ImageView)actionBar.findViewById(R.id.convert_actionbar_right_img);
    if (localObject != null) {
      ((ImageView)localObject).setEnabled(paramBoolean);
    }
  }
  
  private void enterCapturing()
  {
    showEcgTrace();
    if (!requireArguments().getBoolean("com.alivecor.ecg.record.EXTRA_HIDE_TRACE")) {
      hudFragmentContainer.animate().alpha(0.0F).setInterpolator(new AccelerateInterpolator());
    }
    progressDrawable.setColor(getResources().getColor(R.color.kardia_gray_light));
    progressDrawable.animate(1.0F, 2500L);
    txtTimer.setText(formatTimerString(getRecordViewModelrecordingSettingsgetValuemaxRecDurationMs / 1000));
    Integer localInteger = (Integer)viewModel.signalPercent().getValue();
    a.a("enterCapturing(): Setting Signal Percent %d", new Object[] { localInteger });
    if (localInteger != null) {
      updateSignalStrength(localInteger);
    }
  }
  
  private void enterPreCapturing()
  {
    clearEcgStrips();
    showEcgTrace();
    if (!requireArguments().getBoolean("com.alivecor.ecg.record.EXTRA_HIDE_TRACE")) {
      hudFragmentContainer.animate().alpha(0.0F).setInterpolator(new AccelerateInterpolator());
    }
    progressDrawable.setColor(getResources().getColor(R.color.kardia_gray_light));
    progressDrawable.animate(1.0F, 2500L);
    txtTimer.setText(formatTimerString(getRecordViewModelrecordingSettingsgetValuemaxRecDurationMs / 1000));
  }
  
  private void enterRecordState(EcgMonitorViewModel.State paramState)
  {
    a.a("entered record state %s", new Object[] { paramState });
    setLeadSelectionEnabled(true);
    switch (4.$SwitchMap$com$alivecor$ecg$record$EcgMonitorViewModel$State[paramState.ordinal()])
    {
    case 2: 
    default: 
      return;
    case 10: 
      handleRecordError(getRecordViewModel().error());
      return;
    case 9: 
      dismissProgressDialog();
      return;
    case 8: 
      dismissProgressDialog();
      confirmAnalysisResult(viewModel.getSavedEvaluationResult());
      return;
    case 6: 
    case 7: 
      playCompletedAnimation(null);
      showSaveEcgProgress();
      return;
    case 5: 
      enterCapturing();
      return;
    case 4: 
      enterPreCapturing();
      return;
    case 3: 
      clearEcgStrips();
      progressDrawable.animate(0.0F, 800L);
      hudFragmentContainer.animate().alpha(1.0F).start();
      break;
    case 1: 
      resetRecordingUi();
    }
    replaceHudFragment(createIntroHudFragment(selectedDevice));
  }
  
  private Fragment findHudFragment()
  {
    return getChildFragmentManager().d0(R.id.frag_ecg_realtime_hud_container);
  }
  
  private static String formatTimerString(int paramInt)
  {
    if (paramInt >= 60) {
      return String.format(Locale.US, "%d:%02d", new Object[] { Integer.valueOf(paramInt / 60), Integer.valueOf(paramInt % 60) });
    }
    return String.format(Locale.US, "%d", new Object[] { Integer.valueOf(paramInt) });
  }
  
  private String getTitleString()
  {
    int i;
    if (deviceLeads == b.a) {
      i = R.string.record_ekg_title_single_lead;
    } else {
      i = R.string.record_ekg_title_six_lead;
    }
    return getString(i);
  }
  
  private void handleRecordError(RecordingError paramRecordingError)
  {
    a.a("handleRecordError(): %s", new Object[] { paramRecordingError });
    hudFragmentContainer.animate().alpha(1.0F).start();
    dismissProgressDialog();
    Object localObject3;
    Object localObject2;
    RecordingHelpUrls localRecordingHelpUrls;
    Object localObject1;
    switch (4.$SwitchMap$com$alivecor$ecg$record$RecordingError[paramRecordingError.ordinal()])
    {
    default: 
      return;
    case 11: 
      setLeadSelectionEnabled(false);
      viewModel.task.setValue(EcgMonitorViewModel.Tasks.ON_RECORDING_ERROR);
      a.b("Unknown error from ECG Monitor!", new Object[0]);
      Toast.makeText(requireContext(), "Unknown error during recording.  Please reset", 0).show();
      return;
    case 10: 
      setLeadSelectionEnabled(false);
      localObject3 = new MainsNoiseRetryErrorFragment();
      localObject2 = new Bundle();
      localRecordingHelpUrls = helpUrls;
      localObject1 = localObject2;
      paramRecordingError = (RecordingError)localObject3;
      if (localRecordingHelpUrls != null)
      {
        paramRecordingError = mainsNoise;
        localObject1 = localObject2;
        localObject2 = paramRecordingError;
        paramRecordingError = (RecordingError)localObject3;
      }
      break;
    case 9: 
      setLeadSelectionEnabled(true);
      localObject2 = TriangleNotFoundErrorFragment.create(requireArguments().getString("com.alivecor.ecg.record.ARG_OVERRIDE_DEVICE_NAME", null));
      localObject3 = new Bundle();
      ((Bundle)localObject3).putAll(((Fragment)localObject2).getArguments());
      localRecordingHelpUrls = helpUrls;
      localObject1 = localObject3;
      paramRecordingError = (RecordingError)localObject2;
      if (localRecordingHelpUrls != null)
      {
        ((Bundle)localObject3).putString("help url", triangleConnection);
        localObject1 = localObject3;
        paramRecordingError = (RecordingError)localObject2;
      }
      break;
    case 8: 
      setLeadSelectionEnabled(false);
      paramRecordingError = new TriangleBatteryErrorFragment();
      localObject1 = new Bundle();
      localObject2 = helpUrls;
      if (localObject2 != null) {
        ((Bundle)localObject1).putString("help url", triangleBattery);
      }
      ((Bundle)localObject1).putSerializable("ui_config", (RecordUiConfig)getArguments().getSerializable("ui_config"));
      paramRecordingError.setArguments((Bundle)localObject1);
      replaceHudFragment(paramRecordingError);
      meterImg.setImageResource(R.drawable.battery_indicator_unknown);
      return;
    case 7: 
      setLeadSelectionEnabled(false);
      requestEnableLocation();
      return;
    case 6: 
      localObject2 = new LocationPermissionErrorFragment();
      localObject3 = new Bundle();
      ((Bundle)localObject3).putString("arg_value", RecordingError.NEARBY_DEVICES_PERMISSION.name());
      localRecordingHelpUrls = helpUrls;
      localObject1 = localObject3;
      paramRecordingError = (RecordingError)localObject2;
      if (localRecordingHelpUrls != null)
      {
        localObject1 = localObject3;
        localObject3 = localRecordingHelpUrls;
        paramRecordingError = (RecordingError)localObject2;
      }
      break;
    case 5: 
      setLeadSelectionEnabled(false);
      localObject3 = new LocationPermissionErrorFragment();
      localObject2 = new Bundle();
      localRecordingHelpUrls = helpUrls;
      localObject1 = localObject2;
      paramRecordingError = (RecordingError)localObject3;
      if (localRecordingHelpUrls != null)
      {
        paramRecordingError = (RecordingError)localObject3;
        localObject3 = localRecordingHelpUrls;
        localObject1 = localObject2;
        localObject2 = locationPermission;
        ((Bundle)localObject1).putString("help url", (String)localObject2);
      }
      break;
    case 4: 
      setLeadSelectionEnabled(false);
      paramRecordingError = new MicPermissionVoiceErrorFragment();
    }
    for (;;)
    {
      replaceHudFragment(paramRecordingError);
      return;
      setLeadSelectionEnabled(false);
      localObject3 = MicPermissionErrorFragment.create(requireArguments().getString("com.alivecor.ecg.record.ARG_OVERRIDE_DEVICE_NAME", null));
      localObject2 = new Bundle();
      ((Bundle)localObject2).putAll(((Fragment)localObject3).getArguments());
      localRecordingHelpUrls = helpUrls;
      localObject1 = localObject2;
      paramRecordingError = (RecordingError)localObject3;
      if (localRecordingHelpUrls != null)
      {
        paramRecordingError = micPermission;
        localObject1 = localObject2;
        localObject2 = paramRecordingError;
        paramRecordingError = (RecordingError)localObject3;
        break;
        setLeadSelectionEnabled(false);
        localObject3 = BluetoothOffErrorFragment.create(requireArguments().getString("com.alivecor.ecg.record.ARG_OVERRIDE_DEVICE_NAME", null));
        localObject2 = new Bundle();
        ((Bundle)localObject2).putAll(((Fragment)localObject3).getArguments());
        localRecordingHelpUrls = helpUrls;
        localObject1 = localObject2;
        paramRecordingError = (RecordingError)localObject3;
        if (localRecordingHelpUrls != null)
        {
          paramRecordingError = bluetoothOff;
          localObject1 = localObject2;
          localObject2 = paramRecordingError;
          paramRecordingError = (RecordingError)localObject3;
          break;
          setLeadSelectionEnabled(false);
          localObject3 = new NfcErrorFragment();
          localObject2 = new Bundle();
          ((Bundle)localObject2).putString("com.alivecor.ecg.record.ARG_OVERRIDE_DEVICE_NAME", requireArguments().getString("com.alivecor.ecg.record.ARG_OVERRIDE_DEVICE_NAME", null));
          localRecordingHelpUrls = helpUrls;
          localObject1 = localObject2;
          paramRecordingError = (RecordingError)localObject3;
          if (localRecordingHelpUrls != null)
          {
            paramRecordingError = nfcOn;
            localObject1 = localObject2;
            localObject2 = paramRecordingError;
            paramRecordingError = (RecordingError)localObject3;
            break;
          }
        }
      }
      paramRecordingError.setArguments((Bundle)localObject1);
    }
  }
  
  private void hideEcgTrace()
  {
    b localB = deviceLeads;
    if (localB == null)
    {
      a.a("showEcgTrace: Called before leads config updated.  Skipping", new Object[0]);
      return;
    }
    if (localB == b.c)
    {
      ecgSixLeadView.setVisibility(8);
      return;
    }
    ecgSingleLeadView.setVisibility(8);
  }
  
  private boolean isMonitorIdle()
  {
    return getRecordViewModel().state().getValue() == EcgMonitorViewModel.State.IDLE;
  }
  
  private void leadValuesUpdated(LeadValues paramLeadValues)
  {
    if (paramLeadValues == null) {
      return;
    }
    ecgSingleLeadView.pushEcgSample(leadI);
    ecgLead1View.pushEcgSample(leadI);
    ecgLead2View.pushEcgSample(leadII);
    ecgLead3View.pushEcgSample(leadIII);
    ecgAvfView.pushEcgSample(aVF);
    ecgAvlView.pushEcgSample(aVL);
    ecgAvrView.pushEcgSample(aVR);
  }
  
  private void observeMonitor()
  {
    a.d("observeMonitor()", new Object[0]);
    EcgMonitorViewModel localEcgMonitorViewModel = getRecordViewModel();
    LiveData localLiveData = localEcgMonitorViewModel.triangleBatteryLevel();
    triangleBattery = localLiveData;
    localLiveData.observe(getViewLifecycleOwner(), new m0(this));
    localLiveData = localEcgMonitorViewModel.bleConnectionState();
    bleConnectionState = localLiveData;
    localLiveData.observe(getViewLifecycleOwner(), new g0(this));
    recordingDeviceData = localEcgMonitorViewModel.deviceData();
    localEcgMonitorViewModel.state().observe(getViewLifecycleOwner(), new l0(this));
    localEcgMonitorViewModel.elapsedRecTimeMs().observe(getViewLifecycleOwner(), new d0(this));
    localEcgMonitorViewModel.leadState().observe(getViewLifecycleOwner(), new h0(this));
    localEcgMonitorViewModel.previewValues().observe(getViewLifecycleOwner(), new q0(this));
    localEcgMonitorViewModel.beatOffsets().observe(getViewLifecycleOwner(), new e0(this));
    localEcgMonitorViewModel.currentHr().observe(getViewLifecycleOwner(), new s0(this));
    localEcgMonitorViewModel.signalPercent().observe(getViewLifecycleOwner(), new a2(this));
    localEcgMonitorViewModel.recordingSettings().observe(getViewLifecycleOwner(), new y1(this));
  }
  
  private void onBeatDetected()
  {
    imgBeats.animate().scaleX(1.3F).scaleY(1.3F).setDuration(50L).withEndAction(new f0(this)).start();
  }
  
  private void onBluetoothLoss()
  {
    handleRecordError(RecordingError.BLUETOOTH_OFF);
  }
  
  private void onHrUpdated(Integer paramInteger)
  {
    int i = Util.unboxOr(paramInteger, 0);
    txtBeatsCount.setText(Util.formatHeartRateString(Integer.valueOf(i).intValue()));
    onBeatDetected();
  }
  
  private void onLeadsStateUpdated(c.h.p.d<LeadState, LeadState> paramD)
  {
    a.g("onLeadsStateUpdated: %s", new Object[] { paramD });
    Object localObject = paramD;
    if (paramD == null)
    {
      a.h("onLeadsStateUpdated: No data.  Defaulting to OFF", new Object[0]);
      paramD = LeadState.OFF;
      localObject = new c.h.p.d(paramD, paramD);
    }
    paramD = (LeadState)a;
    Objects.requireNonNull(paramD);
    paramD = (LeadState)paramD;
    localObject = (LeadState)b;
    Objects.requireNonNull(localObject);
    onLeadsStateUpdated(paramD, (LeadState)localObject);
  }
  
  private void onLeadsStateUpdated(LeadState paramLeadState1, LeadState paramLeadState2)
  {
    LeadState localLeadState = LeadState.OFF;
    if ((paramLeadState1 == localLeadState) && (paramLeadState2 == localLeadState))
    {
      a.g("Leads both OFF.  Clearing ECG Grid", new Object[0]);
      clearEcgStrips();
    }
  }
  
  private void onTimeElapsed(Integer paramInteger)
  {
    paramInteger = Integer.valueOf(Util.unboxOr(paramInteger, 0));
    RecordingSettings localRecordingSettings = (RecordingSettings)getRecordViewModel().recordingSettings().getValue();
    if (localRecordingSettings == null)
    {
      a.a("onTimeElapsed: Recording settings not available yet", new Object[0]);
      return;
    }
    int i = maxRecDurationMs;
    int j = paramInteger.intValue();
    txtTimer.setText(formatTimerString((i - j) / 1000));
    progressDrawable.setColor(mContext.getResources().getColor(R.color.kardia_teal));
    progressDrawable.setProgress(paramInteger.intValue(), maxRecDurationMs);
  }
  
  private void removeHudFragment()
  {
    a.a("removeHudFragment", new Object[0]);
    Fragment localFragment = getChildFragmentManager().d0(R.id.frag_ecg_realtime_hud_container);
    if (localFragment != null) {
      getChildFragmentManager().k().o(localFragment).h();
    }
  }
  
  private void replaceHudFragment(Fragment paramFragment)
  {
    a.a("replaceHudFragment: %s", new Object[] { paramFragment });
    getChildFragmentManager().k().p(R.id.frag_ecg_realtime_hud_container, paramFragment).i();
    hideEcgTrace();
  }
  
  private void resetFromBeginning()
  {
    a.d("Resetting from state: %s", new Object[] { getRecordViewModel().state().getValue() });
    resetRecordingUi();
    restartMonitor();
  }
  
  private void resetRecordingUi()
  {
    a.g("resetRecordingUi: selectedDevice: %s", new Object[] { selectedDevice });
    Object localObject1 = progress;
    if (localObject1 != null)
    {
      ((ProgressDialog)localObject1).dismiss();
      progress = null;
    }
    title.setText(getTitleString());
    removeHudFragment();
    enableGearButton(true);
    Object localObject2 = selectedDevice;
    localObject1 = c.d;
    if (localObject2 == localObject1)
    {
      ((TextView)getView().findViewById(R.id.frag_ecg_realtime_first_ecg_keep_fingers)).setText(R.string.ecg_realtime_first_ecg_keep_fingers_sakura);
      ((TextView)getView().findViewById(R.id.frag_ecg_realtime_first_ecg_rec_instructions_howto_start)).setText(R.string.ecg_realtime_help_sakura_3);
      getView().findViewById(R.id.frag_ecg_realtime_first_ecg_rec_instructions_info).setVisibility(8);
      getView().findViewById(R.id.frag_ecg_realtime_first_ecg_rec_instructions_upsell).setVisibility(8);
      getView().findViewById(R.id.frag_ecg_realtime_first_ecg_help_get_kardia).setVisibility(8);
      getView().findViewById(R.id.frag_ecg_realtime_first_ecg_help_need_help).setVisibility(8);
    }
    txtTimer.setVisibility(0);
    imgTimerCheckmark.setVisibility(8);
    localObject2 = (RecordingSettings)getRecordViewModel().recordingSettings().getValue();
    if (localObject2 != null) {
      txtTimer.setText(formatTimerString(maxRecDurationMs / 1000));
    }
    progressDrawable.setProgress(0.0F);
    txtBeatsCount.setText(Util.formatHeartRateString(0.0F));
    hudFragmentContainer.setVisibility(0);
    hudFragmentContainer.animate().alpha(1.0F).setInterpolator(new AccelerateInterpolator()).start();
    panelFirstEcgError.setVisibility(8);
    c localC = selectedDevice;
    localObject2 = c.c;
    if (localC == localObject2)
    {
      leadSelectionContainer.setVisibility(0);
      leadSelection.setVisibility(0);
      int i;
      if (deviceLeads == b.c)
      {
        localObject1 = leadSelection;
        i = R.id.frag_ecg_realtime_six_lead;
      }
      else
      {
        localObject1 = leadSelection;
        i = R.id.frag_ecg_realtime_single_lead;
      }
      ((CompoundButton)((RadioGroup)localObject1).findViewById(i)).setChecked(true);
      localObject1 = bleConnectionState;
      if (localObject1 != null) {
        triangleConnectionUpdated((TriangleBluetoothWrapperClass.BLEConnectionState)((LiveData)localObject1).getValue());
      }
    }
    else if ((localC == c.a) || (localC == c.b) || (localC == localObject1))
    {
      leadSelectionContainer.setVisibility(8);
      leadSelection.setVisibility(8);
    }
    if (selectedDevice == localObject2)
    {
      meterLabel.setText(R.string.record_ekg_battery);
      meterImg.setImageResource(R.drawable.battery_indicator_unknown);
      localObject1 = triangleBattery;
      if (localObject1 != null) {
        updateBatterylevel(((Integer)((LiveData)localObject1).getValue()).intValue());
      }
    }
    else
    {
      meterLabel.setText(R.string.record_ekg_signal);
      updateSignalStrength(Integer.valueOf(0));
    }
    if (deviceLeads == b.c)
    {
      ecgSixLeadView.setVisibility(0);
      ecgSingleLeadView.setVisibility(8);
      ecgGridView.setScale(0.6F);
    }
    else
    {
      ecgSixLeadView.setVisibility(8);
      ecgSingleLeadView.setVisibility(0);
      ecgGridView.setScale(1.0F);
    }
    ecgSingleLeadView.resetECG();
    ecgLead1View.resetECG();
    ecgLead2View.resetECG();
    ecgLead3View.resetECG();
    ecgAvfView.resetECG();
    ecgAvlView.resetECG();
    ecgAvrView.resetECG();
  }
  
  private void restartMonitor()
  {
    a.d("restartMonitor for device %s / leads %s", new Object[] { selectedDevice, deviceLeads });
    Object localObject = selectedDevice;
    if ((localObject != null) && (deviceLeads != null))
    {
      getRecordViewModel().stop();
      int i = recordingMaxDurations;
      int j = recordingMinDurations;
      localObject = new RecordingSettings(MainsFilterFrequency.fromFrequency(mainRecFrequency), selectedFilter, j * 1000, i * 1000, true, voiceEnabled, isReportRawPDF, yAxisScale);
      RecordingConfig localRecordingConfig = new RecordingConfig(selectedDevice, deviceLeads, shouldRestrictScanTriangle());
      getRecordViewModel().start(localRecordingConfig, (RecordingSettings)localObject);
      return;
    }
    a.h("restartMonitorAndUi called without enough data. Device:%s/Leads:%s", new Object[] { localObject, deviceLeads });
  }
  
  private void setLeadSelectionEnabled(boolean paramBoolean)
  {
    RadioGroup localRadioGroup = leadSelection;
    float f;
    if (paramBoolean) {
      f = 1.0F;
    } else {
      f = 0.3F;
    }
    localRadioGroup.setAlpha(f);
    int i = 0;
    while (i < leadSelection.getChildCount())
    {
      leadSelection.getChildAt(i).setEnabled(paramBoolean);
      i += 1;
    }
  }
  
  private boolean shouldRestrictScanTriangle()
  {
    return appPreferences.getOptionSelectedTriangleDevice() != null;
  }
  
  private void showEcgTrace()
  {
    b localB = deviceLeads;
    if (localB == null)
    {
      a.a("showEcgTrace: Called before leads config updated.  Skipping", new Object[0]);
      return;
    }
    if (localB == b.c)
    {
      ecgSixLeadView.setVisibility(0);
      return;
    }
    ecgSingleLeadView.setVisibility(0);
  }
  
  private void showTriangleProgress()
  {
    Object localObject = selectedDevice;
    if (localObject != null)
    {
      if (localObject != c.c) {
        return;
      }
      localObject = progress;
      if ((localObject == null) || (!((ProgressDialog)localObject).isShowing())) {
        progress = Util.showProgress(getActivity(), R.string.connecting_triangle, true);
      }
    }
  }
  
  private void triangleConnectionUpdated(TriangleBluetoothWrapperClass.BLEConnectionState paramBLEConnectionState)
  {
    a.g("triangleConnectionUpdated: %s for Monitor State %s", new Object[] { paramBLEConnectionState, getRecordViewModel().state().getValue() });
    Object localObject = selectedDevice;
    if (localObject != c.c)
    {
      a.h("triangleConnectionUpdated(): state %s for non-triangle device %s", new Object[] { paramBLEConnectionState, localObject });
      return;
    }
    if (paramBLEConnectionState == null)
    {
      a.h("triangleConnectionStateUpdated: Value was null", new Object[0]);
      return;
    }
    if ((paramBLEConnectionState != TriangleBluetoothWrapperClass.BLEConnectionState.CONNECTING) && (paramBLEConnectionState != TriangleBluetoothWrapperClass.BLEConnectionState.CONNECTED))
    {
      if (((paramBLEConnectionState == TriangleBluetoothWrapperClass.BLEConnectionState.CAPTURE_ENABLED) || (paramBLEConnectionState == TriangleBluetoothWrapperClass.BLEConnectionState.DISCONNECTED)) && (getRecordViewModel().state().getValue() != EcgMonitorViewModel.State.EVALUATING))
      {
        dismissProgressDialog();
        return;
      }
      if (paramBLEConnectionState == TriangleBluetoothWrapperClass.BLEConnectionState.ERROR)
      {
        dismissProgressDialog();
        triangleScanFailed = true;
        return;
      }
      if (paramBLEConnectionState == TriangleBluetoothWrapperClass.BLEConnectionState.SCANNING)
      {
        paramBLEConnectionState = new TriangleIntroFragment();
        localObject = (RecordUiConfig)requireArguments().getSerializable("ui_config");
        Bundle localBundle = new Bundle();
        localBundle.putSerializable("ui_config", (Serializable)localObject);
        if (getArguments().getSerializable("com.alivecor.ecg.record.HELP_URLS") != null) {
          localBundle.putSerializable("com.alivecor.ecg.record.HELP_URLS", (RecordingHelpUrls)getArguments().getSerializable("com.alivecor.ecg.record.HELP_URLS"));
        }
        paramBLEConnectionState.setArguments(localBundle);
        paramBLEConnectionState.leadConfigUpdated(deviceLeads);
        replaceHudFragment(paramBLEConnectionState);
      }
    }
    else
    {
      showTriangleProgress();
    }
  }
  
  private void updateBatterylevel(int paramInt)
  {
    if (selectedDevice != c.c) {
      return;
    }
    battery = paramInt;
    ImageView localImageView;
    if (paramInt == -1)
    {
      localImageView = meterImg;
      paramInt = R.drawable.battery_indicator_unknown;
    }
    for (;;)
    {
      localImageView.setImageResource(paramInt);
      return;
      if (paramInt > 66)
      {
        localImageView = meterImg;
        paramInt = R.drawable.battery_indicator_100;
      }
      else if (paramInt > 33)
      {
        localImageView = meterImg;
        paramInt = R.drawable.battery_indicator_66;
      }
      else if (paramInt > 5)
      {
        localImageView = meterImg;
        paramInt = R.drawable.battery_indicator_33;
      }
      else
      {
        localImageView = meterImg;
        paramInt = R.drawable.battery_indicator_5;
      }
    }
  }
  
  protected RecordDependencyComponent getRecordDependencyComponent()
  {
    return recordDependencyComponent;
  }
  
  protected EcgMonitorViewModel getRecordViewModel()
  {
    return (EcgMonitorViewModel)new androidx.lifecycle.f0(requireActivity()).a(EcgMonitorViewModel.class);
  }
  
  public void onActivityCreated(Bundle paramBundle)
  {
    super.onActivityCreated(paramBundle);
    for (;;)
    {
      try
      {
        Object localObject;
        if (getArguments().getString("recording_type") != null) {
          localObject = RecordingType.valueOf(getArguments().getString("recording_type"));
        } else {
          localObject = RecordingType.NORMAL;
        }
        recordingType = ((RecordingType)localObject);
        if (getArguments().getSerializable("com.alivecor.ecg.record.device") != null) {
          localObject = (c)getArguments().getSerializable("com.alivecor.ecg.record.device");
        } else {
          localObject = c.a;
        }
        selectedDevice = ((c)localObject);
        if (paramBundle == null)
        {
          if (getArguments().getSerializable("com.alivecor.ecg.record.EXTRA_LEADS_CONFIG") != null)
          {
            paramBundle = (b)getArguments().getSerializable("com.alivecor.ecg.record.EXTRA_LEADS_CONFIG");
          }
          else
          {
            localObject = appPreferences;
            paramBundle = selectedDevice;
            paramBundle = ((AppPreferences)localObject).getDeviceLead(paramBundle);
          }
        }
        else
        {
          paramBundle = (b)paramBundle.getSerializable("com.alivecor.ecg.record.EXTRA_LEADS_CONFIG");
          deviceLeads = paramBundle;
          if (paramBundle != null) {
            continue;
          }
          localObject = appPreferences;
          paramBundle = selectedDevice;
          continue;
        }
        deviceLeads = paramBundle;
        AppPreferences localAppPreferences;
        if (appPreferences.isSixLeadSupported(selectedDevice, deviceLeads))
        {
          localAppPreferences = appPreferences;
          paramBundle = selectedDevice;
          localObject = deviceLeads;
          localAppPreferences.setDeviceLead(paramBundle, (b)localObject);
        }
        else
        {
          localAppPreferences = appPreferences;
          paramBundle = selectedDevice;
          localObject = b.a;
          continue;
        }
        if (getArguments().getSerializable("com.alivecor.ecg.record.EXTRA_RECORDING_FILTER_TYPE") != null) {
          paramBundle = (Filter)getArguments().getSerializable("com.alivecor.ecg.record.EXTRA_RECORDING_FILTER_TYPE");
        } else {
          paramBundle = Filter.ORIGINAL;
        }
        selectedFilter = paramBundle;
        if (getArguments().getSerializable("com.alivecor.ecg.record.EXTRA_PDF_REPORT_RAW") != null)
        {
          if ((ReportRawPDFType)getArguments().getSerializable("com.alivecor.ecg.record.EXTRA_PDF_REPORT_RAW") != ReportRawPDFType.RAW) {
            break label593;
          }
          bool = true;
          isReportRawPDF = bool;
        }
        else
        {
          isReportRawPDF = false;
        }
        int i;
        if (getArguments().getSerializable("com.alivecor.ecg.record.EXTRA_Y_AXIS_SCALE") != null)
        {
          paramBundle = (YAxisScaleTypes)getArguments().getSerializable("com.alivecor.ecg.record.EXTRA_Y_AXIS_SCALE");
          i = YAxisScaleTypes.getYAxisScale(paramBundle);
        }
        else
        {
          paramBundle = YAxisScaleTypes.Y_AXIS_SCALE_10;
          continue;
        }
        yAxisScale = i;
        if (getArguments().getSerializable("com.alivecor.ecg.record.EXTRA_RECORDING_MAX_DURATIONS") != null) {
          i = getArguments().getInt("com.alivecor.ecg.record.EXTRA_RECORDING_MAX_DURATIONS");
        } else {
          i = Integer.valueOf("30").intValue();
        }
        recordingMaxDurations = i;
        if (getArguments().getSerializable("com.alivecor.ecg.record.EXTRA_RECORDING_MIN_DURATIONS") != null) {
          i = getArguments().getInt("com.alivecor.ecg.record.EXTRA_RECORDING_MIN_DURATIONS");
        } else {
          i = Integer.valueOf("10").intValue();
        }
        recordingMinDurations = i;
        if (getArguments().getSerializable("com.alivecor.ecg.record.EXTRA_RECORDING_FREQUENCY") != null) {
          i = getArguments().getInt("com.alivecor.ecg.record.EXTRA_RECORDING_FREQUENCY");
        } else {
          i = Integer.valueOf(50).intValue();
        }
        mainRecFrequency = i;
        voiceEnabled = getArguments().getBoolean("com.alivecor.ecg.record.EXTRA_VOICE_ENABLED", false);
        helpUrls = null;
        if ((getArguments() != null) && (getArguments().getSerializable("com.alivecor.ecg.record.HELP_URLS") != null)) {
          helpUrls = ((RecordingHelpUrls)getArguments().getSerializable("com.alivecor.ecg.record.HELP_URLS"));
        }
        appPreferences.setSelectedEkgDeviceDebug(selectedDevice);
        resetRecordingUi();
        observeMonitor();
        return;
      }
      catch (NullPointerException paramBundle) {}catch (IllegalArgumentException paramBundle) {}
      a.c(paramBundle, "Missing some required arguments", new Object[0]);
      throw new IllegalArgumentException(paramBundle);
      label593:
      boolean bool = false;
    }
  }
  
  public void onActivityResult(int paramInt1, int paramInt2, Intent paramIntent)
  {
    if (paramInt1 == 300)
    {
      a.d("onActivityResult(): Back from Enabling Location", new Object[0]);
      if (paramInt2 == -1)
      {
        restartMonitor();
        return;
      }
      if (paramInt2 == 0)
      {
        a.h("onActivityResult(): User did not enable location services.", new Object[0]);
        requireActivity().finish();
      }
    }
  }
  
  public boolean onContextItemSelected(MenuItem paramMenuItem)
  {
    if (paramMenuItem.getItemId() == R.id.change_device)
    {
      appPreferences.clearSelectedEkgDevice();
      viewModel.task.setValue(EcgMonitorViewModel.Tasks.ON_CHANGE_DEVICE);
      return true;
    }
    if (paramMenuItem.getItemId() == R.id.record_settings)
    {
      onNavigateToRecordSettings();
      return true;
    }
    return false;
  }
  
  public void onCreateContextMenu(ContextMenu paramContextMenu, View paramView, ContextMenu.ContextMenuInfo paramContextMenuInfo)
  {
    super.onCreateContextMenu(paramContextMenu, paramView, paramContextMenuInfo);
    requireActivity().getMenuInflater().inflate(R.menu.settings_menu, paramContextMenu);
  }
  
  public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
  {
    a.d("onCreateView", new Object[0]);
    mContext = getActivity();
    paramBundle = RecordEkgConfig.get().getRecordDependencyComponent();
    recordDependencyComponent = paramBundle;
    paramBundle.inject(this);
    paramBundle = getRecordViewModel();
    viewModel = paramBundle;
    task.observe(requireActivity(), new p0(this));
    paramLayoutInflater = paramLayoutInflater.inflate(R.layout.frag_record_ekg_realtime, paramViewGroup, false);
    paramViewGroup = paramLayoutInflater.findViewById(R.id.ecg_realtime_actionbar);
    actionBar = paramViewGroup;
    title = ((TextView)paramViewGroup.findViewById(R.id.convert_actionbar_title));
    paramViewGroup = actionBar.findViewById(R.id.convert_actionbar_back);
    ((ImageView)actionBar.findViewById(R.id.convert_actionbar_right_img)).setImageResource(R.drawable.ic_gear_settings_selector);
    paramBundle = actionBar.findViewById(R.id.convert_actionbar_right_btn);
    registerForContextMenu(paramBundle);
    paramBundle.setOnClickListener(new n0(paramBundle));
    paramBundle.setVisibility(0);
    debugView = ((TextView)paramLayoutInflater.findViewById(R.id.debug_view));
    restrictScanTriangle = getArguments().getBoolean("restrict_scan_triangle", true);
    leadSelectionContainer = paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_lead_selection);
    hudFragmentContainer = paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_hud_container);
    panelFirstEcg = paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_first_ecg_panel);
    panelFirstEcgHelp = paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_first_ecg_help);
    panelFirstEcgError = paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_first_ecg_error_scrim);
    btnNeedHelp = paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_first_ecg_help_need_help);
    ecgSingleLeadView = ((EcgRealTimeView)paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_ecgview_single_lead));
    ecgContainer = paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_ecg_panel);
    if ((getArguments() != null) && (getArguments().getBoolean("com.alivecor.ecg.record.EXTRA_HIDE_TRACE", false))) {
      ecgContainer.setVisibility(4);
    }
    ecgSixLeadView = ((ViewGroup)paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_ecgview_six_lead));
    paramBundle = (EcgRealTimeView)paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_ecgview_lead_i);
    ecgLead1View = paramBundle;
    paramBundle.setSignalScale(0.6F);
    paramBundle = (EcgRealTimeView)paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_ecgview_lead_ii);
    ecgLead2View = paramBundle;
    paramBundle.setSignalScale(0.6F);
    paramBundle = (EcgRealTimeView)paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_ecgview_lead_iii);
    ecgLead3View = paramBundle;
    paramBundle.setSignalScale(0.6F);
    paramBundle = (EcgRealTimeView)paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_ecgview_lead_avl);
    ecgAvlView = paramBundle;
    paramBundle.setSignalScale(0.6F);
    paramBundle = (EcgRealTimeView)paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_ecgview_lead_avr);
    ecgAvrView = paramBundle;
    paramBundle.setSignalScale(0.6F);
    paramBundle = (EcgRealTimeView)paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_ecgview_lead_avf);
    ecgAvfView = paramBundle;
    paramBundle.setSignalScale(0.6F);
    paramBundle = (EcgGridView)paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_grid);
    ecgGridView = paramBundle;
    paramBundle.setScale(1.0F);
    header = paramLayoutInflater.findViewById(R.id.ecg_realtime_header);
    timerProgress = paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_timer_progress);
    txtTimer = ((TextView)paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_timer_text));
    imgTimerCheckmark = paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_timer_checkmark);
    imgBeats = paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_beats_img);
    txtBeatsCount = ((TextView)paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_beats_count));
    meterImg = ((ImageView)paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_meter_img));
    meterLabel = ((TextView)paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_meter_lbl));
    timerProgress.setBackground(progressDrawable);
    paramBundle = (RadioGroup)paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_leads);
    leadSelection = paramBundle;
    paramBundle.setOnCheckedChangeListener(new j0(this));
    paramBundle = new Util.ProgressDrawableCircle(mContext.getResources().getColor(R.color.kardia_gray_light), 100.0F).setProgress(0.0F);
    progressDrawable = paramBundle;
    timerProgress.setBackgroundDrawable(paramBundle);
    title.setText(getTitleString());
    paramViewGroup.setOnClickListener(new k0(this));
    btnNeedHelp.setOnClickListener(new r0(this));
    paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_first_ecg_progress).setBackground(new Drawable()
    {
      Drawable tile = getResources().getDrawable(R.drawable.img_bkg_progress_first_ecg_48x24);
      
      public void draw(Canvas paramAnonymousCanvas)
      {
        int j = tile.getIntrinsicWidth();
        int k = getBounds().width();
        double d1 = j;
        double d2 = System.currentTimeMillis() % 1000L / 1000.0D;
        int m = getBoundsleft - (int)(d1 * d2);
        int i = 0;
        for (;;)
        {
          int n = i * j + m;
          if (n >= k) {
            break;
          }
          Drawable localDrawable = tile;
          int i1 = getBoundstop;
          i += 1;
          localDrawable.setBounds(n, i1, i * j + m, getBoundsbottom);
          tile.draw(paramAnonymousCanvas);
        }
        invalidateSelf();
      }
      
      public int getOpacity()
      {
        return -3;
      }
      
      public void setAlpha(int paramAnonymousInt) {}
      
      public void setColorFilter(ColorFilter paramAnonymousColorFilter) {}
    });
    paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_first_ecg_help_get_kardia).setOnClickListener(new o0(this));
    paramViewGroup = (TextView)paramLayoutInflater.findViewById(R.id.frag_ecg_realtime_audio_stats);
    paramViewGroup.setVisibility(8);
    paramViewGroup.setEnabled(false);
    return paramLayoutInflater;
  }
  
  public void onDetach()
  {
    super.onDetach();
  }
  
  protected void onLeadConfigUpdated(b paramB) {}
  
  protected void onNavigateToRecordSettings() {}
  
  public void onPause()
  {
    getActivity().getWindow().clearFlags(128);
    super.onPause();
  }
  
  public void onResume()
  {
    super.onResume();
    unbindHandler.removeCallbacksAndMessages(null);
    m localM = getActivity();
    Util.setStatusBarColor(localM.getWindow(), mContext.getResources().getColor(R.color.gray_teal_statusbar));
    localM.getWindow().addFlags(128);
    if (isMonitorIdle())
    {
      a.g("onResume(): Monitor idle.  Starting.", new Object[0]);
      restartMonitor();
    }
  }
  
  public void onSaveInstanceState(Bundle paramBundle)
  {
    super.onSaveInstanceState(paramBundle);
    paramBundle.putSerializable("com.alivecor.ecg.record.EXTRA_LEADS_CONFIG", deviceLeads);
  }
  
  public void onStart()
  {
    super.onStart();
    getActivity();
    a.d("onStart(): Ready to record", new Object[0]);
    panelFirstEcg.setVisibility(8);
    panelFirstEcgHelp.setVisibility(8);
    hudFragmentContainer.setVisibility(0);
    hudFragmentContainer.setAlpha(1.0F);
    bluetoothStateReciever = createBluetoothStateReceiver();
    getContext().registerReceiver(bluetoothStateReciever, new IntentFilter("android.bluetooth.adapter.action.STATE_CHANGED"));
  }
  
  public void onStop()
  {
    if (bluetoothStateReciever != null) {
      getContext().unregisterReceiver(bluetoothStateReciever);
    }
    super.onStop();
  }
  
  protected void playCompletedAnimation(final Runnable paramRunnable)
  {
    txtTimer.setVisibility(4);
    imgTimerCheckmark.setVisibility(0);
    imgTimerCheckmark.setScaleX(0.33F);
    imgTimerCheckmark.setScaleY(0.33F);
    imgTimerCheckmark.animate().scaleX(1.0F).scaleY(1.0F).setDuration(999L).setListener(new Animator.AnimatorListener()
    {
      public void onAnimationCancel(Animator paramAnonymousAnimator) {}
      
      public void onAnimationEnd(Animator paramAnonymousAnimator)
      {
        paramAnonymousAnimator = paramRunnable;
        if (paramAnonymousAnimator != null) {
          paramAnonymousAnimator.run();
        }
      }
      
      public void onAnimationRepeat(Animator paramAnonymousAnimator) {}
      
      public void onAnimationStart(Animator paramAnonymousAnimator) {}
    }).setInterpolator(new DecelerateInterpolator()).start();
  }
  
  protected void recordSettingsUpdated(RecordingSettings paramRecordingSettings)
  {
    if ((paramRecordingSettings != null) && (getRecordViewModel().state().getValue() != EcgMonitorViewModel.State.CAPTURING)) {
      txtTimer.setText(formatTimerString(maxRecDurationMs / 1000));
    }
  }
  
  void requestEnableLocation()
  {
    Object localObject = LocationRequest.create();
    ((LocationRequest)localObject).setInterval(10000L);
    ((LocationRequest)localObject).setFastestInterval(5000L);
    ((LocationRequest)localObject).setPriority(100);
    localObject = new LocationSettingsRequest.Builder().addLocationRequest((LocationRequest)localObject);
    ((LocationSettingsRequest.Builder)localObject).setAlwaysShow(true);
    new SettingsClient(requireActivity()).checkLocationSettings(((LocationSettingsRequest.Builder)localObject).build()).addOnCompleteListener(new i0(this));
  }
  
  protected void showSaveEcgProgress()
  {
    ProgressDialog localProgressDialog = progress;
    if ((localProgressDialog != null) && (localProgressDialog.isShowing()))
    {
      a.g("showSaveEcgProgress: Already showing.  Skipping", new Object[0]);
      return;
    }
    progress = Util.showProgress(mContext, R.string.process_dialog_text);
    hudFragmentContainer.animate().alpha(0.0F).start();
  }
  
  protected void updateSignalStrength(Integer paramInteger)
  {
    if (selectedDevice == c.c) {
      return;
    }
    paramInteger = Integer.valueOf(Util.unboxOr(paramInteger, 0));
    int i;
    if (paramInteger.intValue() > 50)
    {
      meterImg.setImageResource(R.drawable.signal_strength_full);
      paramInteger = meterLabel;
      i = R.string.ecg_realtime_signal_strong;
    }
    for (;;)
    {
      paramInteger.setText(i);
      return;
      if (paramInteger.intValue() > 20)
      {
        meterImg.setImageResource(R.drawable.signal_strength_medium);
        paramInteger = meterLabel;
        i = R.string.ecg_realtime_signal_medium;
      }
      else if (paramInteger.intValue() > 0)
      {
        meterImg.setImageResource(R.drawable.signal_strength_low);
        paramInteger = meterLabel;
        i = R.string.ecg_realtime_signal_weak;
      }
      else
      {
        meterImg.setImageResource(R.drawable.signal_strength_none);
        paramInteger = meterLabel;
        i = R.string.ecg_realtime_signal_no;
      }
    }
  }
}
