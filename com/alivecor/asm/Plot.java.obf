package com.alivecor.ai;

import android.util.Log;
import java.io.Serializable;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import k.a.a.f;
import org.joda.time.format.a;

public class s
  implements Serializable
{
  public static final float a = 0.0F;
  private static final String b = s.class.getSimpleName();
  public final String c;
  public final String d;
  public final String e;
  public final com.alivecor.ecg.core.model.b f;
  public final float g;
  public final o h;
  public final int i;
  public final k.a.a.b j;
  public final boolean k;
  private final Map<Class<? extends r>, r<?>> l;
  
  private s(String paramString1, String paramString2, o paramO, String paramString3, com.alivecor.ecg.core.model.b paramB, k.a.a.b paramB1, float paramFloat, int paramInt, boolean paramBoolean, Collection<r<?>> paramCollection)
  {
    c = paramString1;
    d = paramString2;
    e = paramString3;
    f = paramB;
    g = paramFloat;
    i = paramInt;
    j = paramB1;
    h = paramO;
    k = paramBoolean;
    paramString1 = new HashMap();
    l = paramString1;
    a(paramString1, paramCollection);
  }
  
  /* Error */
  public static s a(String paramString1, String paramString2, o paramO, float paramFloat, boolean paramBoolean, Collection<r<?>> paramCollection)
    throws java.io.IOException
  {
    // Byte code:
    //   0: getstatic 38	com/alivecor/ai/s:b	Ljava/lang/String;
    //   3: astore 11
    //   5: aload 11
    //   7: ldc 76
    //   9: invokestatic 81	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   12: pop
    //   13: new 83	com/alivecor/ecg/core/EcgFile
    //   16: dup
    //   17: invokespecial 84	com/alivecor/ecg/core/EcgFile:<init>	()V
    //   20: astore 9
    //   22: new 83	com/alivecor/ecg/core/EcgFile
    //   25: dup
    //   26: invokespecial 84	com/alivecor/ecg/core/EcgFile:<init>	()V
    //   29: astore 10
    //   31: aload 9
    //   33: new 86	java/io/File
    //   36: dup
    //   37: aload_0
    //   38: invokespecial 89	java/io/File:<init>	(Ljava/lang/String;)V
    //   41: invokevirtual 93	com/alivecor/ecg/core/EcgFile:open	(Ljava/io/File;)Z
    //   44: istore 7
    //   46: aload 10
    //   48: new 86	java/io/File
    //   51: dup
    //   52: aload_1
    //   53: invokespecial 89	java/io/File:<init>	(Ljava/lang/String;)V
    //   56: invokevirtual 93	com/alivecor/ecg/core/EcgFile:open	(Ljava/io/File;)Z
    //   59: istore 8
    //   61: iload 7
    //   63: ifeq +116 -> 179
    //   66: iload 8
    //   68: ifeq +111 -> 179
    //   71: aload 9
    //   73: getfield 97	com/alivecor/ecg/core/EcgFile:mAliveInfo	Lcom/alivecor/ecg/core/EcgFile$AliveFileInfo;
    //   76: getfield 102	com/alivecor/ecg/core/EcgFile$AliveFileInfo:recordingUUID	Ljava/lang/String;
    //   79: astore_1
    //   80: aload 9
    //   82: getstatic 108	com/alivecor/ecg/core/EcgFile$Lead:LEAD_2	Lcom/alivecor/ecg/core/EcgFile$Lead;
    //   85: invokevirtual 112	com/alivecor/ecg/core/EcgFile:samplesForLead	(Lcom/alivecor/ecg/core/EcgFile$Lead;)J
    //   88: lconst_0
    //   89: lcmp
    //   90: ifne +10 -> 100
    //   93: getstatic 116	com/alivecor/ecg/core/model/b:a	Lcom/alivecor/ecg/core/model/b;
    //   96: astore_0
    //   97: goto +149 -> 246
    //   100: getstatic 118	com/alivecor/ecg/core/model/b:c	Lcom/alivecor/ecg/core/model/b;
    //   103: astore_0
    //   104: goto +142 -> 246
    //   107: aload 9
    //   109: getstatic 121	com/alivecor/ecg/core/EcgFile$Lead:LEAD_1	Lcom/alivecor/ecg/core/EcgFile$Lead;
    //   112: invokevirtual 112	com/alivecor/ecg/core/EcgFile:samplesForLead	(Lcom/alivecor/ecg/core/EcgFile$Lead;)J
    //   115: l2i
    //   116: istore 6
    //   118: invokestatic 127	k/a/a/b:H	()Lk/a/a/b;
    //   121: astore 12
    //   123: aload 11
    //   125: ldc -127
    //   127: invokestatic 81	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;)I
    //   130: pop
    //   131: new 2	com/alivecor/ai/s
    //   134: dup
    //   135: aload 9
    //   137: getfield 133	com/alivecor/ecg/core/EcgFile:mFile	Ljava/io/File;
    //   140: invokevirtual 136	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   143: aload 10
    //   145: getfield 133	com/alivecor/ecg/core/EcgFile:mFile	Ljava/io/File;
    //   148: invokevirtual 136	java/io/File:getAbsolutePath	()Ljava/lang/String;
    //   151: aload_2
    //   152: aload_1
    //   153: aload_0
    //   154: aload 12
    //   156: fload_3
    //   157: iload 6
    //   159: iload 4
    //   161: aload 5
    //   163: invokespecial 138	com/alivecor/ai/s:<init>	(Ljava/lang/String;Ljava/lang/String;Lcom/alivecor/ai/o;Ljava/lang/String;Lcom/alivecor/ecg/core/model/b;Lk/a/a/b;FIZLjava/util/Collection;)V
    //   166: astore_0
    //   167: aload 10
    //   169: invokevirtual 141	com/alivecor/ecg/core/EcgFile:close	()V
    //   172: aload 9
    //   174: invokevirtual 141	com/alivecor/ecg/core/EcgFile:close	()V
    //   177: aload_0
    //   178: areturn
    //   179: new 74	java/io/IOException
    //   182: dup
    //   183: ldc -113
    //   185: iconst_2
    //   186: anewarray 4	java/lang/Object
    //   189: dup
    //   190: iconst_0
    //   191: iload 7
    //   193: invokestatic 149	java/lang/Boolean:valueOf	(Z)Ljava/lang/Boolean;
    //   196: aastore
    //   197: dup
    //   198: iconst_1
    //   199: iload 8
    //   201: invokestatic 149	java/lang/Boolean:valueOf	(Z)Ljava/lang/Boolean;
    //   204: aastore
    //   205: invokestatic 155	java/lang/String:format	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   208: invokespecial 156	java/io/IOException:<init>	(Ljava/lang/String;)V
    //   211: athrow
    //   212: astore_0
    //   213: aload 10
    //   215: invokevirtual 141	com/alivecor/ecg/core/EcgFile:close	()V
    //   218: goto +9 -> 227
    //   221: astore_1
    //   222: aload_0
    //   223: aload_1
    //   224: invokevirtual 162	java/lang/Throwable:addSuppressed	(Ljava/lang/Throwable;)V
    //   227: aload_0
    //   228: athrow
    //   229: astore_0
    //   230: aload 9
    //   232: invokevirtual 141	com/alivecor/ecg/core/EcgFile:close	()V
    //   235: goto +9 -> 244
    //   238: astore_1
    //   239: aload_0
    //   240: aload_1
    //   241: invokevirtual 162	java/lang/Throwable:addSuppressed	(Ljava/lang/Throwable;)V
    //   244: aload_0
    //   245: athrow
    //   246: goto -139 -> 107
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	249	0	paramString1	String
    //   0	249	1	paramString2	String
    //   0	249	2	paramO	o
    //   0	249	3	paramFloat	float
    //   0	249	4	paramBoolean	boolean
    //   0	249	5	paramCollection	Collection<r<?>>
    //   116	42	6	m	int
    //   44	148	7	bool1	boolean
    //   59	141	8	bool2	boolean
    //   20	211	9	localEcgFile1	com.alivecor.ecg.core.EcgFile
    //   29	185	10	localEcgFile2	com.alivecor.ecg.core.EcgFile
    //   3	121	11	str	String
    //   121	34	12	localB	k.a.a.b
    // Exception table:
    //   from	to	target	type
    //   31	61	212	finally
    //   71	97	212	finally
    //   100	104	212	finally
    //   107	167	212	finally
    //   179	212	212	finally
    //   213	218	221	finally
    //   22	31	229	finally
    //   167	172	229	finally
    //   222	227	229	finally
    //   227	229	229	finally
    //   230	235	238	finally
  }
  
  private static k.a.a.b a(String paramString)
  {
    Log.e(b, "Inside toDateTime");
    Object localObject2 = paramString.replace("Z", "+00:00");
    try
    {
      localObject1 = ((String)localObject2).substring(23);
      if (((String)localObject2).contains(".")) {
        paramString = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";
      } else {
        paramString = "yyyy-MM-dd'T'HH:mm:ssZ";
      }
      paramString = a.d(paramString).p(Locale.US).e((String)localObject2);
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("GMT");
      ((StringBuilder)localObject2).append((String)localObject1);
      paramString.Q(f.m(TimeZone.getTimeZone(((StringBuilder)localObject2).toString())));
      return paramString;
    }
    catch (IndexOutOfBoundsException localIndexOutOfBoundsException)
    {
      Object localObject1;
      for (;;) {}
    }
    localObject1 = new StringBuilder();
    ((StringBuilder)localObject1).append("Failed to parse string: ");
    ((StringBuilder)localObject1).append(paramString);
    throw new IllegalArgumentException(((StringBuilder)localObject1).toString());
  }
  
  private void a(Map<Class<? extends r>, r<?>> paramMap, Collection<r<?>> paramCollection)
  {
    if (paramCollection != null)
    {
      paramCollection = paramCollection.iterator();
      while (paramCollection.hasNext())
      {
        r localR = (r)paramCollection.next();
        paramMap.put(localR.getClass(), localR);
      }
    }
  }
  
  public <Data extends r<?>> Data a(Class<Data> paramClass)
  {
    if (l.containsKey(paramClass)) {
      return (r)l.get(paramClass);
    }
    return null;
  }
  
  public Collection<r<?>> a()
  {
    return l.values();
  }
  
  public void a(r<?> paramR)
  {
    l.put(paramR.getClass(), paramR);
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("EvaluationResult{rawAtcPath='");
    localStringBuilder.append(c);
    localStringBuilder.append('\'');
    localStringBuilder.append(", enhancedAtcPath='");
    localStringBuilder.append(d);
    localStringBuilder.append('\'');
    localStringBuilder.append(", recordingUuid='");
    localStringBuilder.append(e);
    localStringBuilder.append('\'');
    localStringBuilder.append(", leadsConfig=");
    localStringBuilder.append(f);
    localStringBuilder.append(", averageHeartRate=");
    localStringBuilder.append(g);
    localStringBuilder.append(", finalDetermination=");
    localStringBuilder.append(h);
    localStringBuilder.append(", lead1SampleCount=");
    localStringBuilder.append(i);
    localStringBuilder.append(", recordingDate=");
    localStringBuilder.append(j);
    localStringBuilder.append(", evaluationData=");
    localStringBuilder.append(l);
    localStringBuilder.append('}');
    return localStringBuilder.toString();
  }
}
