package com.google.android.datatransport.runtime.scheduling.jobscheduling;

import android.app.job.JobInfo.Builder;
import com.google.android.datatransport.Priority;
import com.google.android.datatransport.h.a0.a;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

public abstract class SchedulerConfig
{
  public SchedulerConfig() {}
  
  private long a(int paramInt, long paramLong)
  {
    paramInt -= 1;
    long l;
    if (paramLong > 1L) {
      l = paramLong;
    } else {
      l = 2L;
    }
    double d = Math.max(1.0D, Math.log(10000.0D) / Math.log(l * paramInt));
    return (Math.pow(3.0D, paramInt) * paramLong * d);
  }
  
  public static a b()
  {
    return new a();
  }
  
  static SchedulerConfig d(a paramA, Map<Priority, b> paramMap)
  {
    return new q(paramA, paramMap);
  }
  
  public static SchedulerConfig f(a paramA)
  {
    return b().a(Priority.b, b.a().b(30000L).d(86400000L).a()).a(Priority.d, b.a().b(1000L).d(86400000L).a()).a(Priority.c, b.a().b(86400000L).d(86400000L).c(i(new Flag[] { Flag.c })).a()).c(paramA).b();
  }
  
  private static <T> Set<T> i(T... paramVarArgs)
  {
    return Collections.unmodifiableSet(new HashSet(Arrays.asList(paramVarArgs)));
  }
  
  private void j(JobInfo.Builder paramBuilder, Set<Flag> paramSet)
  {
    if (paramSet.contains(Flag.b)) {
      paramBuilder.setRequiredNetworkType(2);
    } else {
      paramBuilder.setRequiredNetworkType(1);
    }
    if (paramSet.contains(Flag.d)) {
      paramBuilder.setRequiresCharging(true);
    }
    if (paramSet.contains(Flag.c)) {
      paramBuilder.setRequiresDeviceIdle(true);
    }
  }
  
  public JobInfo.Builder c(JobInfo.Builder paramBuilder, Priority paramPriority, long paramLong, int paramInt)
  {
    paramBuilder.setMinimumLatency(g(paramPriority, paramLong, paramInt));
    j(paramBuilder, ((b)h().get(paramPriority)).c());
    return paramBuilder;
  }
  
  abstract a e();
  
  public long g(Priority paramPriority, long paramLong, int paramInt)
  {
    long l = e().a();
    paramPriority = (b)h().get(paramPriority);
    return Math.min(Math.max(a(paramInt, paramPriority.b()), paramLong - l), paramPriority.d());
  }
  
  abstract Map<Priority, b> h();
  
  public static enum Flag
  {
    static
    {
      Flag localFlag1 = new Flag("NETWORK_UNMETERED", 0);
      b = localFlag1;
      Flag localFlag2 = new Flag("DEVICE_IDLE", 1);
      c = localFlag2;
      Flag localFlag3 = new Flag("DEVICE_CHARGING", 2);
      d = localFlag3;
      e = new Flag[] { localFlag1, localFlag2, localFlag3 };
    }
  }
  
  public static class a
  {
    private a a;
    private Map<Priority, SchedulerConfig.b> b = new HashMap();
    
    public a() {}
    
    public a a(Priority paramPriority, SchedulerConfig.b paramB)
    {
      b.put(paramPriority, paramB);
      return this;
    }
    
    public SchedulerConfig b()
    {
      Objects.requireNonNull(a, "missing required property: clock");
      if (b.keySet().size() >= Priority.values().length)
      {
        Map localMap = b;
        b = new HashMap();
        return SchedulerConfig.d(a, localMap);
      }
      throw new IllegalStateException("Not all priorities have been configured");
    }
    
    public a c(a paramA)
    {
      a = paramA;
      return this;
    }
  }
  
  public static abstract class b
  {
    public b() {}
    
    public static a a()
    {
      return new r.b().c(Collections.emptySet());
    }
    
    abstract long b();
    
    abstract Set<SchedulerConfig.Flag> c();
    
    abstract long d();
    
    public static abstract class a
    {
      public a() {}
      
      public abstract SchedulerConfig.b a();
      
      public abstract a b(long paramLong);
      
      public abstract a c(Set<SchedulerConfig.Flag> paramSet);
      
      public abstract a d(long paramLong);
    }
  }
}
