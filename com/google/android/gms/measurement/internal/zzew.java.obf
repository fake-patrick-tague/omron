package com.google.android.gms.measurement.internal;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.VisibleForTesting;

final class zzew
  extends BroadcastReceiver
{
  @VisibleForTesting
  static final String zza = zzew.class.getName();
  private final zzkz zzb;
  private boolean zzc;
  private boolean zzd;
  
  zzew(zzkz paramZzkz)
  {
    Preconditions.checkNotNull(paramZzkz);
    zzb = paramZzkz;
  }
  
  public final void onReceive(Context paramContext, Intent paramIntent)
  {
    zzb.zzB();
    paramContext = paramIntent.getAction();
    zzb.zzay().zzj().zzb("NetworkBroadcastReceiver received action", paramContext);
    if ("android.net.conn.CONNECTIVITY_CHANGE".equals(paramContext))
    {
      boolean bool = zzb.zzl().zza();
      if (zzd != bool)
      {
        zzd = bool;
        zzb.zzaz().zzp(new zzev(this, bool));
      }
      return;
    }
    zzb.zzay().zzk().zzb("NetworkBroadcastReceiver received unknown action", paramContext);
  }
  
  public final void zzb()
  {
    zzb.zzB();
    zzb.zzaz().zzg();
    if (zzc) {
      return;
    }
    zzb.zzau().registerReceiver(this, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));
    zzd = zzb.zzl().zza();
    zzb.zzay().zzj().zzb("Registering connectivity change receiver. Network connected", Boolean.valueOf(zzd));
    zzc = true;
  }
  
  public final void zzc()
  {
    zzb.zzB();
    zzb.zzaz().zzg();
    zzb.zzaz().zzg();
    if (zzc)
    {
      zzb.zzay().zzj().zza("Unregistering connectivity change receiver");
      zzc = false;
      zzd = false;
      Context localContext = zzb.zzau();
      try
      {
        localContext.unregisterReceiver(this);
        return;
      }
      catch (IllegalArgumentException localIllegalArgumentException)
      {
        zzb.zzay().zzd().zzb("Failed to unregister the network broadcast receiver", localIllegalArgumentException);
      }
    }
  }
}
