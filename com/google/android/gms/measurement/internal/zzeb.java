package com.google.android.gms.measurement.internal;

import android.content.Context;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.measurement.zzhe;
import com.google.android.gms.internal.measurement.zzhp;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

@VisibleForTesting
public final class zzeb
{
  public static final zzea actions;
  public static final zzea album;
  public static final zzea albums;
  public static final zzea all;
  public static final zzea body;
  public static final zzea cache;
  public static final zzea context;
  public static final zzea count;
  public static final zzea current;
  public static final zzea data;
  public static final zzea dialog;
  public static final zzea error;
  public static final zzea errors;
  public static final zzea fields;
  public static final zzea filename;
  public static final zzea folder;
  public static final zzea g;
  public static final zzea head;
  public static final zzea id;
  public static final zzea images;
  public static final zzea instance;
  public static final zzea items;
  public static final zzea key;
  public static final zzea label;
  public static final zzea labels;
  public static final zzea list;
  public static final zzea location;
  public static final zzea name;
  public static final zzea names;
  public static final zzea notes;
  public static final zzea o;
  public static final zzea offset;
  public static final zzea owner;
  public static final zzea params;
  public static final zzea password;
  public static final zzea path;
  public static final zzea pid;
  public static final zzea pool;
  public static final zzea positions;
  public static final zzea preferences;
  public static final zzea query;
  public static final zzea result;
  public static final zzea stop;
  public static final zzea table;
  public static final zzea time;
  public static final zzea timestamp;
  public static final zzea track;
  public static final zzea tracks;
  public static final zzea user;
  public static final zzea values;
  public static final zzea version;
  public static final zzea year;
  public static final zzea zzaA;
  public static final zzea zzaB;
  private static final List zzaC = Collections.synchronizedList(new ArrayList());
  private static final Set zzaD = Collections.synchronizedSet(new HashSet());
  public static final zzea zzaa;
  public static final zzea zzab;
  public static final zzea zzac;
  public static final zzea zzad;
  public static final zzea zzae;
  public static final zzea zzaf;
  public static final zzea zzag;
  public static final zzea zzah;
  public static final zzea zzai;
  public static final zzea zzaj;
  public static final zzea zzak;
  public static final zzea zzal;
  public static final zzea zzam;
  public static final zzea zzan;
  public static final zzea zzao;
  public static final zzea zzap;
  public static final zzea zzaq;
  public static final zzea zzar;
  public static final zzea zzas;
  public static final zzea zzat;
  public static final zzea zzau;
  public static final zzea zzav;
  public static final zzea zzaw;
  public static final zzea zzax;
  public static final zzea zzay;
  public static final zzea zzaz;
  
  static
  {
    Object localObject3 = Long.valueOf(10000L);
    notes = register("measurement.ad_id_cache_time", localObject3, localObject3, zzbj.PROTO_SFTP);
    Object localObject2 = Long.valueOf(86400000L);
    actions = register("measurement.monitoring.sample_period_millis", localObject2, localObject2, zzbb.PROTO_FTP);
    Object localObject4 = Long.valueOf(3600000L);
    images = register("measurement.config.cache_time", localObject2, localObject4, zzbn.PROTO_HTTP);
    current = register("measurement.config.url_scheme", "https", "https", zzbz.PROTO_BUNDLE);
    path = register("measurement.config.url_authority", "app-measurement.com", "app-measurement.com", zzcl.PROTO_S3);
    Object localObject1 = Integer.valueOf(100);
    user = register("measurement.upload.max_bundles", localObject1, localObject1, zzcx.PROTO_GIT);
    Object localObject5 = Integer.valueOf(65536);
    password = register("measurement.upload.max_batch_size", localObject5, localObject5, zzdj.PROTO_SFTP);
    key = register("measurement.upload.max_bundle_size", localObject5, localObject5, zzdr.PROTO_FTP);
    Integer localInteger = Integer.valueOf(1000);
    time = register("measurement.upload.max_events_per_bundle", localInteger, localInteger, zzds.PROTO_HTTP);
    localObject5 = Integer.valueOf(100000);
    stop = register("measurement.upload.max_events_per_day", localObject5, localObject5, zzdt.PROTO_BUNDLE);
    result = register("measurement.upload.max_error_events_per_day", localInteger, localInteger, zzbu.PROTO_S3);
    localInteger = Integer.valueOf(50000);
    count = register("measurement.upload.max_public_events_per_day", localInteger, localInteger, zzcf.PROTO_GIT);
    localInteger = Integer.valueOf(10000);
    head = register("measurement.upload.max_conversions_per_day", localInteger, localInteger, zzcq.PROTO_SFTP);
    localInteger = Integer.valueOf(10);
    pid = register("measurement.upload.max_realtime_events_per_day", localInteger, localInteger, zzdb.PROTO_FTP);
    timestamp = register("measurement.store.max_stored_events_per_app", localObject5, localObject5, zzdm.PROTO_HTTP);
    id = register("measurement.upload.url", "https://app-measurement.com/a", "https://app-measurement.com/a", zzdu.PROTO_BUNDLE);
    localObject5 = Long.valueOf(43200000L);
    label = register("measurement.upload.backoff_period", localObject5, localObject5, zzdv.PROTO_S3);
    items = register("measurement.upload.window_interval", localObject4, localObject4, zzdw.PROTO_GIT);
    values = register("measurement.upload.interval", localObject4, localObject4, zzaz.PROTO_SFTP);
    context = register("measurement.upload.realtime_upload_interval", localObject3, localObject3, zzba.PROTO_FTP);
    localObject3 = Long.valueOf(1000L);
    params = register("measurement.upload.debug_upload_interval", localObject3, localObject3, zzbc.PROTO_HTTP);
    localObject3 = Long.valueOf(500L);
    owner = register("measurement.upload.minimum_delay", localObject3, localObject3, zzbd.PROTO_BUNDLE);
    localObject3 = Long.valueOf(60000L);
    pool = register("measurement.alarm_manager.minimum_interval", localObject3, localObject3, zzbe.PROTO_S3);
    table = register("measurement.upload.stale_data_deletion_interval", localObject2, localObject2, zzbf.PROTO_GIT);
    localObject2 = Long.valueOf(604800000L);
    fields = register("measurement.upload.refresh_blacklisted_config_interval", localObject2, localObject2, zzbg.PROTO_SFTP);
    localObject3 = Long.valueOf(15000L);
    labels = register("measurement.upload.initial_upload_delay_time", localObject3, localObject3, zzbh.PROTO_FTP);
    localObject3 = Long.valueOf(1800000L);
    cache = register("measurement.upload.retry_time", localObject3, localObject3, zzbi.PROTO_HTTP);
    localObject3 = Integer.valueOf(6);
    error = register("measurement.upload.retry_count", localObject3, localObject3, zzbk.PROTO_BUNDLE);
    localObject3 = Long.valueOf(2419200000L);
    instance = register("measurement.upload.max_queue_time", localObject3, localObject3, zzbl.PROTO_S3);
    localObject3 = Integer.valueOf(4);
    preferences = register("measurement.lifetimevalue.max_currency_tracked", localObject3, localObject3, zzbm.PROTO_GIT);
    localObject3 = Integer.valueOf(200);
    dialog = register("measurement.audience.filter_result_max_count", localObject3, localObject3, zzbo.PROTO_SFTP);
    localObject3 = Integer.valueOf(25);
    filename = register("measurement.upload.max_public_user_properties", localObject3, localObject3, null);
    localObject4 = Integer.valueOf(500);
    track = register("measurement.upload.max_event_name_cardinality", localObject4, localObject4, null);
    tracks = register("measurement.upload.max_public_event_params", localObject3, localObject3, null);
    localObject3 = Long.valueOf(5000L);
    albums = register("measurement.service_client.idle_disconnect_millis", localObject3, localObject3, zzbp.PROTO_FTP);
    localObject3 = Boolean.FALSE;
    album = register("measurement.test.boolean_flag", localObject3, localObject3, zzbq.class$java$lang$Boolean);
    year = register("measurement.test.string_flag", "---", "---", zzbr.class$java$lang$Character);
    localObject4 = Long.valueOf(-1L);
    folder = register("measurement.test.long_flag", localObject4, localObject4, zzbs.class$java$util$Date);
    localObject4 = Integer.valueOf(-2);
    all = register("measurement.test.int_flag", localObject4, localObject4, zzbt.class$java$util$Date);
    localObject4 = Double.valueOf(-3.0D);
    query = register("measurement.test.double_flag", localObject4, localObject4, zzbv.class$java$util$Date);
    localObject4 = Integer.valueOf(50);
    body = register("measurement.experiment.max_ids", localObject4, localObject4, zzbw.class$java$util$Date);
    location = register("measurement.max_bundles_per_iteration", localObject1, localObject1, zzbx.class$java$util$Date);
    version = register("measurement.sdk.attribution.cache.ttl", localObject2, localObject2, zzby.class$java$util$Date);
    localObject1 = Long.valueOf(7200000L);
    positions = register("measurement.redaction.app_instance_id.ttl", localObject1, localObject1, zzca.class$java$util$Date);
    localObject1 = Boolean.TRUE;
    errors = register("measurement.collection.log_event_and_bundle_v2", localObject1, localObject1, zzcb.PROTO_FTP);
    list = register("measurement.quality.checksum", localObject3, localObject3, null);
    offset = register("measurement.audience.use_bundle_end_timestamp_for_non_sequence_property_filters", localObject3, localObject3, zzcc.PROTO_HTTP);
    data = register("measurement.audience.refresh_event_count_filters_timestamp", localObject3, localObject3, zzcd.PROTO_SSH);
    names = register("measurement.audience.use_bundle_timestamp_for_event_count_filters", localObject3, localObject3, zzce.PROTO_FTP);
    name = register("measurement.sdk.collection.retrieve_deeplink_from_bow_2", localObject1, localObject1, zzcg.PROTO_HTTP);
    o = register("measurement.sdk.collection.last_deep_link_referrer_campaign2", localObject3, localObject3, zzch.PROTO_SSH);
    g = register("measurement.lifecycle.app_in_background_parameter", localObject3, localObject3, zzci.PROTO_FTP);
    zzaa = register("measurement.integration.disable_firebase_instance_id", localObject3, localObject3, zzcj.PROTO_HTTP);
    zzab = register("measurement.collection.service.update_with_analytics_fix", localObject3, localObject3, zzck.PROTO_SSH);
    zzac = register("measurement.client.firebase_feature_rollout.v1.enable", localObject1, localObject1, zzcm.PROTO_FTP);
    zzad = register("measurement.client.sessions.check_on_reset_and_enable2", localObject1, localObject1, zzcn.PROTO_HTTP);
    zzae = register("measurement.collection.synthetic_data_mitigation", localObject3, localObject3, zzco.PROTO_SSH);
    localObject2 = Integer.valueOf(203600);
    zzaf = register("measurement.service.storage_consent_support_version", localObject2, localObject2, zzcp.PROTO_FTP);
    zzag = register("measurement.client.click_identifier_control.dev", localObject3, localObject3, zzcr.PROTO_HTTP);
    zzah = register("measurement.service.click_identifier_control", localObject3, localObject3, zzcs.PROTO_SSH);
    zzai = register("measurement.service.store_null_safelist", localObject1, localObject1, zzct.PROTO_FTP);
    zzaj = register("measurement.service.store_safelist", localObject1, localObject1, zzcu.PROTO_HTTP);
    zzak = register("measurement.redaction.no_aiid_in_config_request", localObject1, localObject1, zzcv.PROTO_SSH);
    zzal = register("measurement.redaction.config_redacted_fields", localObject1, localObject1, zzcw.PROTO_FTP);
    zzam = register("measurement.redaction.upload_redacted_fields", localObject1, localObject1, zzcy.PROTO_HTTP);
    zzan = register("measurement.redaction.upload_subdomain_override", localObject1, localObject1, zzcz.PROTO_SSH);
    zzao = register("measurement.redaction.device_info", localObject1, localObject1, zzda.PROTO_FTP);
    zzap = register("measurement.redaction.user_id", localObject1, localObject1, zzdc.PROTO_HTTP);
    zzaq = register("measurement.redaction.google_signals", localObject1, localObject1, zzdd.PROTO_SSH);
    zzar = register("measurement.collection.enable_session_stitching_token.service", localObject3, localObject3, zzde.PROTO_FTP);
    zzas = register("measurement.collection.enable_session_stitching_token.client.dev", localObject3, localObject3, zzdf.PROTO_HTTP);
    zzat = register("measurement.redaction.app_instance_id", localObject1, localObject1, zzdg.PROTO_SSH);
    zzau = register("measurement.redaction.populate_ephemeral_app_instance_id", localObject1, localObject1, zzdh.PROTO_FTP);
    zzav = register("measurement.redaction.enhanced_uid", localObject1, localObject1, zzdi.PROTO_HTTP);
    zzaw = register("measurement.redaction.e_tag", localObject1, localObject1, zzdk.PROTO_SSH);
    zzax = register("measurement.redaction.client_ephemeral_aiid_generation", localObject1, localObject1, zzdl.PROTO_FTP);
    zzay = register("measurement.redaction.retain_major_os_version", localObject1, localObject1, zzdn.PROTO_HTTP);
    zzaz = register("measurement.redaction.scion_payload_generator", localObject1, localObject1, zzdo.PROTO_SSH);
    zzaA = register("measurement.audience.dynamic_filters.oob_fix", localObject1, localObject1, zzdp.PROTO_FTP);
    zzaB = register("measurement.service.clear_global_params_on_uninstall", localObject1, localObject1, zzdq.PROTO_HTTP);
  }
  
  public static Map parse(Context paramContext)
  {
    paramContext = zzhe.get(paramContext.getContentResolver(), zzhp.create("com.google.android.gms.measurement"), zzay.UTC);
    if (paramContext == null) {
      return Collections.emptyMap();
    }
    return paramContext.parse();
  }
  
  static zzea register(String paramString, Object paramObject1, Object paramObject2, zzdx paramZzdx)
  {
    paramString = new zzea(paramString, paramObject1, paramObject2, paramZzdx, null);
    zzaC.add(paramString);
    return paramString;
  }
}
