package com.google.android.gms.measurement.internal;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.util.Pair;
import com.google.android.gms.ads.identifier.AdvertisingIdClient;
import com.google.android.gms.ads.identifier.AdvertisingIdClient.Info;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.common.util.VisibleForTesting;
import org.checkerframework.checker.nullness.qual.EnsuresNonNull.List;

final class zzfd
  extends zzgs
{
  @VisibleForTesting
  static final Pair zza = new Pair("", Long.valueOf(0L));
  public zzfb zzb;
  public final zzez zzc = new zzez(this, "first_open_time", 0L);
  public final zzez zzd = new zzez(this, "app_install_time", 0L);
  public final zzfc zze = new zzfc(this, "app_instance_id", null);
  public final zzez zzf = new zzez(this, "session_timeout", 1800000L);
  public final zzex zzg = new zzex(this, "start_new_session", true);
  public final zzfc zzh = new zzfc(this, "non_personalized_ads", null);
  public final zzex zzi = new zzex(this, "allow_remote_dynamite", false);
  public final zzez zzj = new zzez(this, "last_pause_time", 0L);
  public boolean zzk;
  public final zzex zzl = new zzex(this, "app_backgrounded", false);
  public final zzex zzm = new zzex(this, "deep_link_retrieval_complete", false);
  public final zzez zzn = new zzez(this, "deep_link_retrieval_attempts", 0L);
  public final zzfc zzo = new zzfc(this, "firebase_feature_rollouts", null);
  public final zzfc zzp = new zzfc(this, "deferred_attribution_cache", null);
  public final zzez zzq = new zzez(this, "deferred_attribution_cache_timestamp", 0L);
  public final zzey zzr = new zzey(this, "default_event_parameters", null);
  private SharedPreferences zzt;
  private String zzu;
  private boolean zzv;
  private long zzw;
  
  zzfd(zzfy paramZzfy)
  {
    super(paramZzfy);
  }
  
  @VisibleForTesting
  protected final SharedPreferences zza()
  {
    zzg();
    zzu();
    Preconditions.checkNotNull(zzt);
    return zzt;
  }
  
  @EnsuresNonNull.List({@org.checkerframework.checker.nullness.qual.EnsuresNonNull({"this.preferences"}), @org.checkerframework.checker.nullness.qual.EnsuresNonNull({"this.monitoringSample"})})
  protected final void zzaA()
  {
    Object localObject = zzs.zzau().getSharedPreferences("com.google.android.gms.measurement.prefs", 0);
    zzt = ((SharedPreferences)localObject);
    boolean bool = ((SharedPreferences)localObject).getBoolean("has_been_opened", false);
    zzk = bool;
    if (!bool)
    {
      localObject = zzt.edit();
      ((SharedPreferences.Editor)localObject).putBoolean("has_been_opened", true);
      ((SharedPreferences.Editor)localObject).apply();
    }
    zzs.zzf();
    zzb = new zzfb(this, "health_monitor", Math.max(0L, ((Long)zzeb.zzb.zza(null)).longValue()), null);
  }
  
  final Pair zzb(String paramString)
  {
    zzg();
    long l = zzs.zzav().elapsedRealtime();
    String str = zzu;
    if ((str != null) && (l < zzw)) {
      return new Pair(str, Boolean.valueOf(zzv));
    }
    zzw = (l + zzs.zzf().zzi(paramString, zzeb.zza));
    AdvertisingIdClient.setShouldSkipGmsCoreVersionCheck(true);
    try
    {
      paramString = AdvertisingIdClient.getAdvertisingIdInfo(zzs.zzau());
      zzu = "";
      str = paramString.getId();
      if (str != null) {
        zzu = str;
      }
      zzv = paramString.isLimitAdTrackingEnabled();
    }
    catch (Exception paramString)
    {
      zzs.zzay().zzc().zzb("Unable to get advertising id", paramString);
      zzu = "";
    }
    AdvertisingIdClient.setShouldSkipGmsCoreVersionCheck(false);
    return new Pair(zzu, Boolean.valueOf(zzv));
  }
  
  final zzai zzc()
  {
    zzg();
    return zzai.zzb(zza().getString("consent_settings", "G1"));
  }
  
  final Boolean zzd()
  {
    zzg();
    if (zza().contains("measurement_enabled")) {
      return Boolean.valueOf(zza().getBoolean("measurement_enabled", true));
    }
    return null;
  }
  
  protected final boolean zzf()
  {
    return true;
  }
  
  final void zzh(Boolean paramBoolean)
  {
    zzg();
    SharedPreferences.Editor localEditor = zza().edit();
    if (paramBoolean != null) {
      localEditor.putBoolean("measurement_enabled", paramBoolean.booleanValue());
    } else {
      localEditor.remove("measurement_enabled");
    }
    localEditor.apply();
  }
  
  final void zzi(boolean paramBoolean)
  {
    zzg();
    zzs.zzay().zzj().zzb("App measurement setting deferred collection", Boolean.valueOf(paramBoolean));
    SharedPreferences.Editor localEditor = zza().edit();
    localEditor.putBoolean("deferred_analytics_collection", paramBoolean);
    localEditor.apply();
  }
  
  final boolean zzj()
  {
    SharedPreferences localSharedPreferences = zzt;
    if (localSharedPreferences == null) {
      return false;
    }
    return localSharedPreferences.contains("deferred_analytics_collection");
  }
  
  final boolean zzk(long paramLong)
  {
    return paramLong - zzf.zza() > zzj.zza();
  }
  
  final boolean zzl(int paramInt)
  {
    return zzai.zzj(paramInt, zza().getInt("consent_source", 100));
  }
}
