package com.google.android.gms.measurement.internal;

import android.text.TextUtils;
import com.google.android.gms.common.internal.Preconditions;
import java.util.ArrayList;
import java.util.List;

final class zzh
{
  private long zzA;
  private String zzB;
  private boolean zzC;
  private long zzD;
  private long zzE;
  private final zzfy zza;
  private final String zzb;
  private String zzc;
  private String zzd;
  private String zze;
  private String zzf;
  private long zzg;
  private long zzh;
  private long zzi;
  private String zzj;
  private long zzk;
  private String zzl;
  private long zzm;
  private long zzn;
  private boolean zzo;
  private boolean zzp;
  private String zzq;
  private Boolean zzr;
  private long zzs;
  private List zzt;
  private String zzu;
  private long zzv;
  private long zzw;
  private long zzx;
  private long zzy;
  private long zzz;
  
  zzh(zzfy paramZzfy, String paramString)
  {
    Preconditions.checkNotNull(paramZzfy);
    Preconditions.checkNotEmpty(paramString);
    zza = paramZzfy;
    zzb = paramString;
    paramZzfy.zzaz().zzg();
  }
  
  public final String zzA()
  {
    zza.zzaz().zzg();
    return zze;
  }
  
  public final String zzB()
  {
    zza.zzaz().zzg();
    return zzu;
  }
  
  public final List zzC()
  {
    zza.zzaz().zzg();
    return zzt;
  }
  
  public final void zzD()
  {
    zza.zzaz().zzg();
    zzC = false;
  }
  
  public final void zzE()
  {
    zza.zzaz().zzg();
    long l2 = zzg + 1L;
    long l1 = l2;
    if (l2 > 2147483647L)
    {
      zza.zzay().zzk().zzb("Bundle index overflow. appId", zzeo.zzn(zzb));
      l1 = 0L;
    }
    zzC = true;
    zzg = l1;
  }
  
  public final void zzF(String paramString)
  {
    zza.zzaz().zzg();
    String str = paramString;
    if (true == TextUtils.isEmpty(paramString)) {
      str = null;
    }
    zzC |= true ^ zzg.zza(zzq, str);
    zzq = str;
  }
  
  public final void zzG(boolean paramBoolean)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzp != paramBoolean) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzp = paramBoolean;
  }
  
  public final void zzH(String paramString)
  {
    zza.zzaz().zzg();
    zzC |= zzg.zza(zzc, paramString) ^ true;
    zzc = paramString;
  }
  
  public final void zzI(String paramString)
  {
    zza.zzaz().zzg();
    zzC |= zzg.zza(zzl, paramString) ^ true;
    zzl = paramString;
  }
  
  public final void zzJ(String paramString)
  {
    zza.zzaz().zzg();
    zzC |= zzg.zza(zzj, paramString) ^ true;
    zzj = paramString;
  }
  
  public final void zzK(long paramLong)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzk != paramLong) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzk = paramLong;
  }
  
  public final void zzL(long paramLong)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzD != paramLong) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzD = paramLong;
  }
  
  public final void zzM(long paramLong)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzy != paramLong) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzy = paramLong;
  }
  
  public final void zzN(long paramLong)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzz != paramLong) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzz = paramLong;
  }
  
  public final void zzO(long paramLong)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzx != paramLong) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzx = paramLong;
  }
  
  public final void zzP(long paramLong)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzw != paramLong) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzw = paramLong;
  }
  
  public final void zzQ(long paramLong)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzA != paramLong) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzA = paramLong;
  }
  
  public final void zzR(long paramLong)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzv != paramLong) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzv = paramLong;
  }
  
  public final void zzS(long paramLong)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzn != paramLong) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzn = paramLong;
  }
  
  public final void zzT(long paramLong)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzs != paramLong) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzs = paramLong;
  }
  
  public final void zzU(long paramLong)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzE != paramLong) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzE = paramLong;
  }
  
  public final void zzV(String paramString)
  {
    zza.zzaz().zzg();
    zzC |= zzg.zza(zzf, paramString) ^ true;
    zzf = paramString;
  }
  
  public final void zzW(String paramString)
  {
    zza.zzaz().zzg();
    String str = paramString;
    if (true == TextUtils.isEmpty(paramString)) {
      str = null;
    }
    zzC |= true ^ zzg.zza(zzd, str);
    zzd = str;
  }
  
  public final void zzX(long paramLong)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzm != paramLong) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzm = paramLong;
  }
  
  public final void zzY(String paramString)
  {
    zza.zzaz().zzg();
    zzC |= zzg.zza(zzB, paramString) ^ true;
    zzB = paramString;
  }
  
  public final void zzZ(long paramLong)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzi != paramLong) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzi = paramLong;
  }
  
  public final long zza()
  {
    zza.zzaz().zzg();
    return 0L;
  }
  
  public final void zzaa(long paramLong)
  {
    boolean bool1 = true;
    if (paramLong >= 0L) {
      bool2 = true;
    } else {
      bool2 = false;
    }
    Preconditions.checkArgument(bool2);
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    if (zzg == paramLong) {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzg = paramLong;
  }
  
  public final void zzab(long paramLong)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzh != paramLong) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzh = paramLong;
  }
  
  public final void zzac(boolean paramBoolean)
  {
    zza.zzaz().zzg();
    boolean bool2 = zzC;
    boolean bool1;
    if (zzo != paramBoolean) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzC = (bool2 | bool1);
    zzo = paramBoolean;
  }
  
  public final void zzad(Boolean paramBoolean)
  {
    zza.zzaz().zzg();
    zzC |= zzg.zza(zzr, paramBoolean) ^ true;
    zzr = paramBoolean;
  }
  
  public final void zzae(String paramString)
  {
    zza.zzaz().zzg();
    zzC |= zzg.zza(zze, paramString) ^ true;
    zze = paramString;
  }
  
  public final void zzaf(List paramList)
  {
    zza.zzaz().zzg();
    if (!zzg.zza(zzt, paramList))
    {
      zzC = true;
      if (paramList != null) {
        paramList = new ArrayList(paramList);
      } else {
        paramList = null;
      }
      zzt = paramList;
    }
  }
  
  public final void zzag(String paramString)
  {
    zza.zzaz().zzg();
    zzC |= zzg.zza(zzu, paramString) ^ true;
    zzu = paramString;
  }
  
  public final boolean zzah()
  {
    zza.zzaz().zzg();
    return zzp;
  }
  
  public final boolean zzai()
  {
    zza.zzaz().zzg();
    return zzo;
  }
  
  public final boolean zzaj()
  {
    zza.zzaz().zzg();
    return zzC;
  }
  
  public final long zzb()
  {
    zza.zzaz().zzg();
    return zzk;
  }
  
  public final long zzc()
  {
    zza.zzaz().zzg();
    return zzD;
  }
  
  public final long zzd()
  {
    zza.zzaz().zzg();
    return zzy;
  }
  
  public final long zze()
  {
    zza.zzaz().zzg();
    return zzz;
  }
  
  public final long zzf()
  {
    zza.zzaz().zzg();
    return zzx;
  }
  
  public final long zzg()
  {
    zza.zzaz().zzg();
    return zzw;
  }
  
  public final long zzh()
  {
    zza.zzaz().zzg();
    return zzA;
  }
  
  public final long zzi()
  {
    zza.zzaz().zzg();
    return zzv;
  }
  
  public final long zzj()
  {
    zza.zzaz().zzg();
    return zzn;
  }
  
  public final long zzk()
  {
    zza.zzaz().zzg();
    return zzs;
  }
  
  public final long zzl()
  {
    zza.zzaz().zzg();
    return zzE;
  }
  
  public final long zzm()
  {
    zza.zzaz().zzg();
    return zzm;
  }
  
  public final long zzn()
  {
    zza.zzaz().zzg();
    return zzi;
  }
  
  public final long zzo()
  {
    zza.zzaz().zzg();
    return zzg;
  }
  
  public final long zzp()
  {
    zza.zzaz().zzg();
    return zzh;
  }
  
  public final Boolean zzq()
  {
    zza.zzaz().zzg();
    return zzr;
  }
  
  public final String zzr()
  {
    zza.zzaz().zzg();
    return zzq;
  }
  
  public final String zzs()
  {
    zza.zzaz().zzg();
    String str = zzB;
    zzY(null);
    return str;
  }
  
  public final String zzt()
  {
    zza.zzaz().zzg();
    return zzb;
  }
  
  public final String zzu()
  {
    zza.zzaz().zzg();
    return zzc;
  }
  
  public final String zzv()
  {
    zza.zzaz().zzg();
    return zzl;
  }
  
  public final String zzw()
  {
    zza.zzaz().zzg();
    return zzj;
  }
  
  public final String zzx()
  {
    zza.zzaz().zzg();
    return zzf;
  }
  
  public final String zzy()
  {
    zza.zzaz().zzg();
    return zzd;
  }
  
  public final String zzz()
  {
    zza.zzaz().zzg();
    return zzB;
  }
}
