package com.google.android.gms.internal.fitness;

import java.lang.reflect.Field;
import java.nio.Buffer;
import java.nio.ByteOrder;
import java.security.AccessController;
import java.util.logging.Level;
import java.util.logging.Logger;
import sun.misc.Unsafe;

final class zzjy
{
  private static final Logger logger = Logger.getLogger(zzjy.class.getName());
  private static final Unsafe zzaad;
  private static final boolean zzabz;
  private static final boolean zzaca;
  private static final zzc zzacb;
  private static final boolean zzacc;
  private static final long zzacd;
  private static final long zzace;
  private static final long zzacf;
  private static final long zzacg;
  private static final long zzach;
  private static final long zzaci;
  private static final long zzacj;
  private static final long zzack;
  private static final long zzacl;
  private static final long zzacm;
  private static final long zzacn;
  private static final long zzaco;
  private static final long zzacp;
  private static final long zzacq;
  private static final int zzacr;
  static final boolean zzacs;
  private static final Class<?> zzty;
  private static final boolean zzum;
  
  static
  {
    Object localObject2 = zzdt();
    zzaad = (Unsafe)localObject2;
    zzty = zzfv.zzau();
    boolean bool1 = zzj(Long.TYPE);
    zzabz = bool1;
    boolean bool2 = zzj(Integer.TYPE);
    zzaca = bool2;
    Object localObject1 = null;
    if (localObject2 != null) {
      if (zzfv.zzat())
      {
        if (bool1) {
          localObject1 = new zza((Unsafe)localObject2);
        } else if (bool2) {
          localObject1 = new zzb((Unsafe)localObject2);
        }
      }
      else {
        localObject1 = new zzd((Unsafe)localObject2);
      }
    }
    zzacb = (zzc)localObject1;
    zzacc = zzdv();
    zzum = zzdu();
    long l2 = zzh([B.class);
    zzacd = l2;
    zzace = zzh([Z.class);
    zzacf = zzi([Z.class);
    zzacg = zzh([I.class);
    zzach = zzi([I.class);
    zzaci = zzh([J.class);
    zzacj = zzi([J.class);
    zzack = zzh([F.class);
    zzacl = zzi([F.class);
    zzacm = zzh([D.class);
    zzacn = zzi([D.class);
    zzaco = zzh([Ljava.lang.Object.class);
    zzacp = zzi([Ljava.lang.Object.class);
    localObject2 = zzdw();
    long l1;
    if ((localObject2 != null) && (localObject1 != null)) {
      l1 = zzact.objectFieldOffset((Field)localObject2);
    } else {
      l1 = -1L;
    }
    zzacq = l1;
    zzacr = (int)(0x7 & l2);
    if (ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    zzacs = bool1;
  }
  
  private zzjy() {}
  
  static byte zza(byte[] paramArrayOfByte, long paramLong)
  {
    return zzacb.zzx(paramArrayOfByte, zzacd + paramLong);
  }
  
  private static void zza(Object paramObject, long paramLong, byte paramByte)
  {
    long l = 0xFFFFFFFFFFFFFFFC & paramLong;
    int i = zzj(paramObject, l);
    int j = ((int)paramLong & 0x3) << 3;
    zza(paramObject, l, (0xFF & paramByte) << j | i & 255 << j);
  }
  
  static void zza(Object paramObject, long paramLong, double paramDouble)
  {
    zzacb.zza(paramObject, paramLong, paramDouble);
  }
  
  static void zza(Object paramObject, long paramLong, float paramFloat)
  {
    zzacb.zza(paramObject, paramLong, paramFloat);
  }
  
  static void zza(Object paramObject, long paramLong, int paramInt)
  {
    zzacb.zza(paramObject, paramLong, paramInt);
  }
  
  static void zza(Object paramObject, long paramLong1, long paramLong2)
  {
    zzacb.zza(paramObject, paramLong1, paramLong2);
  }
  
  static void zza(Object paramObject1, long paramLong, Object paramObject2)
  {
    zzacbzzact.putObject(paramObject1, paramLong, paramObject2);
  }
  
  static void zza(Object paramObject, long paramLong, boolean paramBoolean)
  {
    zzacb.zza(paramObject, paramLong, paramBoolean);
  }
  
  static void zza(byte[] paramArrayOfByte, long paramLong, byte paramByte)
  {
    zzacb.zze(paramArrayOfByte, zzacd + paramLong, paramByte);
  }
  
  private static Field zzb(Class<?> paramClass, String paramString)
  {
    try
    {
      paramClass = paramClass.getDeclaredField(paramString);
      return paramClass;
    }
    finally
    {
      for (;;) {}
    }
    return null;
  }
  
  private static void zzb(Object paramObject, long paramLong, byte paramByte)
  {
    long l = 0xFFFFFFFFFFFFFFFC & paramLong;
    int i = zzj(paramObject, l);
    int j = ((int)paramLong & 0x3) << 3;
    zza(paramObject, l, (0xFF & paramByte) << j | i & 255 << j);
  }
  
  private static void zzb(Object paramObject, long paramLong, boolean paramBoolean)
  {
    zza(paramObject, paramLong, (byte)paramBoolean);
  }
  
  private static void zzc(Object paramObject, long paramLong, boolean paramBoolean)
  {
    zzb(paramObject, paramLong, (byte)paramBoolean);
  }
  
  static boolean zzdr()
  {
    return zzum;
  }
  
  static boolean zzds()
  {
    return zzacc;
  }
  
  static Unsafe zzdt()
  {
    try
    {
      Unsafe localUnsafe = (Unsafe)AccessController.doPrivileged(new zzjx());
      return localUnsafe;
    }
    finally
    {
      for (;;) {}
    }
    return null;
  }
  
  private static boolean zzdu()
  {
    Object localObject1 = zzaad;
    if (localObject1 == null) {
      return false;
    }
    try
    {
      localObject1 = localObject1.getClass();
      ((Class)localObject1).getMethod("objectFieldOffset", new Class[] { Field.class });
      ((Class)localObject1).getMethod("arrayBaseOffset", new Class[] { Class.class });
      ((Class)localObject1).getMethod("arrayIndexScale", new Class[] { Class.class });
      localObject2 = Long.TYPE;
      ((Class)localObject1).getMethod("getInt", new Class[] { Object.class, localObject2 });
      ((Class)localObject1).getMethod("putInt", new Class[] { Object.class, localObject2, Integer.TYPE });
      ((Class)localObject1).getMethod("getLong", new Class[] { Object.class, localObject2 });
      ((Class)localObject1).getMethod("putLong", new Class[] { Object.class, localObject2, localObject2 });
      ((Class)localObject1).getMethod("getObject", new Class[] { Object.class, localObject2 });
      ((Class)localObject1).getMethod("putObject", new Class[] { Object.class, localObject2, Object.class });
      if (zzfv.zzat()) {
        return true;
      }
      ((Class)localObject1).getMethod("getByte", new Class[] { Object.class, localObject2 });
      ((Class)localObject1).getMethod("putByte", new Class[] { Object.class, localObject2, Byte.TYPE });
      ((Class)localObject1).getMethod("getBoolean", new Class[] { Object.class, localObject2 });
      ((Class)localObject1).getMethod("putBoolean", new Class[] { Object.class, localObject2, Boolean.TYPE });
      ((Class)localObject1).getMethod("getFloat", new Class[] { Object.class, localObject2 });
      ((Class)localObject1).getMethod("putFloat", new Class[] { Object.class, localObject2, Float.TYPE });
      ((Class)localObject1).getMethod("getDouble", new Class[] { Object.class, localObject2 });
      ((Class)localObject1).getMethod("putDouble", new Class[] { Object.class, localObject2, Double.TYPE });
      return true;
    }
    finally
    {
      localObject1 = logger;
      Object localObject2 = Level.WARNING;
      String str = String.valueOf(localObject3);
      StringBuilder localStringBuilder = new StringBuilder(str.length() + 71);
      localStringBuilder.append("platform method missing - proto runtime falling back to safer methods: ");
      localStringBuilder.append(str);
      ((Logger)localObject1).logp((Level)localObject2, "com.google.protobuf.UnsafeUtil", "supportsUnsafeArrayOperations", localStringBuilder.toString());
    }
    return false;
  }
  
  private static boolean zzdv()
  {
    Object localObject1 = zzaad;
    if (localObject1 == null) {
      return false;
    }
    try
    {
      localObject1 = localObject1.getClass();
      ((Class)localObject1).getMethod("objectFieldOffset", new Class[] { Field.class });
      localObject2 = Long.TYPE;
      ((Class)localObject1).getMethod("getLong", new Class[] { Object.class, localObject2 });
      if (zzdw() == null) {
        return false;
      }
      if (zzfv.zzat()) {
        return true;
      }
      ((Class)localObject1).getMethod("getByte", new Class[] { localObject2 });
      ((Class)localObject1).getMethod("putByte", new Class[] { localObject2, Byte.TYPE });
      ((Class)localObject1).getMethod("getInt", new Class[] { localObject2 });
      ((Class)localObject1).getMethod("putInt", new Class[] { localObject2, Integer.TYPE });
      ((Class)localObject1).getMethod("getLong", new Class[] { localObject2 });
      ((Class)localObject1).getMethod("putLong", new Class[] { localObject2, localObject2 });
      ((Class)localObject1).getMethod("copyMemory", new Class[] { localObject2, localObject2, localObject2 });
      ((Class)localObject1).getMethod("copyMemory", new Class[] { Object.class, localObject2, Object.class, localObject2, localObject2 });
      return true;
    }
    finally
    {
      localObject1 = logger;
      Object localObject2 = Level.WARNING;
      String str = String.valueOf(localObject3);
      StringBuilder localStringBuilder = new StringBuilder(str.length() + 71);
      localStringBuilder.append("platform method missing - proto runtime falling back to safer methods: ");
      localStringBuilder.append(str);
      ((Logger)localObject1).logp((Level)localObject2, "com.google.protobuf.UnsafeUtil", "supportsUnsafeByteBufferOperations", localStringBuilder.toString());
    }
    return false;
  }
  
  private static Field zzdw()
  {
    if (zzfv.zzat())
    {
      localField = zzb(Buffer.class, "effectiveDirectAddress");
      if (localField != null) {
        return localField;
      }
    }
    Field localField = zzb(Buffer.class, "address");
    if ((localField != null) && (localField.getType() == Long.TYPE)) {
      return localField;
    }
    return null;
  }
  
  static <T> T zzg(Class<T> paramClass)
  {
    try
    {
      paramClass = zzaad.allocateInstance(paramClass);
      return paramClass;
    }
    catch (InstantiationException paramClass)
    {
      throw new IllegalStateException(paramClass);
    }
  }
  
  private static int zzh(Class<?> paramClass)
  {
    if (zzum) {
      return zzacbzzact.arrayBaseOffset(paramClass);
    }
    return -1;
  }
  
  private static int zzi(Class<?> paramClass)
  {
    if (zzum) {
      return zzacbzzact.arrayIndexScale(paramClass);
    }
    return -1;
  }
  
  static int zzj(Object paramObject, long paramLong)
  {
    return zzacb.zzj(paramObject, paramLong);
  }
  
  private static boolean zzj(Class<?> paramClass)
  {
    if (!zzfv.zzat()) {
      return false;
    }
    try
    {
      Class localClass1 = zzty;
      Class localClass2 = Boolean.TYPE;
      localClass1.getMethod("peekLong", new Class[] { paramClass, localClass2 });
      localClass1.getMethod("pokeLong", new Class[] { paramClass, Long.TYPE, localClass2 });
      Class localClass3 = Integer.TYPE;
      localClass1.getMethod("pokeInt", new Class[] { paramClass, localClass3, localClass2 });
      localClass1.getMethod("peekInt", new Class[] { paramClass, localClass2 });
      localClass1.getMethod("pokeByte", new Class[] { paramClass, Byte.TYPE });
      localClass1.getMethod("peekByte", new Class[] { paramClass });
      localClass1.getMethod("pokeByteArray", new Class[] { paramClass, [B.class, localClass3, localClass3 });
      localClass1.getMethod("peekByteArray", new Class[] { paramClass, [B.class, localClass3, localClass3 });
      return true;
    }
    finally {}
    return false;
  }
  
  static long zzk(Object paramObject, long paramLong)
  {
    return zzacb.zzk(paramObject, paramLong);
  }
  
  static boolean zzl(Object paramObject, long paramLong)
  {
    return zzacb.zzl(paramObject, paramLong);
  }
  
  static float zzm(Object paramObject, long paramLong)
  {
    return zzacb.zzm(paramObject, paramLong);
  }
  
  static double zzn(Object paramObject, long paramLong)
  {
    return zzacb.zzn(paramObject, paramLong);
  }
  
  static Object zzo(Object paramObject, long paramLong)
  {
    return zzacbzzact.getObject(paramObject, paramLong);
  }
  
  private static byte zzp(Object paramObject, long paramLong)
  {
    return (byte)(zzj(paramObject, 0xFFFFFFFFFFFFFFFC & paramLong) >>> (int)((paramLong & 0x3) << 3));
  }
  
  private static byte zzq(Object paramObject, long paramLong)
  {
    return (byte)(zzj(paramObject, 0xFFFFFFFFFFFFFFFC & paramLong) >>> (int)((paramLong & 0x3) << 3));
  }
  
  private static boolean zzr(Object paramObject, long paramLong)
  {
    return zzp(paramObject, paramLong) != 0;
  }
  
  private static boolean zzs(Object paramObject, long paramLong)
  {
    return zzq(paramObject, paramLong) != 0;
  }
  
  private static final class zza
    extends zzjy.zzc
  {
    zza(Unsafe paramUnsafe)
    {
      super();
    }
    
    public final void zza(Object paramObject, long paramLong, double paramDouble)
    {
      zza(paramObject, paramLong, Double.doubleToLongBits(paramDouble));
    }
    
    public final void zza(Object paramObject, long paramLong, float paramFloat)
    {
      zza(paramObject, paramLong, Float.floatToIntBits(paramFloat));
    }
    
    public final void zza(Object paramObject, long paramLong, boolean paramBoolean)
    {
      if (zzjy.zzacs)
      {
        zzjy.zzd(paramObject, paramLong, paramBoolean);
        return;
      }
      zzjy.zze(paramObject, paramLong, paramBoolean);
    }
    
    public final void zze(Object paramObject, long paramLong, byte paramByte)
    {
      if (zzjy.zzacs)
      {
        zzjy.zzc(paramObject, paramLong, paramByte);
        return;
      }
      zzjy.zzd(paramObject, paramLong, paramByte);
    }
    
    public final boolean zzl(Object paramObject, long paramLong)
    {
      if (zzjy.zzacs) {
        return zzjy.zzv(paramObject, paramLong);
      }
      return zzjy.zzw(paramObject, paramLong);
    }
    
    public final float zzm(Object paramObject, long paramLong)
    {
      return Float.intBitsToFloat(zzj(paramObject, paramLong));
    }
    
    public final double zzn(Object paramObject, long paramLong)
    {
      return Double.longBitsToDouble(zzk(paramObject, paramLong));
    }
    
    public final byte zzx(Object paramObject, long paramLong)
    {
      if (zzjy.zzacs) {
        return zzjy.zzt(paramObject, paramLong);
      }
      return zzjy.zzu(paramObject, paramLong);
    }
  }
  
  private static final class zzb
    extends zzjy.zzc
  {
    zzb(Unsafe paramUnsafe)
    {
      super();
    }
    
    public final void zza(Object paramObject, long paramLong, double paramDouble)
    {
      zza(paramObject, paramLong, Double.doubleToLongBits(paramDouble));
    }
    
    public final void zza(Object paramObject, long paramLong, float paramFloat)
    {
      zza(paramObject, paramLong, Float.floatToIntBits(paramFloat));
    }
    
    public final void zza(Object paramObject, long paramLong, boolean paramBoolean)
    {
      if (zzjy.zzacs)
      {
        zzjy.zzd(paramObject, paramLong, paramBoolean);
        return;
      }
      zzjy.zze(paramObject, paramLong, paramBoolean);
    }
    
    public final void zze(Object paramObject, long paramLong, byte paramByte)
    {
      if (zzjy.zzacs)
      {
        zzjy.zzc(paramObject, paramLong, paramByte);
        return;
      }
      zzjy.zzd(paramObject, paramLong, paramByte);
    }
    
    public final boolean zzl(Object paramObject, long paramLong)
    {
      if (zzjy.zzacs) {
        return zzjy.zzv(paramObject, paramLong);
      }
      return zzjy.zzw(paramObject, paramLong);
    }
    
    public final float zzm(Object paramObject, long paramLong)
    {
      return Float.intBitsToFloat(zzj(paramObject, paramLong));
    }
    
    public final double zzn(Object paramObject, long paramLong)
    {
      return Double.longBitsToDouble(zzk(paramObject, paramLong));
    }
    
    public final byte zzx(Object paramObject, long paramLong)
    {
      if (zzjy.zzacs) {
        return zzjy.zzt(paramObject, paramLong);
      }
      return zzjy.zzu(paramObject, paramLong);
    }
  }
  
  private static abstract class zzc
  {
    Unsafe zzact;
    
    zzc(Unsafe paramUnsafe)
    {
      zzact = paramUnsafe;
    }
    
    public abstract void zza(Object paramObject, long paramLong, double paramDouble);
    
    public abstract void zza(Object paramObject, long paramLong, float paramFloat);
    
    public final void zza(Object paramObject, long paramLong, int paramInt)
    {
      zzact.putInt(paramObject, paramLong, paramInt);
    }
    
    public final void zza(Object paramObject, long paramLong1, long paramLong2)
    {
      zzact.putLong(paramObject, paramLong1, paramLong2);
    }
    
    public abstract void zza(Object paramObject, long paramLong, boolean paramBoolean);
    
    public abstract void zze(Object paramObject, long paramLong, byte paramByte);
    
    public final int zzj(Object paramObject, long paramLong)
    {
      return zzact.getInt(paramObject, paramLong);
    }
    
    public final long zzk(Object paramObject, long paramLong)
    {
      return zzact.getLong(paramObject, paramLong);
    }
    
    public abstract boolean zzl(Object paramObject, long paramLong);
    
    public abstract float zzm(Object paramObject, long paramLong);
    
    public abstract double zzn(Object paramObject, long paramLong);
    
    public abstract byte zzx(Object paramObject, long paramLong);
  }
  
  private static final class zzd
    extends zzjy.zzc
  {
    zzd(Unsafe paramUnsafe)
    {
      super();
    }
    
    public final void zza(Object paramObject, long paramLong, double paramDouble)
    {
      zzact.putDouble(paramObject, paramLong, paramDouble);
    }
    
    public final void zza(Object paramObject, long paramLong, float paramFloat)
    {
      zzact.putFloat(paramObject, paramLong, paramFloat);
    }
    
    public final void zza(Object paramObject, long paramLong, boolean paramBoolean)
    {
      zzact.putBoolean(paramObject, paramLong, paramBoolean);
    }
    
    public final void zze(Object paramObject, long paramLong, byte paramByte)
    {
      zzact.putByte(paramObject, paramLong, paramByte);
    }
    
    public final boolean zzl(Object paramObject, long paramLong)
    {
      return zzact.getBoolean(paramObject, paramLong);
    }
    
    public final float zzm(Object paramObject, long paramLong)
    {
      return zzact.getFloat(paramObject, paramLong);
    }
    
    public final double zzn(Object paramObject, long paramLong)
    {
      return zzact.getDouble(paramObject, paramLong);
    }
    
    public final byte zzx(Object paramObject, long paramLong)
    {
      return zzact.getByte(paramObject, paramLong);
    }
  }
}
