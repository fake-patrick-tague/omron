package com.google.android.gms.internal.measurement;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.ServiceConfigurationError;
import java.util.ServiceLoader;
import java.util.logging.Level;
import java.util.logging.Logger;

abstract class zzjy
{
  private static final Logger zza = Logger.getLogger(zzjl.class.getName());
  private static final String zzb = "com.google.protobuf.BlazeGeneratedExtensionRegistryLiteLoader";
  
  zzjy() {}
  
  static zzjq zzb(Class paramClass)
  {
    Object localObject2 = zzjy.class.getClassLoader();
    Object localObject1;
    if (paramClass.equals(zzjq.class))
    {
      localObject1 = zzb;
    }
    else
    {
      if (!paramClass.getPackage().equals(zzjy.class.getPackage())) {
        break label309;
      }
      localObject1 = String.format("%s.BlazeGenerated%sLoader", new Object[] { paramClass.getPackage().getName(), paramClass.getSimpleName() });
    }
    try
    {
      localObject1 = Class.forName((String)localObject1, true, (ClassLoader)localObject2);
      try
      {
        localObject1 = (zzjy)((Class)localObject1).getConstructor(new Class[0]).newInstance(new Object[0]);
        return (zzjq)paramClass.cast(((zzjy)localObject1).zza());
      }
      catch (InvocationTargetException localInvocationTargetException)
      {
        throw new IllegalStateException(localInvocationTargetException);
      }
      catch (IllegalAccessException localIllegalAccessException)
      {
        throw new IllegalStateException(localIllegalAccessException);
      }
      catch (InstantiationException localInstantiationException)
      {
        throw new IllegalStateException(localInstantiationException);
      }
      catch (NoSuchMethodException localNoSuchMethodException)
      {
        throw new IllegalStateException(localNoSuchMethodException);
      }
    }
    catch (ClassNotFoundException localClassNotFoundException)
    {
      Iterator localIterator;
      for (;;) {}
    }
    localIterator = ServiceLoader.load(zzjy.class, (ClassLoader)localObject2).iterator();
    localObject2 = new ArrayList();
    while (localIterator.hasNext()) {
      try
      {
        ((ArrayList)localObject2).add(paramClass.cast(((zzjy)localIterator.next()).zza()));
      }
      catch (ServiceConfigurationError localServiceConfigurationError)
      {
        zza.logp(Level.SEVERE, "com.google.protobuf.GeneratedExtensionRegistryLoader", "load", "Unable to load ".concat(paramClass.getSimpleName()), localServiceConfigurationError);
      }
    }
    if (((ArrayList)localObject2).size() == 1) {
      return (zzjq)((ArrayList)localObject2).get(0);
    }
    if (((ArrayList)localObject2).size() == 0) {
      return null;
    }
    try
    {
      paramClass = (zzjq)paramClass.getMethod("combine", new Class[] { Collection.class }).invoke(null, new Object[] { localObject2 });
      return paramClass;
    }
    catch (InvocationTargetException paramClass)
    {
      throw new IllegalStateException(paramClass);
    }
    catch (IllegalAccessException paramClass)
    {
      throw new IllegalStateException(paramClass);
    }
    catch (NoSuchMethodException paramClass)
    {
      throw new IllegalStateException(paramClass);
    }
    label309:
    throw new IllegalArgumentException(paramClass.getName());
  }
  
  protected abstract zzjq zza();
}
