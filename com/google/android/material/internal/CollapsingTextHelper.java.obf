package com.google.android.material.internal;

import android.animation.TimeInterpolator;
import android.content.res.ColorStateList;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Typeface;
import android.os.Build.VERSION;
import android.text.Layout.Alignment;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.TextUtils.TruncateAt;
import android.util.Log;
import android.view.View;
import c.h.p.h;
import c.h.q.f0;

public final class a
{
  private static final boolean a;
  private static final Paint b;
  private CharSequence A;
  private boolean B;
  private boolean C;
  private Bitmap D;
  private Paint E;
  private float F;
  private float G;
  private int[] H;
  private boolean I;
  private final TextPaint J;
  private final TextPaint K;
  private TimeInterpolator L;
  private TimeInterpolator M;
  private float N;
  private float O;
  private float P;
  private ColorStateList Q;
  private float R;
  private float S;
  private float T;
  private ColorStateList U;
  private float V;
  private float W;
  private StaticLayout X;
  private float Y;
  private float Z;
  private float a0;
  private CharSequence b0;
  private final View c;
  private int c0 = 1;
  private boolean d;
  private float e;
  private final Rect f;
  private final Rect g;
  private final RectF h;
  private int i = 16;
  private int j = 16;
  private float k = 15.0F;
  private float l = 15.0F;
  private ColorStateList m;
  private ColorStateList n;
  private float o;
  private float p;
  private float q;
  private float r;
  private float s;
  private float t;
  private Typeface u;
  private Typeface v;
  private Typeface w;
  private d.c.a.a.u.a x;
  private d.c.a.a.u.a y;
  private CharSequence z;
  
  static
  {
    boolean bool;
    if (Build.VERSION.SDK_INT < 18) {
      bool = true;
    } else {
      bool = false;
    }
    a = bool;
    b = null;
    if (0 != 0) {
      throw new NullPointerException();
    }
  }
  
  public a(View paramView)
  {
    c = paramView;
    paramView = new TextPaint(129);
    J = paramView;
    K = new TextPaint(paramView);
    g = new Rect();
    f = new Rect();
    h = new RectF();
  }
  
  private void C(TextPaint paramTextPaint)
  {
    paramTextPaint.setTextSize(l);
    paramTextPaint.setTypeface(u);
    if (Build.VERSION.SDK_INT >= 21) {
      paramTextPaint.setLetterSpacing(V);
    }
  }
  
  private void D(TextPaint paramTextPaint)
  {
    paramTextPaint.setTextSize(k);
    paramTextPaint.setTypeface(v);
    if (Build.VERSION.SDK_INT >= 21) {
      paramTextPaint.setLetterSpacing(W);
    }
  }
  
  private void E(float paramFloat)
  {
    h.left = I(f.left, g.left, paramFloat, L);
    h.top = I(o, p, paramFloat, L);
    h.right = I(f.right, g.right, paramFloat, L);
    h.bottom = I(f.bottom, g.bottom, paramFloat, L);
  }
  
  private static boolean F(float paramFloat1, float paramFloat2)
  {
    return Math.abs(paramFloat1 - paramFloat2) < 0.001F;
  }
  
  private boolean G()
  {
    return f0.D(c) == 1;
  }
  
  private static float I(float paramFloat1, float paramFloat2, float paramFloat3, TimeInterpolator paramTimeInterpolator)
  {
    float f1 = paramFloat3;
    if (paramTimeInterpolator != null) {
      f1 = paramTimeInterpolator.getInterpolation(paramFloat3);
    }
    return d.c.a.a.m.a.a(paramFloat1, paramFloat2, f1);
  }
  
  private static boolean L(Rect paramRect, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    return (left == paramInt1) && (top == paramInt2) && (right == paramInt3) && (bottom == paramInt4);
  }
  
  private void P(float paramFloat)
  {
    Y = paramFloat;
    f0.g0(c);
  }
  
  private boolean T(Typeface paramTypeface)
  {
    d.c.a.a.u.a localA = y;
    if (localA != null) {
      localA.c();
    }
    if (u != paramTypeface)
    {
      u = paramTypeface;
      return true;
    }
    return false;
  }
  
  private void X(float paramFloat)
  {
    Z = paramFloat;
    f0.g0(c);
  }
  
  private static int a(int paramInt1, int paramInt2, float paramFloat)
  {
    float f1 = 1.0F - paramFloat;
    float f2 = Color.alpha(paramInt1);
    float f3 = Color.alpha(paramInt2);
    float f4 = Color.red(paramInt1);
    float f5 = Color.red(paramInt2);
    float f6 = Color.green(paramInt1);
    float f7 = Color.green(paramInt2);
    float f8 = Color.blue(paramInt1);
    float f9 = Color.blue(paramInt2);
    return Color.argb((int)(f2 * f1 + f3 * paramFloat), (int)(f4 * f1 + f5 * paramFloat), (int)(f6 * f1 + f7 * paramFloat), (int)(f8 * f1 + f9 * paramFloat));
  }
  
  private void b()
  {
    throw new Runtime("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.provideAs(TypeTransformer.java:780)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.e1expr(TypeTransformer.java:496)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:713)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.enexpr(TypeTransformer.java:698)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:719)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.s2stmt(TypeTransformer.java:820)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.sxStmt(TypeTransformer.java:843)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:206)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n");
  }
  
  private boolean c0(Typeface paramTypeface)
  {
    d.c.a.a.u.a localA = x;
    if (localA != null) {
      localA.c();
    }
    if (v != paramTypeface)
    {
      v = paramTypeface;
      return true;
    }
    return false;
  }
  
  private void d()
  {
    f(e);
  }
  
  private boolean e(CharSequence paramCharSequence)
  {
    c.h.o.d localD;
    if (G()) {
      localD = c.h.o.e.d;
    } else {
      localD = c.h.o.e.c;
    }
    return localD.a(paramCharSequence, 0, paramCharSequence.length());
  }
  
  private void e0(float paramFloat)
  {
    g(paramFloat);
    boolean bool;
    if ((a) && (F != 1.0F)) {
      bool = true;
    } else {
      bool = false;
    }
    C = bool;
    if (bool) {
      l();
    }
    f0.g0(c);
  }
  
  private void f(float paramFloat)
  {
    E(paramFloat);
    s = I(q, r, paramFloat, L);
    t = I(o, p, paramFloat, L);
    e0(I(k, l, paramFloat, M));
    TimeInterpolator localTimeInterpolator = d.c.a.a.m.a.b;
    P(1.0F - I(0.0F, 1.0F, 1.0F - paramFloat, localTimeInterpolator));
    X(I(1.0F, 0.0F, paramFloat, localTimeInterpolator));
    if (n != m) {
      J.setColor(a(v(), t(), paramFloat));
    } else {
      J.setColor(t());
    }
    if (Build.VERSION.SDK_INT >= 21)
    {
      float f1 = V;
      float f2 = W;
      if (f1 != f2) {
        J.setLetterSpacing(I(f2, f1, paramFloat, localTimeInterpolator));
      } else {
        J.setLetterSpacing(f1);
      }
    }
    J.setShadowLayer(I(R, N, paramFloat, null), I(S, O, paramFloat, null), I(T, P, paramFloat, null), a(u(U), u(Q), paramFloat));
    f0.g0(c);
  }
  
  private void g(float paramFloat)
  {
    if (z == null) {
      return;
    }
    float f2 = g.width();
    float f3 = f.width();
    boolean bool2 = F(paramFloat, l);
    boolean bool1 = false;
    int i3 = 1;
    float f1;
    Object localObject;
    Typeface localTypeface;
    int i1;
    if (bool2)
    {
      f1 = l;
      F = 1.0F;
      localObject = w;
      localTypeface = u;
      if (localObject != localTypeface)
      {
        w = localTypeface;
        i1 = 1;
        paramFloat = f2;
      }
      else
      {
        i1 = 0;
        paramFloat = f2;
      }
    }
    else
    {
      f1 = k;
      localObject = w;
      localTypeface = v;
      if (localObject != localTypeface)
      {
        w = localTypeface;
        i1 = 1;
      }
      else
      {
        i1 = 0;
      }
      if (F(paramFloat, f1)) {
        F = 1.0F;
      } else {
        F = (paramFloat / k);
      }
      paramFloat = l / k;
      if (f3 * paramFloat > f2) {
        paramFloat = Math.min(f2 / paramFloat, f3);
      } else {
        paramFloat = f3;
      }
    }
    int i2 = i1;
    if (paramFloat > 0.0F)
    {
      if ((G == f1) && (!I) && (i1 == 0)) {
        i1 = 0;
      } else {
        i1 = 1;
      }
      G = f1;
      I = false;
      i2 = i1;
    }
    if ((A == null) || (i2 != 0))
    {
      J.setTextSize(G);
      J.setTypeface(w);
      localObject = J;
      if (F != 1.0F) {
        bool1 = true;
      }
      ((TextPaint)localObject).setLinearText(bool1);
      B = e(z);
      i1 = i3;
      if (l0()) {
        i1 = c0;
      }
      localObject = i(i1, paramFloat, B);
      X = ((StaticLayout)localObject);
      A = ((StaticLayout)localObject).getText();
    }
  }
  
  private void h()
  {
    Bitmap localBitmap = D;
    if (localBitmap != null)
    {
      localBitmap.recycle();
      D = null;
    }
  }
  
  private StaticLayout i(int paramInt, float paramFloat, boolean paramBoolean)
  {
    Object localObject;
    try
    {
      StaticLayout localStaticLayout = e.c(z, J, (int)paramFloat).e(TextUtils.TruncateAt.END).g(paramBoolean).d(Layout.Alignment.ALIGN_NORMAL).f(false).h(paramInt).a();
    }
    catch (e.a localA)
    {
      Log.e("CollapsingTextHelper", localA.getCause().getMessage(), localA);
      localObject = null;
    }
    return (StaticLayout)h.g(localObject);
  }
  
  private void k(Canvas paramCanvas, float paramFloat1, float paramFloat2)
  {
    int i1 = J.getAlpha();
    paramCanvas.translate(paramFloat1, paramFloat2);
    Object localObject = J;
    paramFloat1 = Z;
    paramFloat2 = i1;
    ((TextPaint)localObject).setAlpha((int)(paramFloat1 * paramFloat2));
    X.draw(paramCanvas);
    J.setAlpha((int)(Y * paramFloat2));
    int i2 = X.getLineBaseline(0);
    localObject = b0;
    int i3 = ((CharSequence)localObject).length();
    paramFloat1 = i2;
    paramCanvas.drawText((CharSequence)localObject, 0, i3, 0.0F, paramFloat1, J);
    String str = b0.toString().trim();
    localObject = str;
    if (str.endsWith("?")) {
      localObject = str.substring(0, str.length() - 1);
    }
    J.setAlpha(i1);
    paramCanvas.drawText((String)localObject, 0, Math.min(X.getLineEnd(0), ((String)localObject).length()), 0.0F, paramFloat1, J);
  }
  
  private void l()
  {
    if ((D == null) && (!f.isEmpty()))
    {
      if (TextUtils.isEmpty(A)) {
        return;
      }
      f(0.0F);
      int i1 = X.getWidth();
      int i2 = X.getHeight();
      if (i1 > 0)
      {
        if (i2 <= 0) {
          return;
        }
        D = Bitmap.createBitmap(i1, i2, Bitmap.Config.ARGB_8888);
        Canvas localCanvas = new Canvas(D);
        X.draw(localCanvas);
        if (E == null) {
          E = new Paint(3);
        }
      }
    }
  }
  
  private boolean l0()
  {
    return (c0 > 1) && (!B) && (!C);
  }
  
  private float q(int paramInt1, int paramInt2)
  {
    if ((paramInt2 != 17) && ((paramInt2 & 0x7) != 1))
    {
      if (((paramInt2 & 0x800005) != 8388613) && ((paramInt2 & 0x5) != 5))
      {
        if (B) {
          return g.right - c();
        }
        return g.left;
      }
      if (B) {
        return g.left;
      }
      return g.right - c();
    }
    return paramInt1 / 2.0F - c() / 2.0F;
  }
  
  private float r(RectF paramRectF, int paramInt1, int paramInt2)
  {
    if ((paramInt2 != 17) && ((paramInt2 & 0x7) != 1))
    {
      if (((paramInt2 & 0x800005) != 8388613) && ((paramInt2 & 0x5) != 5))
      {
        if (B) {
          return g.right;
        }
        return left + c();
      }
      if (B) {
        return left + c();
      }
      return g.right;
    }
    return paramInt1 / 2.0F + c() / 2.0F;
  }
  
  private int u(ColorStateList paramColorStateList)
  {
    if (paramColorStateList == null) {
      return 0;
    }
    int[] arrayOfInt = H;
    if (arrayOfInt != null) {
      return paramColorStateList.getColorForState(arrayOfInt, 0);
    }
    return paramColorStateList.getDefaultColor();
  }
  
  private int v()
  {
    return u(m);
  }
  
  public int A()
  {
    return c0;
  }
  
  public CharSequence B()
  {
    return z;
  }
  
  public final boolean H()
  {
    ColorStateList localColorStateList = n;
    if ((localColorStateList == null) || (!localColorStateList.isStateful())) {
      localColorStateList = m;
    }
    return (localColorStateList != null) && (localColorStateList.isStateful());
  }
  
  void J()
  {
    boolean bool;
    if ((g.width() > 0) && (g.height() > 0) && (f.width() > 0) && (f.height() > 0)) {
      bool = true;
    } else {
      bool = false;
    }
    d = bool;
  }
  
  public void K()
  {
    if ((c.getHeight() > 0) && (c.getWidth() > 0))
    {
      b();
      d();
    }
  }
  
  public void M(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if (!L(g, paramInt1, paramInt2, paramInt3, paramInt4))
    {
      g.set(paramInt1, paramInt2, paramInt3, paramInt4);
      I = true;
      J();
    }
  }
  
  public void N(Rect paramRect)
  {
    M(left, top, right, bottom);
  }
  
  public void O(int paramInt)
  {
    d.c.a.a.u.d localD = new d.c.a.a.u.d(c.getContext(), paramInt);
    Object localObject = a;
    if (localObject != null) {
      n = ((ColorStateList)localObject);
    }
    float f1 = n;
    if (f1 != 0.0F) {
      l = f1;
    }
    localObject = d;
    if (localObject != null) {
      Q = ((ColorStateList)localObject);
    }
    O = i;
    P = j;
    N = k;
    V = m;
    localObject = y;
    if (localObject != null) {
      ((d.c.a.a.u.a)localObject).c();
    }
    y = new d.c.a.a.u.a(new a(), localD.e());
    localD.h(c.getContext(), y);
    K();
  }
  
  public void Q(ColorStateList paramColorStateList)
  {
    if (n != paramColorStateList)
    {
      n = paramColorStateList;
      K();
    }
  }
  
  public void R(int paramInt)
  {
    if (j != paramInt)
    {
      j = paramInt;
      K();
    }
  }
  
  public void S(Typeface paramTypeface)
  {
    if (T(paramTypeface)) {
      K();
    }
  }
  
  public void U(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if (!L(f, paramInt1, paramInt2, paramInt3, paramInt4))
    {
      f.set(paramInt1, paramInt2, paramInt3, paramInt4);
      I = true;
      J();
    }
  }
  
  public void V(Rect paramRect)
  {
    U(left, top, right, bottom);
  }
  
  public void W(int paramInt)
  {
    d.c.a.a.u.d localD = new d.c.a.a.u.d(c.getContext(), paramInt);
    Object localObject = a;
    if (localObject != null) {
      m = ((ColorStateList)localObject);
    }
    float f1 = n;
    if (f1 != 0.0F) {
      k = f1;
    }
    localObject = d;
    if (localObject != null) {
      U = ((ColorStateList)localObject);
    }
    S = i;
    T = j;
    R = k;
    W = m;
    localObject = x;
    if (localObject != null) {
      ((d.c.a.a.u.a)localObject).c();
    }
    x = new d.c.a.a.u.a(new b(), localD.e());
    localD.h(c.getContext(), x);
    K();
  }
  
  public void Y(ColorStateList paramColorStateList)
  {
    if (m != paramColorStateList)
    {
      m = paramColorStateList;
      K();
    }
  }
  
  public void Z(int paramInt)
  {
    if (i != paramInt)
    {
      i = paramInt;
      K();
    }
  }
  
  public void a0(float paramFloat)
  {
    if (k != paramFloat)
    {
      k = paramFloat;
      K();
    }
  }
  
  public void b0(Typeface paramTypeface)
  {
    if (c0(paramTypeface)) {
      K();
    }
  }
  
  public float c()
  {
    if (z == null) {
      return 0.0F;
    }
    C(K);
    TextPaint localTextPaint = K;
    CharSequence localCharSequence = z;
    return localTextPaint.measureText(localCharSequence, 0, localCharSequence.length());
  }
  
  public void d0(float paramFloat)
  {
    paramFloat = c.h.k.a.a(paramFloat, 0.0F, 1.0F);
    if (paramFloat != e)
    {
      e = paramFloat;
      d();
    }
  }
  
  public void f0(int paramInt)
  {
    if (paramInt != c0)
    {
      c0 = paramInt;
      h();
      K();
    }
  }
  
  public void g0(TimeInterpolator paramTimeInterpolator)
  {
    L = paramTimeInterpolator;
    K();
  }
  
  public final boolean h0(int[] paramArrayOfInt)
  {
    H = paramArrayOfInt;
    if (H())
    {
      K();
      return true;
    }
    return false;
  }
  
  public void i0(CharSequence paramCharSequence)
  {
    if ((paramCharSequence == null) || (!TextUtils.equals(z, paramCharSequence)))
    {
      z = paramCharSequence;
      A = null;
      h();
      K();
    }
  }
  
  public void j(Canvas paramCanvas)
  {
    int i3 = paramCanvas.save();
    if ((A != null) && (d))
    {
      float f1 = s;
      StaticLayout localStaticLayout = X;
      int i2 = 0;
      float f2 = localStaticLayout.getLineLeft(0);
      float f3 = a0;
      J.setTextSize(G);
      float f4 = s;
      float f5 = t;
      int i1 = i2;
      if (C)
      {
        i1 = i2;
        if (D != null) {
          i1 = 1;
        }
      }
      float f6 = F;
      if (f6 != 1.0F) {
        paramCanvas.scale(f6, f6, f4, f5);
      }
      if (i1 != 0)
      {
        paramCanvas.drawBitmap(D, f4, f5, E);
        paramCanvas.restoreToCount(i3);
        return;
      }
      if (l0())
      {
        k(paramCanvas, f1 + f2 - f3 * 2.0F, f5);
      }
      else
      {
        paramCanvas.translate(f4, f5);
        X.draw(paramCanvas);
      }
      paramCanvas.restoreToCount(i3);
    }
  }
  
  public void j0(TimeInterpolator paramTimeInterpolator)
  {
    M = paramTimeInterpolator;
    K();
  }
  
  public void k0(Typeface paramTypeface)
  {
    boolean bool1 = T(paramTypeface);
    boolean bool2 = c0(paramTypeface);
    if ((bool1) || (bool2)) {
      K();
    }
  }
  
  public void m(RectF paramRectF, int paramInt1, int paramInt2)
  {
    B = e(z);
    left = q(paramInt1, paramInt2);
    top = g.top;
    right = r(paramRectF, paramInt1, paramInt2);
    bottom = (g.top + p());
  }
  
  public ColorStateList n()
  {
    return n;
  }
  
  public int o()
  {
    return j;
  }
  
  public float p()
  {
    C(K);
    return -K.ascent();
  }
  
  public Typeface s()
  {
    Typeface localTypeface = u;
    if (localTypeface != null) {
      return localTypeface;
    }
    return Typeface.DEFAULT;
  }
  
  public int t()
  {
    return u(n);
  }
  
  public int w()
  {
    return i;
  }
  
  public float x()
  {
    D(K);
    return -K.ascent();
  }
  
  public Typeface y()
  {
    Typeface localTypeface = v;
    if (localTypeface != null) {
      return localTypeface;
    }
    return Typeface.DEFAULT;
  }
  
  public float z()
  {
    return e;
  }
  
  class a
    implements d.c.a.a.u.a.a
  {
    a() {}
    
    public void a(Typeface paramTypeface)
    {
      S(paramTypeface);
    }
  }
  
  class b
    implements d.c.a.a.u.a.a
  {
    b() {}
    
    public void a(Typeface paramTypeface)
    {
      b0(paramTypeface);
    }
  }
}
