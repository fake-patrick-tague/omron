package com.google.android.material.appbar;

import android.animation.ValueAnimator;
import android.animation.ValueAnimator.AnimatorUpdateListener;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.ClassLoaderCreator;
import android.os.Parcelable.Creator;
import android.util.AttributeSet;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.animation.AnimationUtils;
import android.view.animation.Interpolator;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ListView;
import android.widget.ScrollView;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout.Behavior;
import androidx.coordinatorlayout.widget.CoordinatorLayout.b;
import androidx.coordinatorlayout.widget.CoordinatorLayout.e;
import androidx.customview.view.AbsSavedState;
import c.h.p.c;
import c.h.q.f0;
import c.h.q.n0;
import c.h.q.p0.c.a;
import c.h.q.p0.f;
import c.h.q.p0.f.a;
import c.h.q.t;
import c.h.q.z;
import com.google.android.material.internal.i;
import d.c.a.a.d;
import d.c.a.a.k;
import d.c.a.a.l;
import d.c.a.a.x.h;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;

public class AppBarLayout
  extends LinearLayout
  implements CoordinatorLayout.b
{
  private static final int b = k.f;
  private int c;
  private int d = -1;
  private int e = -1;
  private int f = -1;
  private boolean g;
  private int h = 0;
  private n0 i;
  private List<c> j;
  private boolean k;
  private boolean l;
  private boolean m;
  private boolean n;
  private int o;
  private WeakReference<View> p;
  private ValueAnimator q;
  private int[] r;
  private Drawable s;
  
  public AppBarLayout(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, d.c.a.a.b.a);
  }
  
  public AppBarLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(com.google.android.material.theme.a.a.c(paramContext, paramAttributeSet, paramInt, i2), paramAttributeSet, paramInt);
    paramContext = getContext();
    setOrientation(1);
    int i1 = Build.VERSION.SDK_INT;
    if (i1 >= 21)
    {
      b.a(this);
      b.c(this, paramAttributeSet, paramInt, i2);
    }
    paramAttributeSet = i.h(paramContext, paramAttributeSet, l.k, paramInt, i2, new int[0]);
    f0.t0(this, paramAttributeSet.getDrawable(l.l));
    if ((getBackground() instanceof ColorDrawable))
    {
      ColorDrawable localColorDrawable = (ColorDrawable)getBackground();
      d.c.a.a.x.g localG = new d.c.a.a.x.g();
      localG.X(ColorStateList.valueOf(localColorDrawable.getColor()));
      localG.M(paramContext);
      f0.t0(this, localG);
    }
    paramInt = l.p;
    if (paramAttributeSet.hasValue(paramInt)) {
      s(paramAttributeSet.getBoolean(paramInt, false), false, false);
    }
    if (i1 >= 21)
    {
      paramInt = l.o;
      if (paramAttributeSet.hasValue(paramInt)) {
        b.b(this, paramAttributeSet.getDimensionPixelSize(paramInt, 0));
      }
    }
    if (i1 >= 26)
    {
      paramInt = l.n;
      if (paramAttributeSet.hasValue(paramInt)) {
        setKeyboardNavigationCluster(paramAttributeSet.getBoolean(paramInt, false));
      }
      paramInt = l.m;
      if (paramAttributeSet.hasValue(paramInt)) {
        setTouchscreenBlocksFocus(paramAttributeSet.getBoolean(paramInt, false));
      }
    }
    n = paramAttributeSet.getBoolean(l.q, false);
    o = paramAttributeSet.getResourceId(l.r, -1);
    setStatusBarForeground(paramAttributeSet.getDrawable(l.s));
    paramAttributeSet.recycle();
    f0.C0(this, new a());
  }
  
  private void c()
  {
    WeakReference localWeakReference = p;
    if (localWeakReference != null) {
      localWeakReference.clear();
    }
    p = null;
  }
  
  private View d(View paramView)
  {
    Object localObject1 = p;
    Object localObject2 = null;
    if (localObject1 == null)
    {
      int i1 = o;
      if (i1 != -1)
      {
        if (paramView != null) {
          paramView = paramView.findViewById(i1);
        } else {
          paramView = null;
        }
        localObject1 = paramView;
        if (paramView == null)
        {
          localObject1 = paramView;
          if ((getParent() instanceof ViewGroup)) {
            localObject1 = ((ViewGroup)getParent()).findViewById(o);
          }
        }
        if (localObject1 != null) {
          p = new WeakReference(localObject1);
        }
      }
    }
    localObject1 = p;
    paramView = localObject2;
    if (localObject1 != null) {
      paramView = (View)((WeakReference)localObject1).get();
    }
    return paramView;
  }
  
  private boolean i()
  {
    int i2 = getChildCount();
    int i1 = 0;
    while (i1 < i2)
    {
      if (((LayoutParams)getChildAt(i1).getLayoutParams()).c()) {
        return true;
      }
      i1 += 1;
    }
    return false;
  }
  
  private void k()
  {
    d = -1;
    e = -1;
    f = -1;
  }
  
  private void s(boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
  {
    int i1;
    if (paramBoolean1) {
      i1 = 1;
    } else {
      i1 = 2;
    }
    int i3 = 0;
    int i2;
    if (paramBoolean2) {
      i2 = 4;
    } else {
      i2 = 0;
    }
    if (paramBoolean3) {
      i3 = 8;
    }
    h = (i1 | i2 | i3);
    requestLayout();
  }
  
  private boolean t(boolean paramBoolean)
  {
    if (l != paramBoolean)
    {
      l = paramBoolean;
      refreshDrawableState();
      return true;
    }
    return false;
  }
  
  private boolean v()
  {
    return (s != null) && (getTopInset() > 0);
  }
  
  private boolean x()
  {
    int i1 = getChildCount();
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (i1 > 0)
    {
      View localView = getChildAt(0);
      bool1 = bool2;
      if (localView.getVisibility() != 8)
      {
        bool1 = bool2;
        if (!f0.A(localView)) {
          bool1 = true;
        }
      }
    }
    return bool1;
  }
  
  private void y(final d.c.a.a.x.g paramG, boolean paramBoolean)
  {
    float f1 = getResources().getDimension(d.a);
    float f2;
    if (paramBoolean) {
      f2 = 0.0F;
    } else {
      f2 = f1;
    }
    if (!paramBoolean) {
      f1 = 0.0F;
    }
    ValueAnimator localValueAnimator = q;
    if (localValueAnimator != null) {
      localValueAnimator.cancel();
    }
    localValueAnimator = ValueAnimator.ofFloat(new float[] { f2, f1 });
    q = localValueAnimator;
    localValueAnimator.setDuration(getResources().getInteger(d.c.a.a.g.a));
    q.setInterpolator(d.c.a.a.m.a.a);
    q.addUpdateListener(new b(paramG));
    q.start();
  }
  
  private void z()
  {
    setWillNotDraw(v() ^ true);
  }
  
  public void a(c paramC)
  {
    if (j == null) {
      j = new ArrayList();
    }
    if ((paramC != null) && (!j.contains(paramC))) {
      j.add(paramC);
    }
  }
  
  public void b(d paramD)
  {
    a(paramD);
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams)
  {
    return paramLayoutParams instanceof LayoutParams;
  }
  
  public void draw(Canvas paramCanvas)
  {
    super.draw(paramCanvas);
    if (v())
    {
      int i1 = paramCanvas.save();
      paramCanvas.translate(0.0F, -c);
      s.draw(paramCanvas);
      paramCanvas.restoreToCount(i1);
    }
  }
  
  protected void drawableStateChanged()
  {
    super.drawableStateChanged();
    int[] arrayOfInt = getDrawableState();
    Drawable localDrawable = s;
    if ((localDrawable != null) && (localDrawable.isStateful()) && (localDrawable.setState(arrayOfInt))) {
      invalidateDrawable(localDrawable);
    }
  }
  
  protected LayoutParams e()
  {
    return new LayoutParams(-1, -2);
  }
  
  public LayoutParams f(AttributeSet paramAttributeSet)
  {
    return new LayoutParams(getContext(), paramAttributeSet);
  }
  
  protected LayoutParams g(ViewGroup.LayoutParams paramLayoutParams)
  {
    if ((Build.VERSION.SDK_INT >= 19) && ((paramLayoutParams instanceof LinearLayout.LayoutParams))) {
      return new LayoutParams((LinearLayout.LayoutParams)paramLayoutParams);
    }
    if ((paramLayoutParams instanceof ViewGroup.MarginLayoutParams)) {
      return new LayoutParams((ViewGroup.MarginLayoutParams)paramLayoutParams);
    }
    return new LayoutParams(paramLayoutParams);
  }
  
  public CoordinatorLayout.Behavior<AppBarLayout> getBehavior()
  {
    return new Behavior();
  }
  
  int getDownNestedPreScrollRange()
  {
    int i1 = e;
    if (i1 != -1) {
      return i1;
    }
    int i2 = getChildCount() - 1;
    for (int i3 = 0; i2 >= 0; i3 = i1)
    {
      View localView = getChildAt(i2);
      LayoutParams localLayoutParams = (LayoutParams)localView.getLayoutParams();
      int i5 = localView.getMeasuredHeight();
      i1 = a;
      if ((i1 & 0x5) == 5)
      {
        int i4 = topMargin + bottomMargin;
        if ((i1 & 0x8) != 0) {}
        for (i1 = f0.E(localView);; i1 = i5 - f0.E(localView))
        {
          i1 = i4 + i1;
          break label120;
          if ((i1 & 0x2) == 0) {
            break;
          }
        }
        i1 = i4 + i5;
        label120:
        i4 = i1;
        if (i2 == 0)
        {
          i4 = i1;
          if (f0.A(localView)) {
            i4 = Math.min(i1, i5 - getTopInset());
          }
        }
        i1 = i3 + i4;
      }
      else
      {
        i1 = i3;
        if (i3 > 0) {
          break;
        }
      }
      i2 -= 1;
    }
    i1 = Math.max(0, i3);
    e = i1;
    return i1;
  }
  
  int getDownNestedScrollRange()
  {
    int i1 = f;
    if (i1 != -1) {
      return i1;
    }
    int i4 = getChildCount();
    int i2 = 0;
    i1 = i2;
    int i3;
    for (;;)
    {
      i3 = i1;
      if (i2 >= i4) {
        break;
      }
      View localView = getChildAt(i2);
      LayoutParams localLayoutParams = (LayoutParams)localView.getLayoutParams();
      int i6 = localView.getMeasuredHeight();
      int i7 = topMargin;
      int i8 = bottomMargin;
      int i5 = a;
      i3 = i1;
      if ((i5 & 0x1) == 0) {
        break;
      }
      i1 += i6 + (i7 + i8);
      if ((i5 & 0x2) != 0)
      {
        i3 = i1 - f0.E(localView);
        break;
      }
      i2 += 1;
    }
    i1 = Math.max(0, i3);
    f = i1;
    return i1;
  }
  
  public int getLiftOnScrollTargetViewId()
  {
    return o;
  }
  
  public final int getMinimumHeightForVisibleOverlappingContent()
  {
    int i2 = getTopInset();
    int i1 = f0.E(this);
    if (i1 != 0) {}
    do
    {
      return i1 * 2 + i2;
      i1 = getChildCount();
      if (i1 >= 1) {
        i1 = f0.E(getChildAt(i1 - 1));
      } else {
        i1 = 0;
      }
    } while (i1 != 0);
    return getHeight() / 3;
  }
  
  int getPendingAction()
  {
    return h;
  }
  
  public Drawable getStatusBarForeground()
  {
    return s;
  }
  
  @Deprecated
  public float getTargetElevation()
  {
    return 0.0F;
  }
  
  final int getTopInset()
  {
    n0 localN0 = i;
    if (localN0 != null) {
      return localN0.l();
    }
    return 0;
  }
  
  public final int getTotalScrollRange()
  {
    int i1 = d;
    if (i1 != -1) {
      return i1;
    }
    int i4 = getChildCount();
    int i2 = 0;
    i1 = i2;
    int i3;
    for (;;)
    {
      i3 = i1;
      if (i2 >= i4) {
        break;
      }
      View localView = getChildAt(i2);
      LayoutParams localLayoutParams = (LayoutParams)localView.getLayoutParams();
      int i6 = localView.getMeasuredHeight();
      int i5 = a;
      i3 = i1;
      if ((i5 & 0x1) == 0) {
        break;
      }
      i3 = i1 + (i6 + topMargin + bottomMargin);
      i1 = i3;
      if (i2 == 0)
      {
        i1 = i3;
        if (f0.A(localView)) {
          i1 = i3 - getTopInset();
        }
      }
      if ((i5 & 0x2) != 0)
      {
        i3 = i1 - f0.E(localView);
        break;
      }
      i2 += 1;
    }
    i1 = Math.max(0, i3);
    d = i1;
    return i1;
  }
  
  int getUpNestedPreScrollRange()
  {
    return getTotalScrollRange();
  }
  
  boolean h()
  {
    return g;
  }
  
  boolean j()
  {
    return getTotalScrollRange() != 0;
  }
  
  public boolean l()
  {
    return n;
  }
  
  void m(int paramInt)
  {
    c = paramInt;
    if (!willNotDraw()) {
      f0.g0(this);
    }
    Object localObject = j;
    if (localObject != null)
    {
      int i1 = 0;
      int i2 = ((List)localObject).size();
      while (i1 < i2)
      {
        localObject = (c)j.get(i1);
        if (localObject != null) {
          ((c)localObject).a(this, paramInt);
        }
        i1 += 1;
      }
    }
  }
  
  n0 n(n0 paramN0)
  {
    n0 localN0;
    if (f0.A(this)) {
      localN0 = paramN0;
    } else {
      localN0 = null;
    }
    if (!c.a(i, localN0))
    {
      i = localN0;
      z();
      requestLayout();
    }
    return paramN0;
  }
  
  public void o(c paramC)
  {
    List localList = j;
    if ((localList != null) && (paramC != null)) {
      localList.remove(paramC);
    }
  }
  
  protected void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    h.e(this);
  }
  
  protected int[] onCreateDrawableState(int paramInt)
  {
    if (r == null) {
      r = new int[4];
    }
    int[] arrayOfInt1 = r;
    int[] arrayOfInt2 = super.onCreateDrawableState(paramInt + arrayOfInt1.length);
    boolean bool = l;
    paramInt = d.c.a.a.b.E;
    if (!bool) {
      paramInt = -paramInt;
    }
    arrayOfInt1[0] = paramInt;
    if ((bool) && (m)) {
      paramInt = d.c.a.a.b.F;
    } else {
      paramInt = -d.c.a.a.b.F;
    }
    arrayOfInt1[1] = paramInt;
    paramInt = d.c.a.a.b.C;
    if (!bool) {
      paramInt = -paramInt;
    }
    arrayOfInt1[2] = paramInt;
    if ((bool) && (m)) {
      paramInt = d.c.a.a.b.B;
    } else {
      paramInt = -d.c.a.a.b.B;
    }
    arrayOfInt1[3] = paramInt;
    return LinearLayout.mergeDrawableStates(arrayOfInt2, arrayOfInt1);
  }
  
  protected void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    c();
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    paramBoolean = f0.A(this);
    boolean bool = true;
    if ((paramBoolean) && (x()))
    {
      paramInt2 = getTopInset();
      paramInt1 = getChildCount() - 1;
      while (paramInt1 >= 0)
      {
        f0.a0(getChildAt(paramInt1), paramInt2);
        paramInt1 -= 1;
      }
    }
    k();
    g = false;
    paramInt2 = getChildCount();
    paramInt1 = 0;
    while (paramInt1 < paramInt2)
    {
      if (((LayoutParams)getChildAt(paramInt1).getLayoutParams()).b() != null)
      {
        g = true;
        break;
      }
      paramInt1 += 1;
    }
    Drawable localDrawable = s;
    if (localDrawable != null) {
      localDrawable.setBounds(0, 0, getWidth(), getTopInset());
    }
    if (!k)
    {
      paramBoolean = bool;
      if (!n) {
        if (i()) {
          paramBoolean = bool;
        } else {
          paramBoolean = false;
        }
      }
      t(paramBoolean);
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    super.onMeasure(paramInt1, paramInt2);
    int i1 = View.MeasureSpec.getMode(paramInt2);
    if ((i1 != 1073741824) && (f0.A(this)) && (x()))
    {
      paramInt1 = getMeasuredHeight();
      if (i1 != Integer.MIN_VALUE)
      {
        if (i1 == 0) {
          paramInt1 += getTopInset();
        }
      }
      else {
        paramInt1 = c.h.k.a.b(getMeasuredHeight() + getTopInset(), 0, View.MeasureSpec.getSize(paramInt2));
      }
      setMeasuredDimension(getMeasuredWidth(), paramInt1);
    }
    k();
  }
  
  public void p(d paramD)
  {
    o(paramD);
  }
  
  void q()
  {
    h = 0;
  }
  
  public void r(boolean paramBoolean1, boolean paramBoolean2)
  {
    s(paramBoolean1, paramBoolean2, true);
  }
  
  public void setElevation(float paramFloat)
  {
    super.setElevation(paramFloat);
    h.d(this, paramFloat);
  }
  
  public void setExpanded(boolean paramBoolean)
  {
    r(paramBoolean, f0.T(this));
  }
  
  public void setLiftOnScroll(boolean paramBoolean)
  {
    n = paramBoolean;
  }
  
  public void setLiftOnScrollTargetViewId(int paramInt)
  {
    o = paramInt;
    c();
  }
  
  public void setOrientation(int paramInt)
  {
    if (paramInt == 1)
    {
      super.setOrientation(paramInt);
      return;
    }
    throw new IllegalArgumentException("AppBarLayout is always vertical and does not support horizontal orientation");
  }
  
  public void setStatusBarForeground(Drawable paramDrawable)
  {
    Drawable localDrawable2 = s;
    if (localDrawable2 != paramDrawable)
    {
      Drawable localDrawable1 = null;
      if (localDrawable2 != null) {
        localDrawable2.setCallback(null);
      }
      if (paramDrawable != null) {
        localDrawable1 = paramDrawable.mutate();
      }
      s = localDrawable1;
      if (localDrawable1 != null)
      {
        if (localDrawable1.isStateful()) {
          s.setState(getDrawableState());
        }
        androidx.core.graphics.drawable.a.m(s, f0.D(this));
        paramDrawable = s;
        boolean bool;
        if (getVisibility() == 0) {
          bool = true;
        } else {
          bool = false;
        }
        paramDrawable.setVisible(bool, false);
        s.setCallback(this);
      }
      z();
      f0.g0(this);
    }
  }
  
  public void setStatusBarForegroundColor(int paramInt)
  {
    setStatusBarForeground(new ColorDrawable(paramInt));
  }
  
  public void setStatusBarForegroundResource(int paramInt)
  {
    setStatusBarForeground(c.a.k.a.a.b(getContext(), paramInt));
  }
  
  @Deprecated
  public void setTargetElevation(float paramFloat)
  {
    if (Build.VERSION.SDK_INT >= 21) {
      b.b(this, paramFloat);
    }
  }
  
  public void setVisibility(int paramInt)
  {
    super.setVisibility(paramInt);
    boolean bool;
    if (paramInt == 0) {
      bool = true;
    } else {
      bool = false;
    }
    Drawable localDrawable = s;
    if (localDrawable != null) {
      localDrawable.setVisible(bool, false);
    }
  }
  
  boolean u(boolean paramBoolean)
  {
    if (m != paramBoolean)
    {
      m = paramBoolean;
      refreshDrawableState();
      if ((n) && ((getBackground() instanceof d.c.a.a.x.g))) {
        y((d.c.a.a.x.g)getBackground(), paramBoolean);
      }
      return true;
    }
    return false;
  }
  
  protected boolean verifyDrawable(Drawable paramDrawable)
  {
    return (super.verifyDrawable(paramDrawable)) || (paramDrawable == s);
  }
  
  boolean w(View paramView)
  {
    View localView = d(paramView);
    if (localView != null) {
      paramView = localView;
    }
    return (paramView != null) && ((paramView.canScrollVertically(-1)) || (paramView.getScrollY() > 0));
  }
  
  protected static class BaseBehavior<T extends AppBarLayout>
    extends HeaderBehavior<T>
  {
    private int k;
    private int l;
    private ValueAnimator m;
    private int n = -1;
    private boolean o;
    private float p;
    private WeakReference<View> q;
    private d r;
    
    public BaseBehavior() {}
    
    public BaseBehavior(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
    }
    
    private void S(final CoordinatorLayout paramCoordinatorLayout, final T paramT, final View paramView)
    {
      if ((M() != -paramT.getTotalScrollRange()) && (paramView.canScrollVertically(1))) {
        T(paramCoordinatorLayout, paramT, c.a.m, false);
      }
      if (M() != 0) {
        if (paramView.canScrollVertically(-1))
        {
          final int i = -paramT.getDownNestedPreScrollRange();
          if (i != 0) {
            f0.l0(paramCoordinatorLayout, c.a.n, null, new b(paramCoordinatorLayout, paramT, paramView, i));
          }
        }
        else
        {
          T(paramCoordinatorLayout, paramT, c.a.n, true);
        }
      }
    }
    
    private void T(CoordinatorLayout paramCoordinatorLayout, final T paramT, c.a paramA, final boolean paramBoolean)
    {
      f0.l0(paramCoordinatorLayout, paramA, null, new c(paramT, paramBoolean));
    }
    
    private void U(CoordinatorLayout paramCoordinatorLayout, T paramT, int paramInt, float paramFloat)
    {
      int i = Math.abs(M() - paramInt);
      paramFloat = Math.abs(paramFloat);
      if (paramFloat > 0.0F) {
        i = Math.round(i / paramFloat * 1000.0F) * 3;
      } else {
        i = (int)((i / paramT.getHeight() + 1.0F) * 150.0F);
      }
      V(paramCoordinatorLayout, paramT, paramInt, i);
    }
    
    private void V(final CoordinatorLayout paramCoordinatorLayout, final T paramT, int paramInt1, int paramInt2)
    {
      int i = M();
      if (i == paramInt1)
      {
        paramCoordinatorLayout = m;
        if ((paramCoordinatorLayout != null) && (paramCoordinatorLayout.isRunning())) {
          m.cancel();
        }
        return;
      }
      ValueAnimator localValueAnimator = m;
      if (localValueAnimator == null)
      {
        localValueAnimator = new ValueAnimator();
        m = localValueAnimator;
        localValueAnimator.setInterpolator(d.c.a.a.m.a.e);
        m.addUpdateListener(new a(paramCoordinatorLayout, paramT));
      }
      else
      {
        localValueAnimator.cancel();
      }
      m.setDuration(Math.min(paramInt2, 600));
      m.setIntValues(new int[] { i, paramInt1 });
      m.start();
    }
    
    private boolean X(CoordinatorLayout paramCoordinatorLayout, T paramT, View paramView)
    {
      return (paramT.j()) && (paramCoordinatorLayout.getHeight() - paramView.getHeight() <= paramT.getHeight());
    }
    
    private static boolean Y(int paramInt1, int paramInt2)
    {
      return (paramInt1 & paramInt2) == paramInt2;
    }
    
    private View Z(CoordinatorLayout paramCoordinatorLayout)
    {
      int j = paramCoordinatorLayout.getChildCount();
      int i = 0;
      while (i < j)
      {
        View localView = paramCoordinatorLayout.getChildAt(i);
        if ((!(localView instanceof t)) && (!(localView instanceof ListView)))
        {
          if ((localView instanceof ScrollView)) {
            return localView;
          }
          i += 1;
        }
        else
        {
          return localView;
        }
      }
      return null;
    }
    
    private static View a0(AppBarLayout paramAppBarLayout, int paramInt)
    {
      int i = Math.abs(paramInt);
      int j = paramAppBarLayout.getChildCount();
      paramInt = 0;
      while (paramInt < j)
      {
        View localView = paramAppBarLayout.getChildAt(paramInt);
        if ((i >= localView.getTop()) && (i <= localView.getBottom())) {
          return localView;
        }
        paramInt += 1;
      }
      return null;
    }
    
    private int b0(T paramT, int paramInt)
    {
      int i4 = paramT.getChildCount();
      int i = 0;
      while (i < i4)
      {
        Object localObject = paramT.getChildAt(i);
        int i3 = ((View)localObject).getTop();
        int i2 = ((View)localObject).getBottom();
        localObject = (AppBarLayout.LayoutParams)((View)localObject).getLayoutParams();
        int i1 = i3;
        int j = i2;
        if (Y(((AppBarLayout.LayoutParams)localObject).a(), 32))
        {
          i1 = i3 - topMargin;
          j = i2 + bottomMargin;
        }
        i2 = -paramInt;
        if ((i1 <= i2) && (j >= i2)) {
          return i;
        }
        i += 1;
      }
      return -1;
    }
    
    private int e0(T paramT, int paramInt)
    {
      int i1 = Math.abs(paramInt);
      int i2 = paramT.getChildCount();
      int j = 0;
      int i = 0;
      while (i < i2)
      {
        View localView = paramT.getChildAt(i);
        AppBarLayout.LayoutParams localLayoutParams = (AppBarLayout.LayoutParams)localView.getLayoutParams();
        Interpolator localInterpolator = localLayoutParams.b();
        if ((i1 >= localView.getTop()) && (i1 <= localView.getBottom()))
        {
          if (localInterpolator == null) {
            break;
          }
          i2 = localLayoutParams.a();
          i = j;
          if ((i2 & 0x1) != 0)
          {
            j = 0 + (localView.getHeight() + topMargin + bottomMargin);
            i = j;
            if ((i2 & 0x2) != 0) {
              i = j - f0.E(localView);
            }
          }
          j = i;
          if (f0.A(localView)) {
            j = i - paramT.getTopInset();
          }
          if (j <= 0) {
            break;
          }
          i = localView.getTop();
          float f = j;
          i = Math.round(f * localInterpolator.getInterpolation((i1 - i) / f));
          return Integer.signum(paramInt) * (localView.getTop() + i);
        }
        i += 1;
      }
      return paramInt;
    }
    
    private boolean p0(CoordinatorLayout paramCoordinatorLayout, T paramT)
    {
      paramCoordinatorLayout = paramCoordinatorLayout.s(paramT);
      int j = paramCoordinatorLayout.size();
      boolean bool = false;
      int i = 0;
      while (i < j)
      {
        paramT = ((CoordinatorLayout.e)((View)paramCoordinatorLayout.get(i)).getLayoutParams()).f();
        if ((paramT instanceof AppBarLayout.ScrollingViewBehavior))
        {
          if (((AppBarLayout.ScrollingViewBehavior)paramT).K() != 0) {
            bool = true;
          }
          return bool;
        }
        i += 1;
      }
      return false;
    }
    
    private void q0(CoordinatorLayout paramCoordinatorLayout, T paramT)
    {
      int i3 = M();
      int i1 = b0(paramT, i3);
      if (i1 >= 0)
      {
        View localView = paramT.getChildAt(i1);
        AppBarLayout.LayoutParams localLayoutParams = (AppBarLayout.LayoutParams)localView.getLayoutParams();
        int i4 = localLayoutParams.a();
        if ((i4 & 0x11) == 17)
        {
          int i2 = -localView.getTop();
          int i = -localView.getBottom();
          int j = i;
          if (i1 == paramT.getChildCount() - 1) {
            j = i + paramT.getTopInset();
          }
          if (Y(i4, 2))
          {
            i = j + f0.E(localView);
            i1 = i2;
          }
          else
          {
            i1 = i2;
            i = j;
            if (Y(i4, 5))
            {
              i = f0.E(localView) + j;
              if (i3 < i)
              {
                i1 = i;
                i = j;
              }
              else
              {
                i1 = i2;
              }
            }
          }
          i2 = i1;
          j = i;
          if (Y(i4, 32))
          {
            i2 = i1 + topMargin;
            j = i - bottomMargin;
          }
          i = i2;
          if (i3 < (j + i2) / 2) {
            i = j;
          }
          U(paramCoordinatorLayout, paramT, c.h.k.a.b(i, -paramT.getTotalScrollRange(), 0), 0.0F);
        }
      }
    }
    
    private void r0(CoordinatorLayout paramCoordinatorLayout, T paramT)
    {
      f0.j0(paramCoordinatorLayout, c.a.m.b());
      f0.j0(paramCoordinatorLayout, c.a.n.b());
      View localView = Z(paramCoordinatorLayout);
      if (localView != null)
      {
        if (paramT.getTotalScrollRange() == 0) {
          return;
        }
        if (!(((CoordinatorLayout.e)localView.getLayoutParams()).f() instanceof AppBarLayout.ScrollingViewBehavior)) {
          return;
        }
        S(paramCoordinatorLayout, paramT, localView);
      }
    }
    
    private void s0(CoordinatorLayout paramCoordinatorLayout, T paramT, int paramInt1, int paramInt2, boolean paramBoolean)
    {
      View localView = a0(paramT, paramInt1);
      if (localView != null)
      {
        int i = ((AppBarLayout.LayoutParams)localView.getLayoutParams()).a();
        boolean bool2 = false;
        boolean bool1 = bool2;
        if ((i & 0x1) != 0)
        {
          int j = f0.E(localView);
          if ((paramInt2 > 0) && ((i & 0xC) != 0))
          {
            bool1 = bool2;
            if (-paramInt1 < localView.getBottom() - j - paramT.getTopInset()) {}
          }
          else
          {
            do
            {
              bool1 = true;
              break;
              bool1 = bool2;
              if ((i & 0x2) == 0) {
                break;
              }
              bool1 = bool2;
            } while (-paramInt1 >= localView.getBottom() - j - paramT.getTopInset());
          }
        }
        if (paramT.l()) {
          bool1 = paramT.w(Z(paramCoordinatorLayout));
        }
        bool1 = paramT.u(bool1);
        if ((paramBoolean) || ((bool1) && (p0(paramCoordinatorLayout, paramT)))) {
          paramT.jumpDrawablesToCurrentState();
        }
      }
    }
    
    int M()
    {
      return E() + k;
    }
    
    boolean W(T paramT)
    {
      if (r == null)
      {
        paramT = q;
        boolean bool = true;
        if (paramT != null)
        {
          paramT = (View)paramT.get();
          if ((paramT != null) && (paramT.isShown()) && (!paramT.canScrollVertically(-1))) {
            return true;
          }
          bool = false;
        }
        return bool;
      }
      throw null;
    }
    
    int c0(T paramT)
    {
      return -paramT.getDownNestedScrollRange();
    }
    
    int d0(T paramT)
    {
      return paramT.getTotalScrollRange();
    }
    
    void f0(CoordinatorLayout paramCoordinatorLayout, T paramT)
    {
      q0(paramCoordinatorLayout, paramT);
      if (paramT.l()) {
        paramT.u(paramT.w(Z(paramCoordinatorLayout)));
      }
    }
    
    public boolean g0(CoordinatorLayout paramCoordinatorLayout, T paramT, int paramInt)
    {
      boolean bool = super.l(paramCoordinatorLayout, paramT, paramInt);
      int i = paramT.getPendingAction();
      paramInt = n;
      if ((paramInt >= 0) && ((i & 0x8) == 0))
      {
        View localView = paramT.getChildAt(paramInt);
        i = -localView.getBottom();
        if (o) {
          paramInt = f0.E(localView) + paramT.getTopInset();
        } else {
          paramInt = Math.round(localView.getHeight() * p);
        }
        P(paramCoordinatorLayout, paramT, i + paramInt);
      }
      else if (i != 0)
      {
        if ((i & 0x4) != 0) {
          paramInt = 1;
        } else {
          paramInt = 0;
        }
        if ((i & 0x2) != 0)
        {
          i = -paramT.getUpNestedPreScrollRange();
          if (paramInt != 0) {
            U(paramCoordinatorLayout, paramT, i, 0.0F);
          } else {
            P(paramCoordinatorLayout, paramT, i);
          }
        }
        else if ((i & 0x1) != 0)
        {
          if (paramInt != 0) {
            U(paramCoordinatorLayout, paramT, 0, 0.0F);
          } else {
            P(paramCoordinatorLayout, paramT, 0);
          }
        }
      }
      paramT.q();
      n = -1;
      G(c.h.k.a.b(E(), -paramT.getTotalScrollRange(), 0));
      s0(paramCoordinatorLayout, paramT, E(), 0, true);
      paramT.m(E());
      r0(paramCoordinatorLayout, paramT);
      return bool;
    }
    
    public boolean h0(CoordinatorLayout paramCoordinatorLayout, T paramT, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
    {
      if (getLayoutParamsheight == -2)
      {
        paramCoordinatorLayout.J(paramT, paramInt1, paramInt2, View.MeasureSpec.makeMeasureSpec(0, 0), paramInt4);
        return true;
      }
      return super.m(paramCoordinatorLayout, paramT, paramInt1, paramInt2, paramInt3, paramInt4);
    }
    
    public void i0(CoordinatorLayout paramCoordinatorLayout, T paramT, View paramView, int paramInt1, int paramInt2, int[] paramArrayOfInt, int paramInt3)
    {
      if (paramInt2 != 0)
      {
        if (paramInt2 < 0)
        {
          paramInt1 = -paramT.getTotalScrollRange();
          paramInt3 = paramT.getDownNestedPreScrollRange() + paramInt1;
        }
        else
        {
          paramInt1 = -paramT.getUpNestedPreScrollRange();
          paramInt3 = 0;
        }
        if (paramInt1 != paramInt3) {
          paramArrayOfInt[1] = O(paramCoordinatorLayout, paramT, paramInt2, paramInt1, paramInt3);
        }
      }
      if (paramT.l()) {
        paramT.u(paramT.w(paramView));
      }
    }
    
    public void j0(CoordinatorLayout paramCoordinatorLayout, T paramT, View paramView, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int[] paramArrayOfInt)
    {
      if (paramInt4 < 0) {
        paramArrayOfInt[1] = O(paramCoordinatorLayout, paramT, paramInt4, -paramT.getDownNestedScrollRange(), 0);
      }
      if (paramInt4 == 0) {
        r0(paramCoordinatorLayout, paramT);
      }
    }
    
    public void k0(CoordinatorLayout paramCoordinatorLayout, T paramT, Parcelable paramParcelable)
    {
      if ((paramParcelable instanceof SavedState))
      {
        paramParcelable = (SavedState)paramParcelable;
        super.x(paramCoordinatorLayout, paramT, paramParcelable.a());
        n = d;
        p = e;
        o = f;
        return;
      }
      super.x(paramCoordinatorLayout, paramT, paramParcelable);
      n = -1;
    }
    
    public Parcelable l0(CoordinatorLayout paramCoordinatorLayout, T paramT)
    {
      Object localObject = super.y(paramCoordinatorLayout, paramT);
      int j = E();
      int i1 = paramT.getChildCount();
      boolean bool = false;
      int i = 0;
      while (i < i1)
      {
        paramCoordinatorLayout = paramT.getChildAt(i);
        int i2 = paramCoordinatorLayout.getBottom() + j;
        if ((paramCoordinatorLayout.getTop() + j <= 0) && (i2 >= 0))
        {
          localObject = new SavedState((Parcelable)localObject);
          d = i;
          if (i2 == f0.E(paramCoordinatorLayout) + paramT.getTopInset()) {
            bool = true;
          }
          f = bool;
          e = (i2 / paramCoordinatorLayout.getHeight());
          return localObject;
        }
        i += 1;
      }
      return localObject;
    }
    
    public boolean m0(CoordinatorLayout paramCoordinatorLayout, T paramT, View paramView1, View paramView2, int paramInt1, int paramInt2)
    {
      boolean bool;
      if (((paramInt1 & 0x2) != 0) && ((paramT.l()) || (X(paramCoordinatorLayout, paramT, paramView1)))) {
        bool = true;
      } else {
        bool = false;
      }
      if (bool)
      {
        paramCoordinatorLayout = m;
        if (paramCoordinatorLayout != null) {
          paramCoordinatorLayout.cancel();
        }
      }
      q = null;
      l = paramInt2;
      return bool;
    }
    
    public void n0(CoordinatorLayout paramCoordinatorLayout, T paramT, View paramView, int paramInt)
    {
      if ((l == 0) || (paramInt == 1))
      {
        q0(paramCoordinatorLayout, paramT);
        if (paramT.l()) {
          paramT.u(paramT.w(paramView));
        }
      }
      q = new WeakReference(paramView);
    }
    
    int o0(CoordinatorLayout paramCoordinatorLayout, T paramT, int paramInt1, int paramInt2, int paramInt3)
    {
      int j = M();
      int i = 0;
      if ((paramInt2 != 0) && (j >= paramInt2) && (j <= paramInt3))
      {
        paramInt2 = c.h.k.a.b(paramInt1, paramInt2, paramInt3);
        paramInt1 = i;
        if (j != paramInt2)
        {
          if (paramT.h()) {
            paramInt1 = e0(paramT, paramInt2);
          } else {
            paramInt1 = paramInt2;
          }
          boolean bool = G(paramInt1);
          paramInt3 = j - paramInt2;
          k = (paramInt2 - paramInt1);
          if ((!bool) && (paramT.h())) {
            paramCoordinatorLayout.g(paramT);
          }
          paramT.m(E());
          if (paramInt2 < j) {
            paramInt1 = -1;
          } else {
            paramInt1 = 1;
          }
          s0(paramCoordinatorLayout, paramT, paramInt2, paramInt1, false);
          paramInt1 = paramInt3;
        }
      }
      else
      {
        k = 0;
        paramInt1 = i;
      }
      r0(paramCoordinatorLayout, paramT);
      return paramInt1;
    }
    
    protected static class SavedState
      extends AbsSavedState
    {
      public static final Parcelable.Creator<SavedState> CREATOR = new a();
      int d;
      float e;
      boolean f;
      
      public SavedState(Parcel paramParcel, ClassLoader paramClassLoader)
      {
        super(paramClassLoader);
        d = paramParcel.readInt();
        e = paramParcel.readFloat();
        boolean bool;
        if (paramParcel.readByte() != 0) {
          bool = true;
        } else {
          bool = false;
        }
        f = bool;
      }
      
      public SavedState(Parcelable paramParcelable)
      {
        super();
      }
      
      public void writeToParcel(Parcel paramParcel, int paramInt)
      {
        super.writeToParcel(paramParcel, paramInt);
        paramParcel.writeInt(d);
        paramParcel.writeFloat(e);
        paramParcel.writeByte((byte)f);
      }
      
      static final class a
        implements Parcelable.ClassLoaderCreator<AppBarLayout.BaseBehavior.SavedState>
      {
        a() {}
        
        public AppBarLayout.BaseBehavior.SavedState a(Parcel paramParcel)
        {
          return new AppBarLayout.BaseBehavior.SavedState(paramParcel, null);
        }
        
        public AppBarLayout.BaseBehavior.SavedState b(Parcel paramParcel, ClassLoader paramClassLoader)
        {
          return new AppBarLayout.BaseBehavior.SavedState(paramParcel, paramClassLoader);
        }
        
        public AppBarLayout.BaseBehavior.SavedState[] c(int paramInt)
        {
          return new AppBarLayout.BaseBehavior.SavedState[paramInt];
        }
      }
    }
    
    class a
      implements ValueAnimator.AnimatorUpdateListener
    {
      a(CoordinatorLayout paramCoordinatorLayout, AppBarLayout paramAppBarLayout) {}
      
      public void onAnimationUpdate(ValueAnimator paramValueAnimator)
      {
        P(paramCoordinatorLayout, paramT, ((Integer)paramValueAnimator.getAnimatedValue()).intValue());
      }
    }
    
    class b
      implements f
    {
      b(CoordinatorLayout paramCoordinatorLayout, AppBarLayout paramAppBarLayout, View paramView, int paramInt) {}
      
      public boolean a(View paramView, f.a paramA)
      {
        i0(paramCoordinatorLayout, paramT, paramView, 0, i, new int[] { 0, 0 }, 1);
        return true;
      }
    }
    
    class c
      implements f
    {
      c(AppBarLayout paramAppBarLayout, boolean paramBoolean) {}
      
      public boolean a(View paramView, f.a paramA)
      {
        paramT.setExpanded(paramBoolean);
        return true;
      }
    }
    
    public static abstract class d<T extends AppBarLayout> {}
  }
  
  public static class Behavior
    extends AppBarLayout.BaseBehavior<AppBarLayout>
  {
    public Behavior() {}
    
    public Behavior(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
    }
  }
  
  public static class LayoutParams
    extends LinearLayout.LayoutParams
  {
    int a = 1;
    Interpolator b;
    
    public LayoutParams(int paramInt1, int paramInt2)
    {
      super(paramInt2);
    }
    
    public LayoutParams(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
      paramAttributeSet = paramContext.obtainStyledAttributes(paramAttributeSet, l.u);
      a = paramAttributeSet.getInt(l.v, 0);
      int i = l.w;
      if (paramAttributeSet.hasValue(i)) {
        b = AnimationUtils.loadInterpolator(paramContext, paramAttributeSet.getResourceId(i, 0));
      }
      paramAttributeSet.recycle();
    }
    
    public LayoutParams(ViewGroup.LayoutParams paramLayoutParams)
    {
      super();
    }
    
    public LayoutParams(ViewGroup.MarginLayoutParams paramMarginLayoutParams)
    {
      super();
    }
    
    public LayoutParams(LinearLayout.LayoutParams paramLayoutParams)
    {
      super();
    }
    
    public int a()
    {
      return a;
    }
    
    public Interpolator b()
    {
      return b;
    }
    
    boolean c()
    {
      int i = a;
      return ((i & 0x1) == 1) && ((i & 0xA) != 0);
    }
  }
  
  public static class ScrollingViewBehavior
    extends HeaderScrollingViewBehavior
  {
    public ScrollingViewBehavior() {}
    
    public ScrollingViewBehavior(Context paramContext, AttributeSet paramAttributeSet)
    {
      super(paramAttributeSet);
      paramContext = paramContext.obtainStyledAttributes(paramAttributeSet, l.E4);
      O(paramContext.getDimensionPixelSize(l.F4, 0));
      paramContext.recycle();
    }
    
    private static int R(AppBarLayout paramAppBarLayout)
    {
      paramAppBarLayout = ((CoordinatorLayout.e)paramAppBarLayout.getLayoutParams()).f();
      if ((paramAppBarLayout instanceof AppBarLayout.BaseBehavior)) {
        return ((AppBarLayout.BaseBehavior)paramAppBarLayout).M();
      }
      return 0;
    }
    
    private void S(View paramView1, View paramView2)
    {
      Object localObject = ((CoordinatorLayout.e)paramView2.getLayoutParams()).f();
      if ((localObject instanceof AppBarLayout.BaseBehavior))
      {
        localObject = (AppBarLayout.BaseBehavior)localObject;
        f0.a0(paramView1, paramView2.getBottom() - paramView1.getTop() + AppBarLayout.BaseBehavior.R((AppBarLayout.BaseBehavior)localObject) + M() - I(paramView2));
      }
    }
    
    private void T(View paramView1, View paramView2)
    {
      if ((paramView2 instanceof AppBarLayout))
      {
        paramView2 = (AppBarLayout)paramView2;
        if (paramView2.l()) {
          paramView2.u(paramView2.w(paramView1));
        }
      }
    }
    
    float J(View paramView)
    {
      if ((paramView instanceof AppBarLayout))
      {
        paramView = (AppBarLayout)paramView;
        int j = paramView.getTotalScrollRange();
        int k = paramView.getDownNestedPreScrollRange();
        int i = R(paramView);
        if ((k != 0) && (j + i <= k)) {
          return 0.0F;
        }
        j -= k;
        if (j != 0) {
          return i / j + 1.0F;
        }
      }
      return 0.0F;
    }
    
    int L(View paramView)
    {
      if ((paramView instanceof AppBarLayout)) {
        return ((AppBarLayout)paramView).getTotalScrollRange();
      }
      return super.L(paramView);
    }
    
    AppBarLayout Q(List<View> paramList)
    {
      int j = paramList.size();
      int i = 0;
      while (i < j)
      {
        View localView = (View)paramList.get(i);
        if ((localView instanceof AppBarLayout)) {
          return (AppBarLayout)localView;
        }
        i += 1;
      }
      return null;
    }
    
    public boolean e(CoordinatorLayout paramCoordinatorLayout, View paramView1, View paramView2)
    {
      return paramView2 instanceof AppBarLayout;
    }
    
    public boolean h(CoordinatorLayout paramCoordinatorLayout, View paramView1, View paramView2)
    {
      S(paramView1, paramView2);
      T(paramView1, paramView2);
      return false;
    }
    
    public void i(CoordinatorLayout paramCoordinatorLayout, View paramView1, View paramView2)
    {
      if ((paramView2 instanceof AppBarLayout))
      {
        f0.j0(paramCoordinatorLayout, c.a.m.b());
        f0.j0(paramCoordinatorLayout, c.a.n.b());
      }
    }
    
    public boolean w(CoordinatorLayout paramCoordinatorLayout, View paramView, Rect paramRect, boolean paramBoolean)
    {
      AppBarLayout localAppBarLayout = Q(paramCoordinatorLayout.r(paramView));
      if (localAppBarLayout != null)
      {
        paramRect.offset(paramView.getLeft(), paramView.getTop());
        paramView = d;
        paramView.set(0, 0, paramCoordinatorLayout.getWidth(), paramCoordinatorLayout.getHeight());
        if (!paramView.contains(paramRect))
        {
          localAppBarLayout.r(false, paramBoolean ^ true);
          return true;
        }
      }
      return false;
    }
  }
  
  class a
    implements z
  {
    a() {}
    
    public n0 a(View paramView, n0 paramN0)
    {
      return n(paramN0);
    }
  }
  
  class b
    implements ValueAnimator.AnimatorUpdateListener
  {
    b(d.c.a.a.x.g paramG) {}
    
    public void onAnimationUpdate(ValueAnimator paramValueAnimator)
    {
      paramG.W(((Float)paramValueAnimator.getAnimatedValue()).floatValue());
    }
  }
  
  public static abstract interface c<T extends AppBarLayout>
  {
    public abstract void a(T paramT, int paramInt);
  }
  
  public static abstract interface d
    extends AppBarLayout.c<AppBarLayout>
  {}
}
